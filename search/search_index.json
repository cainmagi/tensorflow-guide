{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"扉页 ¶ 摘要 Tensorflow总纲，写给初学者们。本页面将简述Tensorflow的基本原理，结构设计以及版本更新。读者亦可在本页找到本教程将提供给读者对Tensorflow怎样的认识。 注意 由于技术限制，现在中文搜索功能无法完善，请注意当搜索关键词的时候自行分词，例如： 开放源代码软件库 无法搜到任何内容。但可以搜索 开放 源代码 软件 库 即可确保索引到上述内容。 Tensorflow总说 ¶ Tensorflow官网 TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。 Tensorflow治学 ¶ 写在所有内容之前，读者不得不看以下几个页面，本教程所述内容大略来自于对这些资料的研读。 Tensorflow官网(中/英文) : https://www.tensorflow.org/ Keras中文文档 : https://keras-zh.readthedocs.io/ Tensorflow 2.0前瞻(英文) : https://medium.com/tensorflow/effective-tensorflow-2-0-best-practices-and-whats-changed-a0ca48767aff Tensorflow 2.0前瞻(中文) : https://zhuanlan.zhihu.com/p/50049041 提示 特别值得注意的是，现在官方文档至少在教程部分， 已经支持中英双语 。相比官方文档，我们的教程更侧重于以搭建工程为导向的设计。然而现在官方文档的翔实可读程度，确实不可错过。另一方面，Keras的 官方中文文档 似乎已不再更新，上面提供的原官方中文文档译者现在正在更新、维护的版本。 大略来说，学习Tensorflow主要应当依赖于官方文档的介绍。敝人自r1.4版开始入门Tensorflow，即是通过学习官方文档的教程来快速上手。相比四处蒐集资料，官方文档能提供一个完整、系统、完全贴合时下最新API的例子，帮助用户建立一个与Tensorflow各个功能合宜的使用习惯。若是通过在Github上检索他人的project，固然是一个很好的上手办法，但是往往就会遗漏某些重要的功能而不学。例如，Tensorflow自带的网络存取和Tensorboard API，在时兴的一些project中，经常会因方便之故，以numpy的IO来代替。笔者以为，如此培养起来的使用习惯，可谓走入偏门。当然，从这一点来说，本教程也亦复如是，即使笔者写下这些内容的时候，参照的乃是时下最新的API，时间一久，难免会过时。倘若笔者懒惰一些，不再时时更新本教程，那么本教程也就入不足取之流了。 虽然如此，教程也有并不合宜的地方。最大的问题莫过于Tensorflow本身，它有着日新月异的变化，此时能圆转如意地使用的API，到了彼时也许就成了废案。这就导致Tensorflow的官方教程也不断更新。r1.4时，教程还主要集中在如何使用“底层”API上，到了r1.9.0，就已经变成基本围绕着 tf.keras 设计的思路了。最新消息显示，即将上线的Tensorflow 2.0，将会彻底抛弃过去的“中层”API以下的全部方法， tf.layers , tf.contrib 都将被移除，倘若长期墨守成规，局限在入门时候的一套技术上，迟早会被官方库如此迅速的更新所弃。这也是无可奈何之事。毕竟Tensorflow仍然处于不断改进之中。倘若希望追求一个更加稳定、长期可用的库，keras或许是一个不错的选择。 故而，本教程将基本基于Tensorflow现在的版本(r1.13)展开介绍。本教程既可以看作一个入门教程，也可以看作是本人重新自学新版Tensorflow规范化API的一个手记，故而命名本教程为“手札”。读者不妨跟着笔者的思路，有如与笔者共学一般读下来本教程。 Tensorflow原理 ¶ 一个标准的Tensorflow工作流可以表示成这样： graph TD st(开始) --> Sess[启动Session] Sess --> ConNet[构建网络] subgraph 构造流程 ioNet>读取网络参数] --> ConNet end subgraph 执行流程 ioDat>导入数据] --> Run ConNet --> Run[执行网络] Run --> ioNetS>保存网络参数] Run --> ioRes>导出结果] end ioRes --> SessCl[关闭Session] SessCl --> ed(结束) classDef styStart fill:#FAE6A9,stroke:#BA9132; classDef styIO fill:#cde498,stroke:#13540c; class st,ed styStart class ioNet,ioNetS,ioDat,ioRes styIO 与一般的计算库不同，Tensorflow的执行流程大体可以分为两步： 构造流程 : 在这一步，Tensorflow根据用户代码构造一个 数据流图(dataflow graph) 。所谓数据流图，指的是由一系列 张量(Tensor) 构成的符号运算集合。就如同一张流程图一样，在这一阶段，尽管用户定义了每一步的运算（从简单的加减乘除到复杂的网络单元），但是没有任何运算被执行。就像一个程序员撰写代码一样，Tensorflow在这一步，将用户的代码转换成它的“机器语言”，但是网络还没有进入被使用的阶段。 执行流程 : 在这一步，Tensorflow将计算用户指定的某个 Tensor 的输出结果。要得到一个Tensor的输出，则必须得计算它一系列的依赖变量。例如，我们已知 y = x_1 + x_2 y = x_1 + x_2 , x_2 = z_1 \\times z_2 x_2 = z_1 \\times z_2 。那么，如果Tensorflow要得到 y y 的结果，它就必须先计算 x_2 x_2 。这个过程被完全地封装起来，从用户看来，我们只需要调用 y y 的输出即可，不需要关心Tensorflow是怎样按照流图完成计算的。 因此，典型的Tensorflow式的语言风格也可以这样划分： 构造流程 : 用户定义整个网络的符号运算，指定网络各个节点的属性、输入和输出。这些代码往往被写成一个函数（例如 def construct (): ） 执行流程 : 创建一个Session，在Session内调用构造函数，然后输入数据，得到并保存输出结果。必要情况下，还需要导入导出网络参数。 这里提到 会话(Session) 。Session如同一个Tensorflow虚拟机，在一个Session打开的时候，设备的计算资源（GPU, CPU, 带宽等）才被加载。Session又如同一个工人，用户撰写的网络构造代码如同车间，输入的数据如同商品，“工人（Session）”利用预定义好的“车间（流图）”将可以快速、批量地生产这些“商品（数据）”。这样地设计保证了一些外围的代码，例如指定网络参数的名称、函数的属性等操作，不需要重复进行，从而确保处理数据的时候，总是执行必要的代码，加快运算速度。 另一方面，构造-执行的结构还封装了许多提高运算效率的特性，例如多线程。尽管用户定义网络构造的时候，所写的代码是按照逻辑顺序的、线性的。但实际运行的时候，Tensorflow可以自行发现网络的哪些部分可以被同时运行，从而利用多核系统的计算资源。这些过程也是被完全封装起来的，用户并不需要花费心思去专门进行这些调整。 须知 在Tensorflow已经转变为Keras导向的现在，Session的调用被Keras API封装了起来，从用户的角度来看，现在已经不再需要手动调用Session。 Tensorflow API架构 ¶ 下图显示了当前Tensorflow-API的组织形式 Tensorflow在多个平台上均有部署，包括Python, C++, Java, Javascript, Go等，未来还可能支持更多的语言。然而，不同平台上，API的使用方式和代码风格是大不相同的。例如，Python的语言风格目前已经朝向Keras转变，而Javascript仍倾向于使用中层API；C++和Java偏向于使用底层API编写程序。本教程只针对时兴Python的API编写，除非涉及到特定的专题，不会讨论其他语言上Tensorflow的用法。 一般而言，Tensorflow将API面向划分为三个层次： 高层API (High level) : 包括Estimators和Keras； 中层API (Mid level) : 包括layers, datasets, loss和metrics等具有功能性的函数，例如网络层的定义，Loss Function，对结果的测量函数等； 底层API (Low level) : 包括具体的加减乘除、具有解析式的数学函数、卷积、对Tensor属性的测量等。 从r1.4入门的用户，所接受的训练往往是从底层API开始，使用自己的代码风格构建对应中层API的函数，然后再用自己定义好的中层API构建网络。在这种代码风格的驱使下，用户除了需要定义各个网络层具体的表达式，还需要设计输入输出的接口，用来调用 优化器(optimizer) 的接口等操作。 另一种使用方式，是从中层API开始，直接使用预定义好的网络层构建网络，这样的代码风格会节省一部分时间，相当于几乎不再需要接触底层API，但是在输入输出、网络训练和测试等更高层的模块设计上，和底层API用户的代码风格相似。 Estimators是从r1.4就已经存在的API了，它可以被看成是已经集成在Tensorflow里的完整的网络。因此，Estimators往往适合分发、需求不高的应用，但是并不适合使用Tensorflow的研究者。尽管至今为止，Tensorflow仍然对Estimators倍加推崇，但本教程将完全不涉及这方面的内容。 另一个高层API是 Eager Execution ，从r1.9起，Tensorflow就加入了这种新的使用模式，并且在Tensorflow 2.0中，它仍然将会被保留。Eager摈弃了上述的构造-执行流程，任何对Tensor的定义会被立时计算、并可得到结果。对于需要进行小规模的调试、检查API功能的用户而言更加方便。但是，据一些用户的反响，现在Eager还没有做到和之前API的完全兼容，本教程将基本不涉及Eager的用法。 因此，Keras API将是本教程的重中之重。使用本教程的用户，可以对照目前的官方文档，跟进本教程的思路，自己逐步实现各个project的设计。使用Keras风格的设计，代码量会明显少于前面提到的各种风格（Estimators除外）。事实上， tf.keras 和底层API之间具有一定的兼容，这样的编写风格能让我们在满足自己设计的派生功能的基础上，尽可能使用规范化、预定义的API单元，从而减少代码出错的可能性。通过对本教程TF 1.x版的学习，对未来2.0版的上手也会带来莫大帮助。 金宇琛( @cainmagi )，2019年3月2日 Yuchen Jin( @cainmagi ), Mar. 2, 2019 教程导读 ¶ 接下来，本教程将会涉及 从线性问题入门 : 如何使用Tensorflow完成一个简单的线性分类设计，我们将从Hello World开始，逐步过渡到一个具有核函数的非线性问题project。 Hello world: 第一个Tensorflow程序。 线性分类: 一个简单的二分类问题。 线性回归: 一个同样简单的，线性拟合问题。 非线性回归: 拟合一个简单的，可以表达出解析式的非线性函数。 非线性分类: 使用线性分类器对非线性分布的数据进行分类。 训练与测试分立 : 从这一章开始，并试图解决几个更加复杂的实际问题。这里涉及到的project相对更大、更完整，训练往往需要一定时间才能完成。因此，在本章，所有项目的训练、测试环节都会分开，我们将从这里开始，使用TensorBoard跟踪我们的训练情况，并介绍如何存取神经网络。 Super Resolution: 使用神经网络进行图像像素插值。 Sparse Coding: 使用线性的词典学习(dictionary learning)来进行图像像素插值。 Generitive Model: 使用时兴的生成模型(Generitive Model)来完成图像风格的转换。 原生的数据管理 : 从这一章开始，我们将纳入Tensorflow自带的数据管理API。实际上，很多用户并不习惯使用这些API，往往倾向于自己完成数据的导入导出。虽然这并非一个复杂的工作，但据Tensorflow的文档，原生的数据管理内部实现了多线程，本身更适合用于提高数据IO的效率。读者可以酌情选择是否需要阅读本章。 使用MINIST数据集: 使用原生的数据管理来IO一个现成的MINIST数据集，这一节改自 官方文档教程 。 使用RNN处理文章: 通过LSTM模型来进行文本分类，并使用原生的数据管理来IO一个现成的IMDB数据集，这一节改自 官方文档教程 。 使用RBM生成音频: 通过限制玻尔兹曼机(RBM)来编写一个简单的音乐生成器，这一节改自 llSourcell/Music_Generator_Demo 。 其他的高级技巧 : 本章将介绍一些特殊的、利用底层API技巧，使得用户能更灵活地定制Tensorflow-keras，从而实现一些仅依靠原生库不能实现的功能。","text_tokens":["当然","上述","本章","原生","走入","神经网络","教程","将会","全部","译者","已知","接下","写下","流程","必要","文章","java","一部分","上","3","好","检查","\\","之间","存在","双语","利用","更大","起来","事","同样","批量","另一方","角度","best","即","迟早","coding","estimators","那么","之故","参照","最初","13540c","仅","输入","环节","程度","往往","whats","并不需要","这方","9.0","执行","基础","运算","本","效率","节省","里","不断","这方面","工程","大体","不高","之前","导读","具体","习惯","www","共","新月","定义","式","提高","技术","架构","追求","构建","不得不","以下","版本","一个","部署","所述","应当","以为","也许","不错","轻松","贴合","起","例子","被","撰写","读者","分类","关键","所写","单元","一点","这个","写成","一种","org","形式","本人","保存","存取","会话","局限","主要","花费","学者","metrics","数学","重新","实际上","指定","会因","神经网","故而","解决","；","面向","”","然而","end","必须","分开","遗漏","minist","practices","cainmagi","特定","复杂","下来","c++","world","进行","找到","名称","文本","模块","命名","流程图","resolution","看来","关键词","python",")","仍然","科学","具有",">","tf","似乎","2019","contrib","他人","重中之重","自带","本身","ai","方面","优化","level","人员","管理","subgraph","彼时","sesscl","顺序","调试","即使","generator","包括","专题","义","让","生成器","广泛应用","手札","典型","平台","搭建","时兴","计算资源","改进","多线","速度","计算","虽然","事实","使用","现在","optimizer","构设","转换成","提到","边缘","class","总说","莫大","并且","方式","无法","词典","等","读取","相当","z","模型","莫过","不可","不足取","自","io","有着","输出","方法","完成","对应","还","核","加快","墨守成规","接受","守成","兼容","着","系列","但是","但","建立","表达","表达式","数据流","研究","没有","图像","性能","结构设计","是","像素","手","看作","过渡","基本","版","机","如何","y","卷积","用来","总纲","加载","+","阶段","项目","得","run","不","组织","p","可以","外围","a0ca48767aff","纳入","摘要","模式","迅速","跟进","除外","确保","运行","数值","来自","做到","cde498","numpy","接口","将","相似","就","changed","时","多种","人","loss","打开","第一","某个","方便","一方面","开始","重于","总是","英双语","llsourcell","(","部分","文档","集","不学","音乐","带来","完善","集合","高性","更加","使得","生产","1","逻辑","sparse","构成","zh","工作","介绍","如同","情况","来说","high","语言","领域","sess","自行","关闭","高级","兹曼","怎样","四处","则","由于","才","针对","zhihu","来","不足","支持","日新月异","过去","彻底","td","构造函数","属性","正在","完全","keras","改","工人","fill","但本","乃是","乘除","至今","初学","维护","简单","任何","过时","内容","索引","分立","model","满足","需要","莫过于","能圆转","高性能","商品","然后","问题","风格","网络层","相当于","、","有如","量会","用于","r1","更","搜索","如意","调用","tpu","据","注意","蒐集","某些","深度","依赖","除非","从而","亦可","隶属于","达式","和","涉及","分布","来看","可用","又","稳定","：","们","系统","时间","跟着","借助","过程","工程师","之","]","才能","日","限制","库","imdb","规范","反响","基本原理","一系","对于","服务","一张","部门","tensor","显示","加减乘除","小规模","自学","转换","即可","跟踪","音频","看","封装","不得","提示","为","墨守成","本原","集成","学习","函数","如果","开发","如是","解析","在","摈弃","阅读","一部","effective","研究者","仍","均","保证","明显","玻尔兹曼","导致","回归","参数","检索","music","™","一系列","而","两步","少于","generitive","导向","api","大不相同","选择","符号","地","brain","笔者","办法","可能","机器","请","2.0","地方","足取","调整","二","带宽","github","根据","自己","tensorflow","层次","或许","广泛","zhuanlan","这些","测试","高层","务器","以","发现",":","年","于","可","变量","（","三个","底层","当于","划分","设备","给","ba9132","例如","张量","ionets","都","最大","尽可能","eager","graph","分类器","入门教程","车间","出","虚拟机","现成","隶属","移动","x","变成","所谓","@","而言","治学","成规","它","当","不断更新","不妨","只","go","_","入","因此","不会","session","很","实际","扉页","侧重于","¶","新版","适合","指","另","之中","project","也","搜","相同","是从","数据管理","程序员","很多","当前","用法","器","事实上","分词","驱使","朝向","的","基于","新","实现","需求","编写程序","-","专门","成器","代码","废案","以及","会","我们","生成","stystart","另一方面"," ","50049041","虚拟","许多","像","完整","可谓","每","2","并","偏门","这种","开放","内部","桌面","4","之流","代替","一","线程","几个","mar","）","久","并非","资料","这","推崇","操作","范化","抛弃","学","强力","换成","写","=","def","重复","倍加","有","13","去","“","手记","再用","不断改进","启动","倘若","集群","进入","毕竟","yuchen","一定","手动","编写","。","为止","从这一点","试图","几乎","特别","对","长期","一方","times","技巧","资源","逐步","义好","各种","英文","如此","fae6a9","第一个","经常","iores","减少","展开","错过","值得注意","规范化","上线","#","希望","原理","readthedocs","成","难免会","训练","既","mid","机器语言","出错","内","即将","构造","https","难免","多个","结构","整个","多线程","用户","侧重","/","9","心思","目前","定制","页面","初学者","相比","导入","转变","亦复如是","下","但据","这样","不合","hello","一般","得到","非线性","提供","多","所有","相对","iodat","依靠","中层","一章","特殊","团队","是否","加入","0","dictionary","多核","认识","cpu","尽管","rnn","功能","前瞻","官方","已","导出","各个","本页","简述","无可","图","通过","下图","应用","中文搜索","中文","派生","上面","所","测量","网络单元","所弃","了","已经","立时","合宜","过于","处于","插值","翔实","酌情","快速","官网","迟早会","其他","网络","特性","classdef","construct","一些","st","倾向","偏向","程序","javascript","至少","一套","集中","一样","须知","lstm","connet","处理","可能性","不能","到","同时","源代码","learning","线性","一步","创建","gpu","移除","属于","培养","尽可","流图","服务器","月","流","low","功能性","datasets","接下来","对照","加减","demo","一般而言",".","金宇琛","能","时时","分发","预定","值得","未来","变化","此时","中","写给","围绕","固然",",","无可奈何","其","tensorboard","ionet",";","styio","最新","研读","execution","奈何","消息","输入输出","dataflow","关心","数据","规模","更新","核心","layers","保留","super","标准","除了","stroke","com","敝","最新消息","要","接触","原","思路","and","结果","大略","与","前面","，","[","不再","ed","确实","google","分为","对本","讨论","依赖于","懒惰","节点","拟合","软件","哪些","这里","medium","若","墨守","一节","rbm","入门","赖于","表示","jin","结束","看成","时候","先","按照","function","由","不同","设计","重要","不合宜","从","神经","读","灵活","直接","玻尔","帮助"],"title":"扉页","title_tokens":["扉页"]},{"location":"#_1","text":"摘要 Tensorflow总纲，写给初学者们。本页面将简述Tensorflow的基本原理，结构设计以及版本更新。读者亦可在本页找到本教程将提供给读者对Tensorflow怎样的认识。 注意 由于技术限制，现在中文搜索功能无法完善，请注意当搜索关键词的时候自行分词，例如： 开放源代码软件库 无法搜到任何内容。但可以搜索 开放 源代码 软件 库 即可确保索引到上述内容。","text_tokens":["原理","上述","自行","但","亦可","教程","技术","怎样","在","中文","中文搜索","将","由于","版本","结构设计","搜","结构","给","：","，","例如","们","确保","基本","读者","现在","关键","构设","找到","的","分词","页面","。","限制","初学者","初学","关键词","软件","库","基本原理","任何","对","总纲","请","代码","内容","索引","以及","写给","无法","提供"," ","即可","当","可以","学者","完善","时候","摘要","tensorflow","认识","设计","开放","本","搜索","到","更新","本原","源代码","功能","注意","本页","简述"],"title":"扉页","title_tokens":["扉页"]},{"location":"#tensorflow","text":"Tensorflow官网 TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。","text_tokens":["开发","研究","性能","是","用户","™","地","brain","最初","机器","提供","可以","团队","tensorflow","cpu","广泛","工程","数值","务器","应用","架构","可","于","（","将","一个","部署","轻松","设备","多种","官网","其他","隶属","移动","高性","到","工作","源代码","领域","gpu","属于","服务器","支持","进行","的","代码","科学","中","高性能","其"," ","许多","、","开放","用于","桌面","ai","核心","人员","tpu","）","深度","隶属于","强力","广泛应用","和","平台","，","集群","计算","google","借助","工程师","库","。","边缘","软件","服务","并且","部门","等","由","为","灵活","学习"],"title":"Tensorflow总说","title_tokens":["tensorflow","总说"]},{"location":"#tensorflow_1","text":"写在所有内容之前，读者不得不看以下几个页面，本教程所述内容大略来自于对这些资料的研读。 Tensorflow官网(中/英文) : https://www.tensorflow.org/ Keras中文文档 : https://keras-zh.readthedocs.io/ Tensorflow 2.0前瞻(英文) : https://medium.com/tensorflow/effective-tensorflow-2-0-best-practices-and-whats-changed-a0ca48767aff Tensorflow 2.0前瞻(中文) : https://zhuanlan.zhihu.com/p/50049041 提示 特别值得注意的是，现在官方文档至少在教程部分， 已经支持中英双语 。相比官方文档，我们的教程更侧重于以搭建工程为导向的设计。然而现在官方文档的翔实可读程度，确实不可错过。另一方面，Keras的 官方中文文档 似乎已不再更新，上面提供的原官方中文文档译者现在正在更新、维护的版本。 大略来说，学习Tensorflow主要应当依赖于官方文档的介绍。敝人自r1.4版开始入门Tensorflow，即是通过学习官方文档的教程来快速上手。相比四处蒐集资料，官方文档能提供一个完整、系统、完全贴合时下最新API的例子，帮助用户建立一个与Tensorflow各个功能合宜的使用习惯。若是通过在Github上检索他人的project，固然是一个很好的上手办法，但是往往就会遗漏某些重要的功能而不学。例如，Tensorflow自带的网络存取和Tensorboard API，在时兴的一些project中，经常会因方便之故，以numpy的IO来代替。笔者以为，如此培养起来的使用习惯，可谓走入偏门。当然，从这一点来说，本教程也亦复如是，即使笔者写下这些内容的时候，参照的乃是时下最新的API，时间一久，难免会过时。倘若笔者懒惰一些，不再时时更新本教程，那么本教程也就入不足取之流了。 虽然如此，教程也有并不合宜的地方。最大的问题莫过于Tensorflow本身，它有着日新月异的变化，此时能圆转如意地使用的API，到了彼时也许就成了废案。这就导致Tensorflow的官方教程也不断更新。r1.4时，教程还主要集中在如何使用“底层”API上，到了r1.9.0，就已经变成基本围绕着 tf.keras 设计的思路了。最新消息显示，即将上线的Tensorflow 2.0，将会彻底抛弃过去的“中层”API以下的全部方法， tf.layers , tf.contrib 都将被移除，倘若长期墨守成规，局限在入门时候的一套技术上，迟早会被官方库如此迅速的更新所弃。这也是无可奈何之事。毕竟Tensorflow仍然处于不断改进之中。倘若希望追求一个更加稳定、长期可用的库，keras或许是一个不错的选择。 故而，本教程将基本基于Tensorflow现在的版本(r1.13)展开介绍。本教程既可以看作一个入门教程，也可以看作是本人重新自学新版Tensorflow规范化API的一个手记，故而命名本教程为“手札”。读者不妨跟着笔者的思路，有如与笔者共学一般读下来本教程。","text_tokens":["当然","走入","教程","将会","全部","译者","写下","上","好","双语","起来","事","另一方","best","即","迟早","那么","之故","参照","程度","往往","whats","9.0","本","不断","工程","之前","www","习惯","共","新月","技术","追求","以下","所述","不得不","版本","应当","一个","也许","以为","不错","贴合","例子","被","读者","一点","org","本人","存取","局限","主要","重新","会因","故而","”","然而","遗漏","practices","下来","命名",")","仍然","tf","似乎","contrib","他人","自带","本身","方面","彼时","即使","手札","搭建","时兴","改进","虽然","使用","现在","莫过","不可","不足取","自","io","有着","方法","还","墨守成规","守成","着","但是","建立","是","手","看作","版","基本","如何","p","可以","a0ca48767aff","迅速","来自","numpy","将","就","changed","时","人","方便","一方面","开始","重于","英双语","(","部分","文档","不学","更加","zh","介绍","来说","四处","zhihu","来","不足","支持","日新月异","过去","彻底","正在","完全","keras","乃是","维护","过时","内容","莫过于","能圆转","问题","、","有如","r1","更","如意","注意","蒐集","某些","依赖","和","可用","稳定","系统","时间","跟着","之","库","规范","显示","自学","看","不得","提示","为","墨守成","学习","如是","在","effective","导致","检索","而","导向","api","选择","地","笔者","办法","2.0","地方","足取","github","tensorflow","或许","zhuanlan","这些","以",":","于","可","底层","例如","都","最大","入门教程","变成","成规","它","不断更新","不妨","入","很","侧重于","新版","之中","project","也","的","基于","-","废案","会","我们","另一方面"," ","50049041","完整","可谓","2","并","偏门","4","之流","代替","一","几个","久","资料","这","范化","抛弃","学","写","有","13","“","手记","不断改进","倘若","毕竟","。","从这一点","特别","对","长期","一方","英文","如此","经常","展开","错过","值得注意","规范化","上线","希望","readthedocs","成","难免会","既","即将","https","难免","用户","侧重","/","页面","相比","亦复如是","下","不合","一般","提供","所有","中层","0","功能","官方","前瞻","已","各个","无可","通过","中文","上面","所弃","了","已经","合宜","过于","处于","翔实","快速","官网","迟早会","网络","一些","至少","一套","集中","到","移除","培养",".","能","时时","值得","变化","此时","中","围绕",",","固然","无可奈何","tensorboard","最新","研读","奈何","消息","更新","layers","com","敝","最新消息","原","思路","and","大略","与","，","不再","确实","依赖于","懒惰","medium","若","墨守","入门","赖于","时候","设计","重要","不合宜","读","帮助"],"title":"Tensorflow治学","title_tokens":["治学","tensorflow"]},{"location":"#tensorflow_2","text":"一个标准的Tensorflow工作流可以表示成这样： graph TD st(开始) --> Sess[启动Session] Sess --> ConNet[构建网络] subgraph 构造流程 ioNet>读取网络参数] --> ConNet end subgraph 执行流程 ioDat>导入数据] --> Run ConNet --> Run[执行网络] Run --> ioNetS>保存网络参数] Run --> ioRes>导出结果] end ioRes --> SessCl[关闭Session] SessCl --> ed(结束) classDef styStart fill:#FAE6A9,stroke:#BA9132; classDef styIO fill:#cde498,stroke:#13540c; class st,ed styStart class ioNet,ioNetS,ioDat,ioRes styIO 与一般的计算库不同，Tensorflow的执行流程大体可以分为两步： 构造流程 : 在这一步，Tensorflow根据用户代码构造一个 数据流图(dataflow graph) 。所谓数据流图，指的是由一系列 张量(Tensor) 构成的符号运算集合。就如同一张流程图一样，在这一阶段，尽管用户定义了每一步的运算（从简单的加减乘除到复杂的网络单元），但是没有任何运算被执行。就像一个程序员撰写代码一样，Tensorflow在这一步，将用户的代码转换成它的“机器语言”，但是网络还没有进入被使用的阶段。 执行流程 : 在这一步，Tensorflow将计算用户指定的某个 Tensor 的输出结果。要得到一个Tensor的输出，则必须得计算它一系列的依赖变量。例如，我们已知 y = x_1 + x_2 y = x_1 + x_2 , x_2 = z_1 \\times z_2 x_2 = z_1 \\times z_2 。那么，如果Tensorflow要得到 y y 的结果，它就必须先计算 x_2 x_2 。这个过程被完全地封装起来，从用户看来，我们只需要调用 y y 的输出即可，不需要关心Tensorflow是怎样按照流图完成计算的。 因此，典型的Tensorflow式的语言风格也可以这样划分： 构造流程 : 用户定义整个网络的符号运算，指定网络各个节点的属性、输入和输出。这些代码往往被写成一个函数（例如 def construct (): ） 执行流程 : 创建一个Session，在Session内调用构造函数，然后输入数据，得到并保存输出结果。必要情况下，还需要导入导出网络参数。 这里提到 会话(Session) 。Session如同一个Tensorflow虚拟机，在一个Session打开的时候，设备的计算资源（GPU, CPU, 带宽等）才被加载。Session又如同一个工人，用户撰写的网络构造代码如同车间，输入的数据如同商品，“工人（Session）”利用预定义好的“车间（流图）”将可以快速、批量地生产这些“商品（数据）”。这样地设计保证了一些外围的代码，例如指定网络参数的名称、函数的属性等操作，不需要重复进行，从而确保处理数据的时候，总是执行必要的代码，加快运算速度。 另一方面，构造-执行的结构还封装了许多提高运算效率的特性，例如多线程。尽管用户定义网络构造的时候，所写的代码是按照逻辑顺序的、线性的。但实际运行的时候，Tensorflow可以自行发现网络的哪些部分可以被同时运行，从而利用多核系统的计算资源。这些过程也是被完全封装起来的，用户并不需要花费心思去专门进行这些调整。 须知 在Tensorflow已经转变为Keras导向的现在，Session的调用被Keras API封装了起来，从用户的角度来看，现在已经不再需要手动调用Session。","text_tokens":["系列","成","但是","但","在","数据流","已知","机器语言","流程","没有","必要","内","构造","是","\\","保证","利用","结构","整个","多线程","起来","用户","参数","批量","另一方","一系列","角度","两步","心思","导向","api","符号","y","地","那么","导入","转变","下","13540c","机器","+","这样","加载","输入","一般","得到","阶段","得","run","不","iodat","往往","并不需要","调整","可以","执行","带宽","外围","根据","运算","tensorflow","多核","尽管","cpu","效率","这些","大体","确保","运行","导出","各个","图","式","定义","发现","提高","cde498",":","变量","（","构建","将","一个","就","网络单元","划分","了","设备","已经","ba9132","张量","被","ionets","例如","打开","撰写","某个","一方面","开始","所写","快速","单元","graph","这个","总是","写成","车间","虚拟机","网络","特性","x","(","classdef","construct","部分","保存","一些","st","所谓","会话","程序","如果","它","花费","须知","集合","一样","connet","只","1","生产","处理","逻辑","构成","指定","_","因此","到","同时","工作","session","如同","线性","实际","情况","一步","创建","语言","sess","gpu","自行","关闭","”","end","怎样","则","必须","指","流图","才","流","也","程序员","加减","td","构造函数","复杂","属性","完全","keras","工人","fill","进行","名称","的","乘除","流程图","看来","-","预定","专门","简单",")","任何","代码",">","styio","需要",",","我们",";","stystart","ionet","商品"," ","然后","虚拟","另一方面","许多","风格","像","每","、","2","并","dataflow","调用","数据","一","关心","方面","线程","subgraph","）","标准","sesscl","依赖","顺序","这","stroke","操作","从而","要","换成","重复","def","=","典型","结果","和","来看","计算资源","去","“","又","与","加快","：","启动","，","[","ed","进入","速度","多线","计算","系统","不再","使用","分为","现在","过程","转换成","]","节点","提到","手动","库","。","class","哪些","一系","这里","一张","一方","tensor","times","加减乘除","等","读取","转换","z","表示","即可","义好","结束","fae6a9","输出","先","封装","按照","时候","完成","不同","由","从","还","设计","iores","为","资源","函数","#"],"title":"Tensorflow原理","title_tokens":["原理","tensorflow"]},{"location":"#tensorflow-api","text":"下图显示了当前Tensorflow-API的组织形式 Tensorflow在多个平台上均有部署，包括Python, C++, Java, Javascript, Go等，未来还可能支持更多的语言。然而，不同平台上，API的使用方式和代码风格是大不相同的。例如，Python的语言风格目前已经朝向Keras转变，而Javascript仍倾向于使用中层API；C++和Java偏向于使用底层API编写程序。本教程只针对时兴Python的API编写，除非涉及到特定的专题，不会讨论其他语言上Tensorflow的用法。 一般而言，Tensorflow将API面向划分为三个层次： 高层API (High level) : 包括Estimators和Keras； 中层API (Mid level) : 包括layers, datasets, loss和metrics等具有功能性的函数，例如网络层的定义，Loss Function，对结果的测量函数等； 底层API (Low level) : 包括具体的加减乘除、具有解析式的数学函数、卷积、对Tensor属性的测量等。 从r1.4入门的用户，所接受的训练往往是从底层API开始，使用自己的代码风格构建对应中层API的函数，然后再用自己定义好的中层API构建网络。在这种代码风格的驱使下，用户除了需要定义各个网络层具体的表达式，还需要设计输入输出的接口，用来调用 优化器(optimizer) 的接口等操作。 另一种使用方式，是从中层API开始，直接使用预定义好的网络层构建网络，这样的代码风格会节省一部分时间，相当于几乎不再需要接触底层API，但是在输入输出、网络训练和测试等更高层的模块设计上，和底层API用户的代码风格相似。 Estimators是从r1.4就已经存在的API了，它可以被看成是已经集成在Tensorflow里的完整的网络。因此，Estimators往往适合分发、需求不高的应用，但是并不适合使用Tensorflow的研究者。尽管至今为止，Tensorflow仍然对Estimators倍加推崇，但本教程将完全不涉及这方面的内容。 另一个高层API是 Eager Execution ，从r1.9起，Tensorflow就加入了这种新的使用模式，并且在Tensorflow 2.0中，它仍然将会被保留。Eager摈弃了上述的构造-执行流程，任何对Tensor的定义会被立时计算、并可得到结果。对于需要进行小规模的调试、检查API功能的用户而言更加方便。但是，据一些用户的反响，现在Eager还没有做到和之前API的完全兼容，本教程将基本不涉及Eager的用法。 因此，Keras API将是本教程的重中之重。使用本教程的用户，可以对照目前的官方文档，跟进本教程的思路，自己逐步实现各个project的设计。使用Keras风格的设计，代码量会明显少于前面提到的各种风格（Estimators除外）。事实上， tf.keras 和底层API之间具有一定的兼容，这样的编写风格能让我们在满足自己设计的派生功能的基础上，尽可能使用规范化、预定义的API单元，从而减少代码出错的可能性。通过对本教程TF 1.x版的学习，对未来2.0版的上手也会带来莫大帮助。 金宇琛( @cainmagi )，2019年3月2日 Yuchen Jin( @cainmagi ), Mar. 2, 2019","text_tokens":["上述","教程","将会","流程","java","一部分","上","3","好","检查","之间","存在","estimators","输入","往往","这方","执行","基础","本","节省","里","这方面","不高","之前","具体","式","定义","构建","集成","一个","部署","起","被","单元","一种","形式","metrics","数学","；","面向","然而","cainmagi","特定","c++","进行","模块","python",")","仍然","具有","tf","2019","重中之重","优化","方面","level","调试","包括","专题","义","让","平台","时兴","计算","事实","使用","现在","optimizer","提到","莫大","并且","方式","等","相当","输出","对应","还","接受","兼容","但是","表达","表达式","研究","没有","是","手","基本","版","卷积","用来","不","组织","可以","模式","跟进","除外","做到","接口","将","相似","就","loss","方便","开始","(","部分","文档","带来","更加","1","high","语言","针对","支持","属性","完全","keras","但本","乘除","至今","任何","内容","满足","需要","然后","风格","网络层","相当于","、","量会","r1","更","调用","据","除非","从而","达式","和","涉及","：","时间","日","规范","反响","对于","tensor","显示","加减乘除","小规模","为","学习","函数","解析","在","摈弃","一部","研究者","仍","均","明显","而","少于","api","大不相同","可能","2.0","自己","tensorflow","层次","测试","高层",":","年","于","可","（","三个","底层","当于","划分","例如","尽可能","eager","x","@","而言","它","只","go","因此","不会","适合","另","project","也","相同","是从","当前","用法","器","事实上","驱使","朝向","的","实现","新","需求","编写程序","-","代码","会","我们"," ","完整","这种","2","并","4","mar","）","推崇","操作","范化","倍加","有","再用","yuchen","一定","编写","。","为止","几乎","对","逐步","义好","各种","减少","规范化","训练","mid","出错","构造","多个","用户","9","目前","转变","下","这样","一般","得到","多","中层","加入","尽管","功能","官方","各个","下图","通过","应用","派生","所","测量","了","已经","立时","其他","网络","一些","偏向","倾向","javascript","程序","可能性","到","尽可","月","low","功能性","datasets","对照","加减","一般而言",".","金宇琛","能","分发","预定","未来","中",",","execution","输入输出","规模","layers","保留","除了","接触","思路","结果","前面","，","不再","对本","讨论","入门","jin","看成","function","不同","从","设计","直接","帮助"],"title":"Tensorflow API架构","title_tokens":[" ","api","tensorflow","架构"]},{"location":"#_2","text":"接下来，本教程将会涉及 从线性问题入门 : 如何使用Tensorflow完成一个简单的线性分类设计，我们将从Hello World开始，逐步过渡到一个具有核函数的非线性问题project。 Hello world: 第一个Tensorflow程序。 线性分类: 一个简单的二分类问题。 线性回归: 一个同样简单的，线性拟合问题。 非线性回归: 拟合一个简单的，可以表达出解析式的非线性函数。 非线性分类: 使用线性分类器对非线性分布的数据进行分类。 训练与测试分立 : 从这一章开始，并试图解决几个更加复杂的实际问题。这里涉及到的project相对更大、更完整，训练往往需要一定时间才能完成。因此，在本章，所有项目的训练、测试环节都会分开，我们将从这里开始，使用TensorBoard跟踪我们的训练情况，并介绍如何存取神经网络。 Super Resolution: 使用神经网络进行图像像素插值。 Sparse Coding: 使用线性的词典学习(dictionary learning)来进行图像像素插值。 Generitive Model: 使用时兴的生成模型(Generitive Model)来完成图像风格的转换。 原生的数据管理 : 从这一章开始，我们将纳入Tensorflow自带的数据管理API。实际上，很多用户并不习惯使用这些API，往往倾向于自己完成数据的导入导出。虽然这并非一个复杂的工作，但据Tensorflow的文档，原生的数据管理内部实现了多线程，本身更适合用于提高数据IO的效率。读者可以酌情选择是否需要阅读本章。 使用MINIST数据集: 使用原生的数据管理来IO一个现成的MINIST数据集，这一节改自 官方文档教程 。 使用RNN处理文章: 通过LSTM模型来进行文本分类，并使用原生的数据管理来IO一个现成的IMDB数据集，这一节改自 官方文档教程 。 使用RBM生成音频: 通过限制玻尔兹曼机(RBM)来编写一个简单的音乐生成器，这一节改自 llSourcell/Music_Generator_Demo 。 其他的高级技巧 : 本章将介绍一些特殊的、利用底层API技巧，使得用户能更灵活地定制Tensorflow-keras，从而实现一些仅依靠原生库不能实现的功能。","text_tokens":["本章","原生","表达","解析","接下","教程","将会","训练","在","神经网络","阅读","文章","图像","玻尔兹曼","利用","像素","更大","回归","多线程","同样","用户","music","过渡","/","机","定制","如何","generitive","api","coding","选择","地","导入","但据","hello","环节","仅","非线性","项目","往往","所有","相对","不","依靠","二","可以","一章","特殊","是否","自己","纳入","tensorflow","dictionary","rnn","本","效率","这些","功能","官方","测试","导出","习惯","式","通过","提高",":","于","将","底层","一个","了","插值","第一","分类","都","读者","酌情","开始","分类器","出","现成","其他","网络","llsourcell","(","文档","一些","存取","倾向","集","程序","音乐","使得","更加","lstm","sparse","实际上","处理","不能","因此","_","到","介绍","工作","learning","神经网","线性","实际","情况","解决","高级","兹曼","适合","来","project","数据管理","分开","接下来","minist","很多","demo","复杂","下来","world","改","keras","进行","实现","文本","的","能","resolution","-","简单","成器",")","分立","model","具有","需要","会","我们","生成","tensorboard"," ","问题","风格","完整","、","自带","并","本身","内部","用于","更","线程","数据","super","几个","管理","并非","generator","这","从而","生成器","分布","涉及","时兴","与","多线","，","时间","虽然","使用","一定","才能","imdb","限制","。","拟合","编写","库","试图","对","这里","一节","rbm","技巧","入门","词典","逐步","转换","跟踪","音频","模型","自","io","第一个","完成","从","设计","核","神经","灵活","学习","函数","玻尔"],"title":"教程导读","title_tokens":["导读","教程"]},{"location":"licenses/","text":"协议 (Licenses) ¶ 本站协议 (中文版) ¶ MIT 开源许可协议 版权所有 © 2019, 金宇琛 (cainmagi) 特此向任何得到本软件副本或相关文档的人授权：被授权人有权使用、复制、修改、 合并、出版、发布、散布、再授权和/或贩售软件及软件的副本，及授予被供应人 同等权利，只需服从以下义务： 在软件和软件的所有副本中都必须包含以上版权声明和本许可声明。 该软件是\"按原样\"提供的，没有任何形式的明示或暗示，包括但不限于为特定目的和 不侵权的适销性和适用性的保证担保。在任何情况下，作者或版权持有人，都无权要求 任何索赔，或有关损害赔偿的其他责任。无论在本软件的使用上或其他买卖交易中， 是否涉及合同，侵权或其他行为。 License of this website (English version) ¶ MIT License Copyright © 2019 Yuchen Jin (cainmagi) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 本站相关项目的协议 ¶ 下面介绍的诸多协议，原则上并无必要列在本条目中（例如MIT License）。列在下侧，主要是为了向诸位支持本文档的开发者致以真诚的谢意。亦将荣耀与在下的感谢致以高天之上的上帝，愿你保守这份文档，成为众人的帮助。 License of Material ¶ MIT License Copyright © 2016 - 2019 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of MkDocs ¶ BSD 2-Clause \"Simplified\" License Copyright © 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. License of Jieba3K ¶ The MIT License (MIT) Copyright © 2013 Sun Junyi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of Simple Lightbox ¶ The MIT License (MIT) Copyright © 2018 Damir Brekalo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of MathJax ¶ Apache License 2.0 See the full license here: MathJax license License of mermaid ¶ The MIT License (MIT) Copyright © 2014 - 2018 Knut Sveidqvist Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["必要","上","谢意","复制","code","be","theory","express","2016","arising","众人","all","包含","apache","本","deal","jieba3k","documentation","including","明示","以下","form","even","真诚","被","持有人","这份","donath","notice","whom","business","列在","愿","disclaimer","持有","形式","需","性","主要","the","on","相关","义务","indirect","here","供应","必须","dealings","cainmagi","substantial","特定","website","so","contributors",")","2019","infringement","restriction","亦","出版","授权","no","mathjax","however","包括","mit","this","authors","way","whether","成为","software","if","下面","使用","向","liable","warranties","特此","买卖","subject","modify","but","full","following","诸多","交易","但","limited","没有","reproduce","是","retain","索赔","person","use","项目","不","声明","distribute","贩售","persons","担保","noninfringement","将","sun","适用","services","loss","人","or","暗示","license","(","行为","incidental","文档","适用性","fitness","介绍","情况","版权所有","损害","purpose","sell","shall","及","goods","sublicense","支持","claim","warranty","see","by","an","non","source","任何","或","any","、","感谢","to","有人","particular","lightbox","publish","from","data","和","contract","文版","涉及","再","：","\"","english","knut","2018","other","that","下侧","material","portions","damage","为","of","权利","开发","licenses","tom","exemplary","在","发布","mkdocs","for","保证","中文版","binary","有权","martin","协议","advised","out","copyright","strict","2.0","致以","redistribution","direct","reserved","conditions","荣耀","holder","provided","clause",":","限于","条目","（","disclaimed","in","materials","例如","原则上","sveidqvist","开源","都","mermaid","caused","授权人","无","copies","included","只","bsd","permitted","¶","obtaining","must","该软件","interruption","要求","connection","redistributions","本站","的","合并","list","-","met","作者","brekalo"," ","2","并","simplified","associated","为了","）","do","之上","以上","按","damages","©","action","yuchen","。","holders","christie","副本","侵权","版权","permission","tort","责任","a","开发者","negligence","as","files","上帝","同等","possibility","有关","merchantability","without","/","列","charge","profits","下","liability","special","are","得到","提供","所有","junyi","适销","是否","granted","permit","中文","赔偿","not","保守","rights","授予","kind","高天","原则","目的","is","其他","无论","version","服从","otherwise","诸位","合同","原样","procurement","substitute","with","散布","limitation","copy",".","merge","金宇琛","damir","修改","中","simple",",",";","above","free","distribution","2013","implied","你","and","无权","hereby","与","，","软件","forms","损害赔偿","2014","jin","event","modification","许可","such","furnished","consequential","帮助"],"title":"协议","title_tokens":["协议"]},{"location":"licenses/#licenses","text":"","text_tokens":[],"title":"协议 (Licenses)","title_tokens":["licenses",")","("," ","协议"]},{"location":"licenses/#_1","text":"MIT 开源许可协议 版权所有 © 2019, 金宇琛 (cainmagi) 特此向任何得到本软件副本或相关文档的人授权：被授权人有权使用、复制、修改、 合并、出版、发布、散布、再授权和/或贩售软件及软件的副本，及授予被供应人 同等权利，只需服从以下义务： 在软件和软件的所有副本中都必须包含以上版权声明和本许可声明。 该软件是\"按原样\"提供的，没有任何形式的明示或暗示，包括但不限于为特定目的和 不侵权的适销性和适用性的保证担保。在任何情况下，作者或版权持有人，都无权要求 任何索赔，或有关损害赔偿的其他责任。无论在本软件的使用上或其他买卖交易中， 是否涉及合同，侵权或其他行为。","text_tokens":["交易","但","在","同等","没有","有关","上","发布","是","保证","复制","/","有权","协议","下","索赔","得到","提供","所有","声明","不","适销","是否","包含","责任","贩售","本","担保","限于","明示","赔偿","以下","适用","被","人","持有人","授予","开源","都","暗示","目的","授权人","持有","其他","无论","(","行为","形式","服从","文档","适用性","需","性","只","相关","情况","义务","原样","版权所有","合同","损害","供应","必须","该软件","及","要求","散布","cainmagi","特定","金宇琛","的","合并","修改",")","任何","中",",","作者","或","2019"," ","出版","授权","、","有人","包括","mit","和","无权","涉及","以上","按","©","再","：","\"","，","使用","向","。","软件","特此","副本","买卖","侵权","版权","损害赔偿","许可","为","权利"],"title":"本站协议 (中文版)","title_tokens":["中文版",")","(","中文","本站"," ","文版","协议"]},{"location":"licenses/#license-of-this-website-english-version","text":"MIT License Copyright © 2019 Yuchen Jin (cainmagi) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["as","files","limited","for","merchantability","without","/","be","charge","express","out","copyright","liability","arising","person","use","all","distribute","tort","deal","granted","persons","conditions","permit","provided","documentation","including","noninfringement",":","not","in","rights","kind","notice","whom","or","license","is","(","copies","the","included","fitness","otherwise","obtaining","purpose","sell","shall","with","dealings","sublicense","connection","limitation","claim","cainmagi","copy","substantial","warranty",".","merge","an","so",")",",","2019"," ","restriction","above","free","any","to","particular","publish","from","associated","no","implied","do","mit","this","and","contract","damages","©","authors","hereby","whether","\"","software","action","yuchen","other","holders","liable","warranties","subject","modify","but","jin","event","portions","permission","of","furnished","following","a"],"title":"License of this website (English version)","title_tokens":["english",")","version","website","(","this","of"," ","license"]},{"location":"licenses/#_2","text":"下面介绍的诸多协议，原则上并无必要列在本条目中（例如MIT License）。列在下侧，主要是为了向诸位支持本文档的开发者致以真诚的谢意。亦将荣耀与在下的感谢致以高天之上的上帝，愿你保守这份文档，成为众人的帮助。","text_tokens":["诸多","开发","开发者","你","条目","mit","在","上帝","（","必要","将","之上","谢意","是","支持","保守","与","成为","真诚","，","例如","下面","这份","原则上","列","向","高天","的","原则","列在","愿","license","。","协议","无","下","众人","下侧","中","文档"," ","致以","亦","主要","感谢","并","本","介绍","诸位","为了","帮助","）","荣耀"],"title":"本站相关项目的协议","title_tokens":["相关","项目","本站","的","协议"]},{"location":"licenses/#license-of-material","text":"MIT License Copyright © 2016 - 2019 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["as","files","limited","for","merchantability","without","/","be","charge","martin","express","out","copyright","2016","liability","arising","person","use","all","distribute","tort","deal","granted","persons","conditions","permit","provided","documentation","including",":","not","in","rights","donath","kind","notice","whom","or","license","is","(","copies","the","included","fitness","otherwise","obtaining","purpose","sell","shall","with","dealings","sublicense","connection","limitation","claim","copy","substantial","warranty",".","merge","an","non","so","-",")",",","2019"," ","infringement","restriction","above","free","any","to","particular","publish","from","associated","no","implied","do","mit","this","and","contract","damages","©","authors","hereby","whether","\"","software","action","other","holders","liable","warranties","subject","modify","but","event","portions","permission","of","furnished","following","a"],"title":"License of Material","title_tokens":[" ","material","license","of"]},{"location":"licenses/#license-of-mkdocs","text":"BSD 2-Clause \"Simplified\" License Copyright © 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","text_tokens":["tom","exemplary","negligence","as","limited","possibility","reproduce","for","merchantability","without","binary","code","/","be","profits","theory","express","advised","out","copyright","liability","retain","are","special","strict","arising","use","all","redistribution","tort","direct","reserved","conditions","holder","clause","provided","documentation","including",":","form","disclaimed","even","not","in","materials","services","loss","rights","notice","business","or","disclaimer","license","is","caused","(","incidental","on","the","fitness","otherwise","bsd","procurement","permitted","indirect","purpose","substitute","must","shall","with","interruption","goods","redistributions",".","by","source","list","-","contributors",")","met",",",";"," ","above","any","distribution","2","to","particular","simplified","no","data","implied","however","this","and","contract","damages","©","way","whether","\"","software","if","other","holders","liable","that","forms","warranties","christie","2014","but","event","modification","damage","such","of","consequential","following","a"],"title":"License of MkDocs","title_tokens":[" ","mkdocs","license","of"]},{"location":"licenses/#license-of-jieba3k","text":"The MIT License (MIT) Copyright © 2013 Sun Junyi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["as","files","limited","for","merchantability","without","/","be","charge","express","out","copyright","liability","arising","person","use","all","distribute","junyi","tort","deal","granted","persons","conditions","permit","provided","documentation","including","noninfringement",":","sun","not","in","rights","kind","notice","whom","or","license","is","(","copies","the","included","fitness","otherwise","obtaining","purpose","sell","shall","with","dealings","sublicense","connection","limitation","claim","copy","substantial","warranty",".","merge","an","so",")",","," ","restriction","above","free","any","to","particular","2013","publish","from","associated","no","implied","do","mit","this","and","contract","damages","©","authors","hereby","whether","\"","software","action","other","holders","liable","warranties","subject","modify","but","event","portions","permission","of","furnished","following","a"],"title":"License of Jieba3K","title_tokens":[" ","license","of","jieba3k"]},{"location":"licenses/#license-of-simple-lightbox","text":"The MIT License (MIT) Copyright © 2018 Damir Brekalo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["as","files","limited","for","merchantability","without","/","be","charge","express","out","copyright","liability","arising","person","use","all","distribute","tort","deal","granted","persons","conditions","permit","provided","documentation","including","noninfringement",":","not","in","rights","kind","notice","whom","or","license","is","(","copies","the","included","fitness","otherwise","obtaining","purpose","sell","shall","with","dealings","sublicense","connection","limitation","claim","copy","substantial","warranty",".","merge","damir","an","so",")",",","brekalo"," ","restriction","above","free","any","to","particular","publish","from","associated","no","implied","do","mit","this","and","contract","damages","©","authors","hereby","whether","\"","software","action","2018","other","holders","liable","warranties","subject","modify","but","event","portions","permission","of","furnished","following","a"],"title":"License of Simple Lightbox","title_tokens":["lightbox","simple","of"," ","license"]},{"location":"licenses/#license-of-mathjax","text":"Apache License 2.0 See the full license here: MathJax license","text_tokens":[":","here","apache","see","2.0"," ","full","license","mathjax","the"],"title":"License of MathJax","title_tokens":[" ","license","of","mathjax"]},{"location":"licenses/#license-of-mermaid","text":"The MIT License (MIT) Copyright © 2014 - 2018 Knut Sveidqvist Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["as","files","limited","for","merchantability","without","/","be","charge","express","out","copyright","liability","arising","person","use","all","distribute","tort","deal","granted","persons","conditions","permit","provided","documentation","including","noninfringement",":","not","in","rights","kind","sveidqvist","notice","whom","or","license","is","(","copies","the","included","fitness","otherwise","obtaining","purpose","sell","shall","with","dealings","sublicense","connection","limitation","claim","copy","substantial","warranty",".","merge","an","so","-",")",","," ","restriction","above","free","any","to","particular","publish","from","associated","no","implied","do","mit","this","and","contract","damages","©","authors","hereby","whether","\"","knut","software","action","2018","other","holders","liable","warranties","subject","modify","2014","but","event","portions","permission","of","furnished","following","a"],"title":"License of mermaid","title_tokens":[" ","mermaid","license","of"]},{"location":"release-notes/","text":"更新记录 ¶ 大版本更新 ¶ 在此记录本文档的主要更新，读者可以在此确认经过更新后，本文档添加了哪些主要的内容、话题。 0.1 @ February 25, 2019 ¶ 正式立项，开始本文档的撰写工作。目前尚处于未完成状态，计划包括： Tensorflow 1.12 入门教程 从线性问题入门 60% 训练与测试分立 0% 原生的数据管理 0% 其他的高级技巧 0% Tensorflow 2.0 入门教程 0% Tensorflow 第三方扩展库 入门教程 0% 局部更新记录 ¶ 0.20 @ March 12, 2019 ¶ 完成“从线性问题入门”专题下的 线性回归 ； 微调样式表(stylesheet)文件； 修正前文的一些笔误。 0.18-r1.13 @ March 9, 2019 ¶ 由于Tensorflow的新版 r1.13 发行版预编译包开始支持CUDA 10，本文的内容全部根据 r1.13 版进行调整。特别注意这个星期是Tensorflow 2.0-alpha 横空出世的日子，可喜可贺，可喜可贺。 0.18 @ March 6, 2019 ¶ 完善“从线性问题入门”专题下的 线性分类 ，补充了一些概念便于初学者理解。 0.17 @ March 5, 2019 ¶ 完成“从线性问题入门”专题下的 线性分类 ； 修正前文的一些笔误。 0.15 @ March 4, 2019 ¶ 完成“从线性问题入门”专题下的 本章总说 和 Hello world! ； 微调图片链接， MathJax 的显示特性。 0.12 @ March 3, 2019 ¶ 补完扉页。未来可能会调整 教程导读 ； 修复 Arithmatex 对 MathJax 的引入； 引入 mermaid 库，用于绘制示意图。 0.11 @ February 25, 2019 ¶ 提交 Google Analytics 和 Google Search Console 的账户关联资料； 提交 Disqus 关联资料。 0.10 @ February 25, 2019 ¶ 正式立项，并撰写扉页的一部分。","text_tokens":["确认","原生","本章","三方","补完","教程","全部","训练","在","横空出世","0.10","一部","3","一部分","扩展","发行版","march","是","理解","回归","补充","9","版","目前","初学者","5","可能","下","微调","hello","0.20","2.0","第三方","arithmatex","调整","可以","根据","绘制","12","0","tensorflow","本","60","导读","测试","意图","未","本文","空出","版本","search","了","星期","便于","处于","可喜","撰写","读者","分类","开始","mermaid","这个","编译","入门教程","其他","前文","修复","特性","出世","(","可贺","部分","发行","文档","一些","@","后","主要","日子","记录本","完善","学者","0.18","横空","cuda","工作","线性","10","正式","0.15","0.12","扉页","；","经过","高级","¶","账户","概念","”","新版","立项","由于","记录","图片","数据管理","支持","预","可喜可贺","world",".","提交","analytics","进行","的","关联","初学","-","!",")","尚","内容","分立","未来","alpha","会",",","添加","话题"," ","2019","链接","问题","、","并","用于","r1","4","修正","数据","6","更新","管理","注意","mathjax","样式表","资料","disqus","包括","25","大","专题","图片链接","样式","0.11","13","stylesheet","和","1.12","局部","包","“","与","：","，","google","引入","第三","示意","此","。","february","库","%","计划","哪些","总说","特别","对","技巧","示意图","入门","显示","0.1","笔误","完成","文件","console","从","0.17","状态"],"title":"更新记录","title_tokens":["记录","更新"]},{"location":"release-notes/#_1","text":"","text_tokens":[],"title":"更新记录","title_tokens":["记录","更新"]},{"location":"release-notes/#_2","text":"在此记录本文档的主要更新，读者可以在此确认经过更新后，本文档添加了哪些主要的内容、话题。","text_tokens":["经过","确认","在","记录","了","，","读者","的","此","。","哪些","内容","文档","添加","话题","后","主要","可以","记录本","、","本","更新"],"title":"大版本更新","title_tokens":["更新","版本","大"]},{"location":"release-notes/#01-february-25-2019","text":"正式立项，开始本文档的撰写工作。目前尚处于未完成状态，计划包括： Tensorflow 1.12 入门教程 从线性问题入门 60% 训练与测试分立 0% 原生的数据管理 0% 其他的高级技巧 0% Tensorflow 2.0 入门教程 0% Tensorflow 第三方扩展库 入门教程 0%","text_tokens":["高级","测试","原生","三方","包括","教程","训练","立项","未","扩展","1.12","数据管理","管理","与","：","，","处于","撰写","第三","目前","开始","的","。","库","%","计划","入门教程","其他","尚","分立","技巧","入门","文档","2.0","第三方"," ","问题","完成","0","tensorflow","从","本","数据","工作","60","线性","状态","正式"],"title":"0.1 @ February 25, 2019","title_tokens":["0.1","2019","25",",","@"," ","february"]},{"location":"release-notes/#_3","text":"","text_tokens":[],"title":"局部更新记录","title_tokens":["记录","更新","局部"]},{"location":"release-notes/#020-march-12-2019","text":"完成“从线性问题入门”专题下的 线性回归 ； 微调样式表(stylesheet)文件； 修正前文的一些笔误。","text_tokens":["；","”","专题","样式","stylesheet","“","回归","的","。","前文","下",")","(","微调","入门","一些"," ","问题","笔误","完成","文件","从","修正","线性","样式表"],"title":"0.20 @ March 12, 2019","title_tokens":["2019","12",",","0.20","@"," ","march"]},{"location":"release-notes/#018-r113-march-9-2019","text":"由于Tensorflow的新版 r1.13 发行版预编译包开始支持CUDA 10，本文的内容全部根据 r1.13 版进行调整。特别注意这个星期是Tensorflow 2.0-alpha 横空出世的日子，可喜可贺，可喜可贺。","text_tokens":["新版","全部","横空出世","本文","由于","13","空出","发行版","支持","包","是","预","星期","，","可喜可贺","版","可喜",".","进行","开始","的","。","这个","编译","-","特别","内容","出世","可贺","alpha","发行","2.0"," ","调整","日子","根据","tensorflow","横空","r1","cuda","10","注意"],"title":"0.18-r1.13 @ March 9, 2019","title_tokens":["-","2019","0.18","r1","9",",",".","13","@"," ","march"]},{"location":"release-notes/#018-march-6-2019","text":"完善“从线性问题入门”专题下的 线性分类 ，补充了一些概念便于初学者理解。","text_tokens":["概念","”","专题","理解","“","了","便于","，","补充","分类","的","。","初学者","初学","下","入门","一些"," ","问题","完善","学者","从","线性"],"title":"0.18 @ March 6, 2019","title_tokens":["2019","0.18",",","6","@"," ","march"]},{"location":"release-notes/#017-march-5-2019","text":"完成“从线性问题入门”专题下的 线性分类 ； 修正前文的一些笔误。","text_tokens":["的","“"," ","；","前文","下","笔误","”","完成","专题","从","入门","分类","修正","一些","线性","问题","。"],"title":"0.17 @ March 5, 2019","title_tokens":["5","2019",",","0.17","@"," ","march"]},{"location":"release-notes/#015-march-4-2019","text":"完成“从线性问题入门”专题下的 本章总说 和 Hello world! ； 微调图片链接， MathJax 的显示特性。","text_tokens":["；","本章","”","图片链接","专题","和","图片","“","，","world","的","。","!","总说","下","特性","hello","微调","入门","显示"," ","链接","问题","完成","从","线性","mathjax"],"title":"0.15 @ March 4, 2019","title_tokens":["2019","4",",","@"," ","march","0.15"]},{"location":"release-notes/#012-march-3-2019","text":"补完扉页。未来可能会调整 教程导读 ； 修复 Arithmatex 对 MathJax 的引入； 引入 mermaid 库，用于绘制示意图。","text_tokens":["扉页","；","意图","补完","教程","，","引入","示意","的","mermaid","库","。","修复","可能","未来","对","会","示意图","arithmatex"," ","调整","绘制","用于","导读","mathjax"],"title":"0.12 @ March 3, 2019","title_tokens":["0.12","2019",",","3","@"," ","march"]},{"location":"release-notes/#011-february-25-2019","text":"提交 Google Analytics 和 Google Search Console 的账户关联资料； 提交 Disqus 关联资料。","text_tokens":["的","search","资料","关联","；","disqus","console","提交","google","analytics","和"," ","。","账户"],"title":"0.11 @ February 25, 2019","title_tokens":["2019","25","0.11",",","@"," ","february"]},{"location":"release-notes/#010-february-25-2019","text":"正式立项，并撰写扉页的一部分。","text_tokens":["扉页","。","，","并","部分","撰写","一部","立项","一部分","的","正式"],"title":"0.10 @ February 25, 2019","title_tokens":["2019","0.10","25",",","@"," ","february"]},{"location":"book-1-x/chapter-1/","text":"从线性问题入门 ¶ 摘要 本章将从线性问题入手，讨论最简单的分类与回归问题。我们将随机生成指定分布的数据，通过理论值，检查实验效果。这些简单的、解析的问题，可以提供读者一个直观的感受，并帮助读者快速上手Tensorflow的基本概念与运用。本章中，我们不会涉及任何数据存取、跟踪测度方面的概念，也不会将训练和测试分开，旨在使读者能集中心思到代码规范和Tensorflow的基本功能上。 漫谈线性问题 ¶ 在机器学习领域，线性问题既简单也不简单。目前神经网络主要是指多层、非凸的网络结构，常常用来解复杂的、难以推导的问题。但这并不意味着线性问题容易解决。相反，在很多情况下，线性问题是解不唯一的(undetermined)，解不稳定的(ill-posed/ill-conditioned)，条件的(constrained)。同时，为了得到一个快速收敛的、高质量的解，即使对线性问题，人们也在不断提出、改进解法。例如ISTA, AMP, PGD, LISTA, vAMP等算法，都用来解线性问题。在此不作详细展开。 我们已经知道，一个线性函数具有可加性，和一次齐次性，亦即 \\begin{align} f(x_1 + x_2) &= f(x_1) + f(x_2), \\\\ f(\\alpha x) &= \\alpha f(x). \\end{align} 因此，求解一个线性问题，我们需要将问题纯粹以 线性函数 进行描述。例如， \\begin{align} \\mathbf{y} \\sim \\mathbf{A}\\mathbf{x}. \\end{align} 具体而言， \\mathbf{x} \\mathbf{x} 是我们的已知数据， \\mathbf{y} \\mathbf{y} 是我们的未知量，我们需要找到一个合适的 \\mathbf{A} \\mathbf{A} 来确保 \\mathbf{x} \\mathbf{x} 能拟合到 \\mathbf{y} \\mathbf{y} 。如果此处 \\mathbf{y} \\in \\{0,~1\\}^p \\mathbf{y} \\in \\{0,~1\\}^p 是一个代表p类-分类的向量，那么这就是一个线性分类问题；相反，如果此处 \\mathbf{y} \\in \\mathbb{R}^p \\mathbf{y} \\in \\mathbb{R}^p 在连续p维空间取值，那么这就是一个线性回归问题。 线性问题与凸问题 ¶ 请注意，虽然我们在此处提到“ 线性问题 (Linear problem) ”，但我们指的并非“ 线性规划 (Linear programming) ”。虽然严格意义上，线性规划才是真正的线性问题，但我们在此处尚不讨论线性规划相关的内容，而是着眼于机器学习应用最普遍的两个领域， 分类 和 回归 上。实际上，这两种问题虽然求解的是线性函数，但本质上是凸问题。 例如，如果我们要求解回归问题，通常可以表述成 \\begin{equation} \\begin{aligned} \\arg \\min_{\\mathbf{A}}~& \\sum_{i=1}^N \\mathcal{L}(\\mathbf{A},~\\mathbf{x}_i,~\\mathbf{y}_i), \\\\ \\mathcal{L}(\\mathbf{A},~\\mathbf{x},~\\mathbf{y}) &= \\lVert \\mathbf{y} - \\mathbf{A}\\mathbf{x} \\rVert^2_2. \\end{aligned} \\end{equation} 虽然我们求解的模型 \\mathbf{A} \\mathbf{A} 是线性的，但我们优化的函数对象 \\mathcal{L} \\mathcal{L} 是一个 凸函数 (convex function) 。在此，我们可以将这个标量函数(同时也是凸函数)表述为 \\begin{align} \\forall~\\alpha,~\\beta,~\\mathbf{x}_1,~\\mathbf{x}_2,~\\mathcal{L}(\\alpha\\mathbf{x}_1 + \\beta\\mathbf{x}_2) \\leqslant \\alpha\\mathcal{L}(\\mathbf{x}_1) + \\beta\\mathcal{L}(\\mathbf{x}_2). \\end{align} 我们将这个问题表述为 最小二乘问题(Least-square problem) 。正是由于 \\mathbf{A} \\mathbf{A} 是线性的， \\mathcal{L} \\mathcal{L} 才能被确保为一个凸函数，进而，我们才能确保上述问题能得到精确的全局最小值解。 知悉Tensorflow ¶ 在本章接下来的内容里，我们将探讨Tensorflow如何求解一些简单的问题。对于初次上手的读者而言，在安装Tensorflow，亲自开始写一些project之前，笔者推荐你到这个游乐场“抢鲜体验”一番， Tensorflow Playground 在这个在线页面里，用户不需要有任何编程知识，可以通过直观的操作界面，建立一个简单的 多层感知机网络(有时也叫做Artificial Neural Network, ANN) ，并且实时观测网络的性能和测度。它提供了几个简单的二维数据集，供用户体验不同的数据集下，各种分类、回归问题的合宜解法。如果读者已经对神经网络的基本原理有所了解，相信能通过这个小小的实验场达到心有灵犀。我们在本章所做的project和demo，大体不跳出这个试验场的范畴，只是会略微复杂一点而已。 本章要点 ¶ 下图展示了通过本章学习，能了解到的概念： graph LR st(Hello world!) --> linclas(线性分类) linclas --> linreg(线性回归) linreg --> nonlinreg(非线性回归) nonlinreg --> ed(非线性分类) lp[感知机] --> linclas sigma[Logsitc回归] --> linclas ce[交叉熵] --> linclas opt[优化器] --> linreg argpar[项目选项] --> linreg para[参数回归] --> nonlinreg sdlayer[自定义层] --> nonlinreg kernel[核函数] --> ed classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,linclas,linreg,nonlinreg,ed styStart Hello world : 首先，在本节，读者将了解Tensorflow的安装方法，并编写通过第一个简单的Tensorflow程序。 线性分类 : 本节通过解一个简单的二分类问题，我们将引入单层感知机、Logistic回归和交叉熵的概念，并且实验结果进行可视化。 线性回归 : 本节通过解一个与上一节难度相仿的，简单的回归问题，另读者能对比不同优化器的性能、特点，并介绍如何在项目中进行arugument parsing(引入项目的可选项)。 非线性回归 : 本节将修改上一节回归问题的激活函数，将线性的回归问题推广到解析函数参数回归的范畴。同时介绍自行编写网络层(类API)的方法。 非线性分类 : 本节将通过上一节的参数回归，引入核函数的概念，将线性分类问题推广到非线性空间里。","text_tokens":["上述","本章","神经网络","接下","已知","对比","上","表述","检查","\\","有所","相仿","测度","kernel","即","那么","特点","解","难度","基本功能","logistic","知悉","维空间","可选","人们","知道","sum","本","里","不断","大体","之前","具体","定义","vamp","了解","一个","推导","集下","提出","被","意味着","分类","读者","这个","一点","pgd","存取","arugument","性","主要","实际上","parsing","指定","相关","forall","进而","神经网","就是","解决","square","；","”","心有灵犀","end","运用","漫谈","分开","nonlinreg","复杂","下来","world","进行","找到","连续","略微","!","argpar",")","具有","使",">","亦","条件","方面","优化","基本概念","即使","mathbb","空间","操作界面","正是","aligned","lr","改进","小小的","描述","激活","虽然","相反","引入","提到","规划","class","并且","单层","等","模型","方法","sigma","核","amp","但","建立","着眼于","真正","性能","推广","para","是","linear","取值","通常","基本","可加","如何","容易","y","一番","自定","用来","+","项目","入手","不","初次","p","可以","代表","摘要","可视","一次","效果","确保","编程","严格","lp","凸","而已","将","在线","安装","知机","第一","开始","做","界面","求解","(","集","精确","跳出","1","介绍","情况","领域","熵","展示","自行","mathbf","playground","只是","i","由于","才","ill","来","高质","leqslant","linclas","fill","简单","任何","neural","内容","叫做","需要","相信","问题","网络层","基本功","、","多层","感知机","线性规划","注意","最小","分布","涉及","和","&","稳定","ce","：","]","才能","有时","规范","对于","实时","基本原理","跟踪","network","least","}","为","本原","供","学习","节","函数","如果","解析","试验场","在","函数参数","回归","参数","undetermined","可加性","知识","首先","api","全局","小小","笔者","机器","请","理论","上手","~","纯粹","本质","二","理论值","programming","两种","tensorflow","而是","这些","测试","sdlayer","以",":","实验场","in","范畴","选项","自定义","beta","ba9132","例如","旨在","conditioned","^","都","标量","ista","graph","equation","x","观测","而言","它","{","直观","试验","_","不会","因此","普遍","实际","¶","灵犀","探讨","指","linreg","另","project","也","要求","感受","类","很多","l","器","着眼","的","详细","-","随机","代码","alpha","会","我们","生成","stystart"," ","2","并","r","高质量","为了","几个","并非","这","操作","=","写","有","mathcal","不作","“","非凸","此","最小值","编写","。","对象","logsitc","意味","对","ann","各种","fae6a9","第一个","n","体验","rvert","展开","未知量","要点","可选项","a","#","原理","成","opt","训练","既","解法","artificial","收敛","结构","亲自","用户","problem","/","心思","目前","感知","页面","可视化","向量","下","hello","得到","非线性","难以","提供","本节","0","arg","convex","功能","下图","通过","align","应用","sim","所","lvert","二维","解不","了","网络结构","已经","质量","合宜","交叉","快速","算法","网络","classdef","一些","st","最","程序","posed","集中","游乐场","到","同时","线性","层","抢鲜","概念","接下来","begin","demo",".","合适","能","constrained","修改","尚","唯一","推荐","中","达到",",",";","min","数据","此处","stroke","你","凸函数","结果","常常","未知","与","，","齐次","游乐","ed","[","讨论","拟合","f","二乘","一节","入门","lista","意义","两个","function","不同","从","实验","神经","帮助"],"title":"本章总说","title_tokens":["本章","总说"]},{"location":"book-1-x/chapter-1/#_1","text":"摘要 本章将从线性问题入手，讨论最简单的分类与回归问题。我们将随机生成指定分布的数据，通过理论值，检查实验效果。这些简单的、解析的问题，可以提供读者一个直观的感受，并帮助读者快速上手Tensorflow的基本概念与运用。本章中，我们不会涉及任何数据存取、跟踪测度方面的概念，也不会将训练和测试分开，旨在使读者能集中心思到代码规范和Tensorflow的基本功能上。","text_tokens":["通过","概念","本章","解析","训练","运用","将","分布","一个","涉及","和","检查","也","上","感受","分开","与","回归","，","旨在","基本","测度","分类","读者","讨论","心思","的","快速","能","。","规范","简单","随机","任何","代码","功能","理论","上手","中","使","我们","基本功能","生成","提供","最","入手"," ","存取","跟踪","问题","可以","理论值","直观","集中","基本功","、","并","摘要","tensorflow","指定","从","实验","效果","不会","数据","到","这些","方面","线性","测试","基本概念","帮助"],"title":"从线性问题入门","title_tokens":["线性","入门","问题","从"]},{"location":"book-1-x/chapter-1/#_2","text":"在机器学习领域，线性问题既简单也不简单。目前神经网络主要是指多层、非凸的网络结构，常常用来解复杂的、难以推导的问题。但这并不意味着线性问题容易解决。相反，在很多情况下，线性问题是解不唯一的(undetermined)，解不稳定的(ill-posed/ill-conditioned)，条件的(constrained)。同时，为了得到一个快速收敛的、高质量的解，即使对线性问题，人们也在不断提出、改进解法。例如ISTA, AMP, PGD, LISTA, vAMP等算法，都用来解线性问题。在此不作详细展开。 我们已经知道，一个线性函数具有可加性，和一次齐次性，亦即 \\begin{align} f(x_1 + x_2) &= f(x_1) + f(x_2), \\\\ f(\\alpha x) &= \\alpha f(x). \\end{align} 因此，求解一个线性问题，我们需要将问题纯粹以 线性函数 进行描述。例如， \\begin{align} \\mathbf{y} \\sim \\mathbf{A}\\mathbf{x}. \\end{align} 具体而言， \\mathbf{x} \\mathbf{x} 是我们的已知数据， \\mathbf{y} \\mathbf{y} 是我们的未知量，我们需要找到一个合适的 \\mathbf{A} \\mathbf{A} 来确保 \\mathbf{x} \\mathbf{x} 能拟合到 \\mathbf{y} \\mathbf{y} 。如果此处 \\mathbf{y} \\in \\{0,~1\\}^p \\mathbf{y} \\in \\{0,~1\\}^p 是一个代表p类-分类的向量，那么这就是一个线性分类问题；相反，如果此处 \\mathbf{y} \\in \\mathbb{R}^p \\mathbf{y} \\in \\mathbb{R}^p 在连续p维空间取值，那么这就是一个线性回归问题。","text_tokens":["但","神经网络","在","既","已知","解法","是","\\","取值","收敛","结构","回归","/","undetermined","可加","目前","可加性","容易","即","y","那么","用来","向量","解","下","机器","+","得到","维空间","难以","~","不","纯粹","人们","p","知道","0","代表","一次","不断","确保","具体","以","align","vamp","sim","将","一个","推导","in","解不","网络结构","已经","质量","提出","例如","conditioned","意味着","^","都","分类","快速","算法","ista","网络","求解","x","(","pgd","而言","posed","如果","性","主要","{","1","_","因此","同时","到","神经网","线性","就是","情况","解决","；","领域","mathbf","end","指","ill","来","也","高质","类","begin","很多","复杂",".","进行","找到","合适","的","连续","能","详细","constrained","-","简单",")","唯一","具有","alpha","需要",",","我们"," ","亦","问题","条件","多层","、","2","并","r","高质量","数据","为了","此处","这","即使","mathbb","空间","=","和","&","常常","未知","不作","改进","a","稳定","非凸","，","齐次","描述","相反","此","。","拟合","f","意味","对","lista","等","}","神经","展开","未知量","学习","函数","amp"],"title":"漫谈线性问题","title_tokens":["漫谈","问题","线性"]},{"location":"book-1-x/chapter-1/#_3","text":"请注意，虽然我们在此处提到“ 线性问题 (Linear problem) ”，但我们指的并非“ 线性规划 (Linear programming) ”。虽然严格意义上，线性规划才是真正的线性问题，但我们在此处尚不讨论线性规划相关的内容，而是着眼于机器学习应用最普遍的两个领域， 分类 和 回归 上。实际上，这两种问题虽然求解的是线性函数，但本质上是凸问题。 例如，如果我们要求解回归问题，通常可以表述成 \\begin{equation} \\begin{aligned} \\arg \\min_{\\mathbf{A}}~& \\sum_{i=1}^N \\mathcal{L}(\\mathbf{A},~\\mathbf{x}_i,~\\mathbf{y}_i), \\\\ \\mathcal{L}(\\mathbf{A},~\\mathbf{x},~\\mathbf{y}) &= \\lVert \\mathbf{y} - \\mathbf{A}\\mathbf{x} \\rVert^2_2. \\end{aligned} \\end{equation} 虽然我们求解的模型 \\mathbf{A} \\mathbf{A} 是线性的，但我们优化的函数对象 \\mathcal{L} \\mathcal{L} 是一个 凸函数 (convex function) 。在此，我们可以将这个标量函数(同时也是凸函数)表述为 \\begin{align} \\forall~\\alpha,~\\beta,~\\mathbf{x}_1,~\\mathbf{x}_2,~\\mathcal{L}(\\alpha\\mathbf{x}_1 + \\beta\\mathbf{x}_2) \\leqslant \\alpha\\mathcal{L}(\\mathbf{x}_1) + \\beta\\mathcal{L}(\\mathbf{x}_2). \\end{align} 我们将这个问题表述为 最小二乘问题(Least-square problem) 。正是由于 \\mathbf{A} \\mathbf{A} 是线性的， \\mathcal{L} \\mathcal{L} 才能被确保为一个凸函数，进而，我们才能确保上述问题能得到精确的全局最小值解。","text_tokens":["上述","成","但","着眼于","真正","在","上","表述","linear","是","\\","回归","problem","通常","y","全局","解","机器","请","+","得到","~","不","本质","可以","programming","sum","两种","arg","而是","convex","确保","严格","align","应用","凸","将","lvert","一个","beta","被","例如","^","分类","标量","这个","equation","求解","x","(","最","{","精确","1","实际上","_","相关","同时","普遍","forall","进而","线性","实际","square","领域","mathbf","”","end","i","指","由于","才","也","要求","begin","l",".","leqslant","着眼","的","能","-",")","尚","内容","alpha","我们",","," ","问题","min","2","线性规划","优化","此处","注意","并非","这","最小","=","凸函数","正是","和","aligned","&","mathcal","“","，","虽然","讨论","此","最小值","提到","才能","。","规划","对象","二乘","函数","模型","意义","least","两个","function","n","}","为","rvert","学习","a","如果"],"title":"线性问题与凸问题","title_tokens":["线性","凸","问题","与"]},{"location":"book-1-x/chapter-1/#tensorflow","text":"在本章接下来的内容里，我们将探讨Tensorflow如何求解一些简单的问题。对于初次上手的读者而言，在安装Tensorflow，亲自开始写一些project之前，笔者推荐你到这个游乐场“抢鲜体验”一番， Tensorflow Playground 在这个在线页面里，用户不需要有任何编程知识，可以通过直观的操作界面，建立一个简单的 多层感知机网络(有时也叫做Artificial Neural Network, ANN) ，并且实时观测网络的性能和测度。它提供了几个简单的二维数据集，供用户体验不同的数据集下，各种分类、回归问题的合宜解法。如果读者已经对神经网络的基本原理有所了解，相信能通过这个小小的实验场达到心有灵犀。我们在本章所做的project和demo，大体不跳出这个试验场的范畴，只是会略微复杂一点而已。","text_tokens":["原理","本章","建立","神经网络","接下","试验场","在","解法","性能","artificial","回归","亲自","用户","有所","基本","测度","如何","知识","感知","页面","一番","小小","笔者","上手","提供","不","初次","可以","tensorflow","里","大体","之前","编程","通过","了解","实验场","而已","将","所","一个","在线","二维","安装","范畴","了","集下","已经","合宜","知机","读者","分类","开始","做","这个","一点","网络","界面","求解","(","观测","一些","集","而言","它","直观","跳出","试验","游乐场","到","神经网","抢鲜","playground","”","探讨","灵犀","心有灵犀","只是","project","也","接下来","demo","复杂","下来","的","能","略微","简单",")","任何","内容","neural","推荐","叫做","需要","达到","我们",",","会"," ","相信","问题","多层","、","感知机","数据","几个","操作","你","写","操作界面","有","和","小小的","“","，","游乐","。","有时","对于","实时","基本原理","ann","对","并且","network","各种","不同","实验","体验","神经","本原","供","如果"],"title":"知悉Tensorflow","title_tokens":["知悉","tensorflow"]},{"location":"book-1-x/chapter-1/#_4","text":"下图展示了通过本章学习，能了解到的概念： graph LR st(Hello world!) --> linclas(线性分类) linclas --> linreg(线性回归) linreg --> nonlinreg(非线性回归) nonlinreg --> ed(非线性分类) lp[感知机] --> linclas sigma[Logsitc回归] --> linclas ce[交叉熵] --> linclas opt[优化器] --> linreg argpar[项目选项] --> linreg para[参数回归] --> nonlinreg sdlayer[自定义层] --> nonlinreg kernel[核函数] --> ed classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,linclas,linreg,nonlinreg,ed styStart Hello world : 首先，在本节，读者将了解Tensorflow的安装方法，并编写通过第一个简单的Tensorflow程序。 线性分类 : 本节通过解一个简单的二分类问题，我们将引入单层感知机、Logistic回归和交叉熵的概念，并且实验结果进行可视化。 线性回归 : 本节通过解一个与上一节难度相仿的，简单的回归问题，另读者能对比不同优化器的性能、特点，并介绍如何在项目中进行arugument parsing(引入项目的可选项)。 非线性回归 : 本节将修改上一节回归问题的激活函数，将线性的回归问题推广到解析函数参数回归的范畴。同时介绍自行编写网络层(类API)的方法。 非线性分类 : 本节将通过上一节的参数回归，引入核函数的概念，将线性分类问题推广到非线性空间里。","text_tokens":["opt","本章","解析","在","对比","性能","上","推广","para","函数参数","回归","参数","相仿","kernel","如何","首先","api","感知","自定","可视化","特点","解","难度","logistic","hello","非线性","项目","可选","二","本节","tensorflow","可视","本","里","sdlayer","下图","定义","通过","节",":","了解","lp","将","一个","安装","范畴","选项","自定义","了","ba9132","交叉","知机","第一","分类","读者","graph","网络","(","classdef","st","程序","arugument","parsing","到","同时","介绍","线性","层","熵","展示","自行","概念","linreg","另","类","nonlinreg","器","world","linclas","fill","进行","的","能","-","!","argpar","简单",")","修改",">","中",",","我们",";","stystart"," ","问题","网络层","、","并","感知机","优化","stroke","空间","和","结果","lr","与","ce","：","，","[","ed","激活","引入","]","编写","。","logsitc","class","一节","单层","并且","fae6a9","第一个","方法","不同","实验","sigma","核","学习","可选项","函数","#"],"title":"本章要点","title_tokens":["本章","要点"]},{"location":"book-1-x/chapter-1/hello-world/","text":"Hello world! ¶ 摘要 本节包含一个简易的安装指导，主要提供给Windows上的GPU用户。之后，用户可以按照本节指导编写第一个测试程序。 安装Tensorflow ¶ 本节针对Windows使用GPU的用户，提供一个安装最新版Tensorflow的方法。大致的步骤符合以下两个教程： 通过pip安装Tensorflow Tensorflow的GPU支持 但是，需要指出的是，官方教程里有些部分已经不符合当前用户的实际情况，笔者经过摸索，总结以下的安装过程。 总体而言，安装Tensorflow需要用户确保以下条件 NVIDIA驱动已经达到411.31及以上 CUDA 10.0 (10.1不确定能否正常使用) CUDNN已经达到7.3.1及以上 CUPTI版本与CUDA相配（不需要专门安装，在安装CUDA的同时已经自动集成） 除此之外，涉及多GPU支持的库(NCCL和TensorRT)，这里不考虑。因此，我们主要需要确保前三条正常安装。 提示 Tensorflow官方提供的安装包是基于CUDA 9.0，CUDNN >= 7.2的基础上编译的。然而现在NVIDIA已经不再提供CUDA 9.0了。Windows用户可以安装的版本包括过时的8.1和最新的10.1。在这种情况下，官方还提供一个令用户自行从源码编译Tensorflow库的方案，但是对于Windows用户而言过于繁琐，容易出错，这里不建议按照官方教程。 更新NVIDIA驱动 ¶ 首先，我们可以开始更新我们的NVIDIA驱动。任何载有NVIDIA-GPU显卡的电脑，都应当在系统里已经预装好了 GeForce Experience 。点击如下图标开启GeForce Experience（如果是低版本的GeForce Experience，图标可能会不同）， 如左图，在主界面上，可以观察到，当驱动版本不够高时，会自动出现更新提示，依照提示更新即可。建议在更新驱动时，关闭其他所有程序，以免造成干扰。 更新NVIDIA driver 检查更新结果 如果更新完成，如右图，可以在设置界面检查到当前的版本已经达到最新。在安装过程中，由于驱动更新，屏幕可能会闪烁数次。在看到更新提示完成后建议重启。 提示 如果GeForce Experience提示无法更新驱动，可以考虑将机器恢复出厂设置，可能可以解决这一问题。 安装CUDA ¶ 驱动更新并重启后，需要安装最新版的Visual Studio(VS)，这是因为CUDA库本身对VS具有一定的支持，如果先安装CUDA，则这部分支持无法安装到位。这对我们使用Tensorflow并不造成妨害，但是对CUDA的用户并不是一个推荐的做法，所以无论如何，建议在第一步，安装VS，下面提供VS社区版（免费）的链接： Visual Studio官网 接下来，可以开始安装CUDA。进入CUDA安装包的下载链接 下载最新版CUDA CUDA官方指南 提示 须知，并非最新版就是最适合的版本。实际能使用的CUDA版本取决于后续步骤中预编译包的支持版本。就笔者写到这里时，最新的CUDA 10.1已然不匹配最新版预编译包支持的CUDA 10.0，由于版本差距很小，不确定是否会由此引发问题，但读者可以自行尝试。 现在的安装包已经支持在线安装包和离线安装包两种模式，读者可以根据自己的实际情况选择对应的版本。注意，安装CUDA的时候，CUDA可能要求我们翻新驱动版本，但通过GeForce Experience安装的驱动一般应已达到最新，新于CUDA内部提供的驱动。因此，我们需要选择定制安装模式，根据我们需要对比版本号，将驱动更新的选项取消，如下图所示 安装CUDA后，建议重启。 危险 特别需要注意的是，如果你的机器无法通过GeForce Experience更新驱动，那么在这里选择安装驱动也是枉然。并且，这种强制更新驱动的行为很可能导致系统崩溃。因此特别建议在安装CUDA之前一定要解决驱动更新的问题，哪怕是通过恢复出厂设置。 安装CUDNN ¶ 安装CUDA的同时，已经自带安装上了CUPTI。但是CUDNN并没有包含在CUDA中，因此，我们需要到以下链接下载CUDNN并查看安装说明 下载最新版CUDNN CUDNN官方指南 不同的是，CUDNN没有安装包，是以压缩包的形式下载到本地。解压后，其中应当包含如下目录及文件 . └─ cuda/ ├─ bin/ # Binary library │ └─ cudnn64_7.dll ├─ include/ # C++ Include file │ └─ cudnn.h ├─ lib/ # C++ Lib file │ └─ x64/ │ └─ cudnn.lib └─ NVIDIA_SLA_cuDNN_Support.txt # Readme file 假设我们CUDA的安装目录在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，将上述解压的 bin , include 和 lib 三个文件夹，直接拷贝覆盖到该安装目录下，即可完成CUDNN的安装。 进行完上述步骤后，我们还需要确保几个环境变量正确设置： 存在 CUDA_PATH=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，是我们的安装目录。理论上在CUDA安装后，该目录已经自动设置好。 环境变量 PATH 中，存在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/bin , C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/extras/CUPTI/libx64 两个路径，由于CUDNN已经配置在CUDA安装目录下，我们不需要像官方文档那样，添加第三个CUDNN的安装路径。 安装Anaconda ¶ Windows用户建议使用Anaconda管理python环境。作为一个开源的项目，Anaconda发行版已经集成了我们所需要的大多数python包，其中有些包是我们自己难以安装上的，例如支持python3的PIL。我们选用python3版的Anaconda，下载路径如下： Anaconda 最新版下载链接 注意选择x64版的安装包。安装结束后，我们已经有python3.7的环境了。鉴于有些情况下我们可能需要使用更早的python版本，接下来我们可以安装python3.6的虚环境。 Anaconda可以安装在用户或系统目录下。注意，如果安装在系统目录下，如果不在虚环境下，安装任何包都需要管理员模式。不过这不影响本教程的示例，因为我们将安装虚环境。直接打开 Anaconda Prompt ，并键入以下命令： conda create -n py36 python = 3 .6 anaconda 按照引导流程安装，经过一段时间后，我们将得到python3.6版的Anaconda。以后我们可以直接从开始菜单 Anaconda Prompt (py36) 进入该虚环境，也可以在基环境中键入 activate py36 转换到虚环境中。 提示 如果用户愿意，还可以通过 conda install -c conda-forge opencv 安装 opencv 。opencv是一个强大的图像处理库，这里python版的opencv比C++版更容易上手。一般该命令安装的是conda库中最新版的opencv（截至笔者写到这里时是opencv3.4.4）。然而，这样安装的并非是支持GPU的版本。尽管conda还提供一个GPU的opencv版本，可以通过 conda install -c patricksnape opencv-gpu 安装 opencv2 ，但它的版本还停留在2.4.9，和opencv3的用法殊有不同，请读者注意这一点。 安装预编译好的Tensorflow ¶ 可以通过 pip install tensorflow-gpu == 查看Tensorflow是否有官方发行的新版。当然，使用GPU的用户要特别注意最新版是否和你预装的驱动匹配，尤其是CUDA是否匹配，否则Tensorflow可能无法正常工作。 在官方发行版不适合我们使用的时候，我们也可以查看如下第三方发行的项目： fo40225/tensorflow-windows-wheel 该项目的维护者在不断根据Tensorflow的更新，预编译出适合不同版本的Tensorflow安装包。截至笔者写到这里为止，最新支持到r1.12版。 原则上来讲，我们选择尽可能新的版本。有时候官方发行版对CUDA的支持滞后，因此我们可以选择第三方版。无论选择哪种发行方，要安装Tensorflow，我们需要选择对应的GPU版，并在虚环境下执行以下命令： 官方版 pip install --upgrade tensorflow-gpu 第三方版 pip install https://github.com/fo40225/tensorflow-windows-wheel/blob/master/1.12.0/py36/GPU/cuda100cudnn73sse2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 第三方版(CPU AVX2加强) curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 \"C:/Program Files/7-Zip/7z.exe\" x tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 # Note that you need to specify where your 7-zip gets installed. pip install tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 等待一段时间后，安装将会结束。 Hello world! 测试 ¶ 撰写如下代码，保存到 hello-world.py 文件， Python 1 2 3 4 5 6 7 8 9 if __name__ == '__main__' : import tensorflow as tf test_str = tf . constant ( 'Hello, world!' ) test_cal = tf . reduce_sum ( tf . random_normal ([ 1000 , 1000 ])) with tf . Session () as sess : print ( 'Current Tensorflow version is:' , tf . __version__ ) print ( 'Test string: ' , sess . run ( test_str )) print ( 'Test calculation:' , sess . run ( test_cal )) Output Current Tensorflow version is: 1 .13.1 Test string: b 'Hello, world!' Test calculation: 955 .5544 在保存目录下，执行 python hello-world.py 第一次运行可能需要等待较长的初始化时间（硬件配置）。如果能正常运行，我们将看到如下结果： 其中，显示结果之前的记录信息反映了GPU已经可以正常工作。而“Test calculation”显示的结果是 10^6 10^6 个服从 \\mathcal{N}(0,1) \\mathcal{N}(0,1) 分布的随机数之和。根据相互独立的随机正态分布互不相关的特性，我们可以推算出，该结果服从 \\mathcal{N}(0,10^3) \\mathcal{N}(0,10^3) 的正态分布。","text_tokens":["当然","上述","教程","接下","将会","对比","流程","不够","3","上","好","检查","发行版","一段","段时间","步骤","存在","命令","\\","main","枉然","print","support","初始","那么","大多数","除此","崩溃","愿意","opencv3","9.0","执行","7.3","基础","windows","包含","your","sum","本","里","第三个","不断","之前","amd64","8.1","第一步","955","查看","prompt","gets","以下","集成","一个","版本","应当","7z","主","文件夹","撰写","读者","停留","建议","7.2","一点","重启","形式","need","保存","闪烁","主要","lib","因为","geforce","第一次","影响","相关","自动","就是","experience","作为","10","强制","机数","4.4","解决","8","”","然而","下来","world","c++","进行","cupti","!","python","出现",")","string","具有",">","fo40225","驱动","tf","相配","链接","条件","nccl","─","大多","conda","自带","本身","python3","upgrade","方案","管理","中预","import","指出","取决于","包括","visual","forge","1.12","多数","所示","社区","下载","下面","if","高时","使用","现在","installed","到位","test","并且","无法","方法","完成","对应","还","blob","总体","推算出","py36","开始菜单","预装","本地","低版本","但是","但","令","三方","random","没有","以后","图像","干扰","是","造成","看到","这部分","avx2","手","考虑","版","目录","如何","容易","include","正常","5","前","10.0","zip","__","符合","项目","安装包","不","run","哪","可以","whl","12","摘要","driver","一次","模式","cudnn64","确保","截至","运行","有时候","将","在线","就","安装","菜单","时","打开","第一","开始","path","编译","界面","(","部分","行为","取消","文档","activate","指导","githubusercontent","1","wheel","current","file","工作","假设","比","情况","做法","libx64","2.4","sess","自行","关闭","较长","则","由于","针对","及","环境变量","支持","滞后","install","'","包都","一段时间","摸索","源码","维护","任何","过时","需要","低版","或","方","问题","那样","新于","002","to","calculation","由此","r1","更","6","注意","you","cudnn","和","涉及","分布","包","示例","\"","：","引发","specify","大致","系统","选用","时间","导致系统","过程","create","]","之","库","有时","that","cp36m","对于","硬件","显示","extras","转换","即可","版本号","种","pip","studio","等待","提示","个","文件","}","o","无论如何","节","如果","constant","在","观察","opencv","载有","py","基","导致","binary","总结","而","首先","正确","选择","否则","笔者","cp36","可能","算出","机器","屏幕","环境变","请","理论","左图","curl","测试程序","program","github","根据","自己","computing","之外","两种","tensorflow","妨害","如下","测试","以","恢复","win","确定",":","系统目录","件夹","变量","（","三个","能否","开启","选项","给","拷贝","数次","例如","nvidia","原则上","^","都","开源","尽可能","库中","出","x","免费","而言","如","├","它","当","推算","{","之后","因此","_","session","实际","很","说明","经过","总体而言","¶","新版","适合","尝试","引导","不过","记录","也","要求","normal","c","当前","用法","的","基于","点击","新","│","专门","-","随机","代码","会","我们","哪怕"," ","13.1","dll","像","411.31","这种","2","并","内部","4","翻新","几个","master","└","output","）","并非","str","这","这部","=","写","readme","覆盖","anaconda","pil","有","以上","mathcal","压缩","很小","“","进入","一定","第三","正态分布","编写","。","为止","特别","对","强大","独立","信息","001","第一个","加强","n","#","匹配","该项","as","files","出错","h","https","指南","cuda100cudnn73sse2","用户","完","reduce","/","9","b","设置","定制","library","殊有","简易","下","这样","hello","出厂","一般","压缩包","toolkit","得到","难以","提供","多","所有","第三方","cal","是否","最新版","0","尽管","cpu","电脑","官方","name","后续","图","通过","1000","官方版","相互","exe","所","管理员","patricksnape","了","已经","过于","配置","互不","原则","目的","is","官网","其他","特性","无论","这一","version","发行","服从","最","后","程序","须知","三条","处理","解压","同时","到","cuda","除此之外","键入","一步","7","gpu","应已","raw","其中","尽可","路径","5544","x64","with","离线","该","显卡","接下来","预","依照","是因为",".","早","能","环境","鉴于","包是","opencv2","推荐","达到","中",",","添加","最新","txt","危险","bin","以免","更新","tensorrt","已然","where","维护者","图像处理","繁琐","com","10.1","取决","你","要","来讲","结果","cuda100cudnn73avx2","与","，","[","不再","反映","图标","sla","v10","不是","vs","有些","差距","这里","尤其","随机数","虚","所以","结束","时候","先","按照","两个","初始化","不同","从","右图","直接","note"],"title":"Hello world!","title_tokens":[" ","world","!","hello"]},{"location":"book-1-x/chapter-1/hello-world/#hello-world","text":"摘要 本节包含一个简易的安装指导，主要提供给Windows上的GPU用户。之后，用户可以按照本节指导编写第一个测试程序。","text_tokens":["gpu","上","一个","安装","给","，","用户","第一","的","编写","。","简易","提供","指导"," ","程序","主要","可以","测试程序","windows","包含","第一个","之后","按照","摘要","本","测试","节"],"title":"Hello world!","title_tokens":[" ","world","!","hello"]},{"location":"book-1-x/chapter-1/hello-world/#tensorflow","text":"本节针对Windows使用GPU的用户，提供一个安装最新版Tensorflow的方法。大致的步骤符合以下两个教程： 通过pip安装Tensorflow Tensorflow的GPU支持 但是，需要指出的是，官方教程里有些部分已经不符合当前用户的实际情况，笔者经过摸索，总结以下的安装过程。 总体而言，安装Tensorflow需要用户确保以下条件 NVIDIA驱动已经达到411.31及以上 CUDA 10.0 (10.1不确定能否正常使用) CUDNN已经达到7.3.1及以上 CUPTI版本与CUDA相配（不需要专门安装，在安装CUDA的同时已经自动集成） 除此之外，涉及多GPU支持的库(NCCL和TensorRT)，这里不考虑。因此，我们主要需要确保前三条正常安装。 提示 Tensorflow官方提供的安装包是基于CUDA 9.0，CUDNN >= 7.2的基础上编译的。然而现在NVIDIA已经不再提供CUDA 9.0了。Windows用户可以安装的版本包括过时的8.1和最新的10.1。在这种情况下，官方还提供一个令用户自行从源码编译Tensorflow库的方案，但是对于Windows用户而言过于繁琐，容易出错，这里不建议按照官方教程。","text_tokens":["但是","令","教程","在","出错","上","是","步骤","用户","考虑","总结","容易","正常","笔者","10.0","前","下","除此","符合","提供","多","不","安装包","可以","9.0","7.3","基础","windows","最新版","之外","tensorflow","本","里","确保","官方","8.1","通过","确定","（","以下","集成","一个","版本","能否","安装","了","已经","过于","nvidia","建议","7.2","编译","(","部分","而言","主要","三条","1","因此","同时","cuda","除此之外","自动","实际","情况","经过","gpu","总体而言","自行","然而","新版","针对","及","支持","当前",".","的","基于","摸索","cupti","专门","源码",")","过时","达到","需要",">","我们","驱动"," ","最新","相配","条件","nccl","411.31","这种","方案","）","tensorrt","繁琐","指出","10.1","包括","cudnn","=","和","涉及","以上","与","：","，","不再","大致","使用","现在","过程","。","库","有些","对于","这里","pip","提示","两个","按照","方法","还","从","总体","节"],"title":"安装Tensorflow","title_tokens":["tensorflow","安装"]},{"location":"book-1-x/chapter-1/hello-world/#nvidia","text":"首先，我们可以开始更新我们的NVIDIA驱动。任何载有NVIDIA-GPU显卡的电脑，都应当在系统里已经预装好了 GeForce Experience 。点击如下图标开启GeForce Experience（如果是低版本的GeForce Experience，图标可能会不同）， 如左图，在主界面上，可以观察到，当驱动版本不够高时，会自动出现更新提示，依照提示更新即可。建议在更新驱动时，关闭其他所有程序，以免造成干扰。 更新NVIDIA driver 检查更新结果 如果更新完成，如右图，可以在设置界面检查到当前的版本已经达到最新。在安装过程中，由于驱动更新，屏幕可能会闪烁数次。在看到更新提示完成后建议重启。 提示 如果GeForce Experience提示无法更新驱动，可以考虑将机器恢复出厂设置，可能可以解决这一问题。","text_tokens":["低版本","在","观察","不够","载有","上","干扰","好","检查","是","造成","看到","考虑","设置","首先","可能","机器","屏幕","出厂","左图","所有","可以","driver","电脑","里","如下","恢复","（","将","版本","应当","开启","主","安装","了","已经","数次","时","nvidia","都","开始","建议","其他","界面","重启","这一","后","如","程序","闪烁","当","geforce","到","自动","experience","解决","gpu","关闭","由于","显卡","依照","当前","的","点击","-","出现","任何","预装","达到","会","低版","我们","中","驱动"," ","最新","问题","以免","更新","）","结果","，","系统","高时","图标","过程","。","无法","即可","提示","完成","不同","右图","如果"],"title":"更新NVIDIA驱动","title_tokens":["驱动","更新","nvidia"]},{"location":"book-1-x/chapter-1/hello-world/#cuda","text":"驱动更新并重启后，需要安装最新版的Visual Studio(VS)，这是因为CUDA库本身对VS具有一定的支持，如果先安装CUDA，则这部分支持无法安装到位。这对我们使用Tensorflow并不造成妨害，但是对CUDA的用户并不是一个推荐的做法，所以无论如何，建议在第一步，安装VS，下面提供VS社区版（免费）的链接： Visual Studio官网 接下来，可以开始安装CUDA。进入CUDA安装包的下载链接 下载最新版CUDA CUDA官方指南 提示 须知，并非最新版就是最适合的版本。实际能使用的CUDA版本取决于后续步骤中预编译包的支持版本。就笔者写到这里时，最新的CUDA 10.1已然不匹配最新版预编译包支持的CUDA 10.0，由于版本差距很小，不确定是否会由此引发问题，但读者可以自行尝试。 现在的安装包已经支持在线安装包和离线安装包两种模式，读者可以根据自己的实际情况选择对应的版本。注意，安装CUDA的时候，CUDA可能要求我们翻新驱动版本，但通过GeForce Experience安装的驱动一般应已达到最新，新于CUDA内部提供的驱动。因此，我们需要选择定制安装模式，根据我们需要对比版本号，将驱动更新的选项取消，如下图所示 安装CUDA后，建议重启。 危险 特别需要注意的是，如果你的机器无法通过GeForce Experience更新驱动，那么在这里选择安装驱动也是枉然。并且，这种强制更新驱动的行为很可能导致系统崩溃。因此特别建议在安装CUDA之前一定要解决驱动更新的问题，哪怕是通过恢复出厂设置。","text_tokens":["但是","匹配","但","接下","在","对比","是","造成","步骤","这部分","指南","枉然","导致","用户","版","定制","如何","设置","选择","那么","笔者","10.0","可能","机器","出厂","一般","提供","安装包","不","崩溃","可以","是否","根据","自己","最新版","两种","tensorflow","妨害","模式","如下","官方","之前","后续","图","恢复","第一步","通过","确定","（","将","一个","版本","就","在线","安装","选项","已经","时","第一","读者","开始","建议","官网","编译","无论","重启","(","部分","行为","取消","免费","最","后","须知","因为","geforce","因此","到","cuda","就是","实际","情况","做法","experience","强制","很","一步","解决","自行","应已","新版","适合","尝试","则","由于","离线","也","支持","要求","接下来","预","是因为","下来","的","能",")","具有","推荐","达到","需要","会","我们","驱动","哪怕"," ","最新","链接","问题","这种","危险","并","本身","新于","内部","由此","翻新","更新","中预","注意","）","并非","已然","这","这部","取决","取决于","10.1","visual","你","要","写","和","包","很小","所示","社区","：","，","进入","下面","下载","引发","系统","使用","现在","导致系统","一定","不是","vs","库","到位","。","差距","特别","对","这里","并且","无法","所以","版本号","studio","先","提示","时候","对应","无论如何","如果"],"title":"安装CUDA","title_tokens":["cuda","安装"]},{"location":"book-1-x/chapter-1/hello-world/#cudnn","text":"安装CUDA的同时，已经自带安装上了CUPTI。但是CUDNN并没有包含在CUDA中，因此，我们需要到以下链接下载CUDNN并查看安装说明 下载最新版CUDNN CUDNN官方指南 不同的是，CUDNN没有安装包，是以压缩包的形式下载到本地。解压后，其中应当包含如下目录及文件 . └─ cuda/ ├─ bin/ # Binary library │ └─ cudnn64_7.dll ├─ include/ # C++ Include file │ └─ cudnn.h ├─ lib/ # C++ Lib file │ └─ x64/ │ └─ cudnn.lib └─ NVIDIA_SLA_cuDNN_Support.txt # Readme file 假设我们CUDA的安装目录在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，将上述解压的 bin , include 和 lib 三个文件夹，直接拷贝覆盖到该安装目录下，即可完成CUDNN的安装。 进行完上述步骤后，我们还需要确保几个环境变量正确设置： 存在 CUDA_PATH=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，是我们的安装目录。理论上在CUDA安装后，该目录已经自动设置好。 环境变量 PATH 中，存在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/bin , C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/extras/CUPTI/libx64 两个路径，由于CUDNN已经配置在CUDA安装目录下，我们不需要像官方文档那样，添加第三个CUDNN的安装路径。","text_tokens":["本地","上述","但是","files","在","没有","上","h","好","是","步骤","存在","指南","完","binary","/","目录","support","设置","library","include","正确","下","环境变","理论","toolkit","压缩包","安装包","不","program","包含","最新版","computing","0","第三个","如下","cudnn64","确保","官方","以",":","件夹","变量","查看","三个","将","以下","应当","安装","了","已经","拷贝","文件夹","配置","nvidia","path","形式","文档","后","├","lib","解压","因此","_","同时","到","cuda","file","自动","假设","说明","libx64","7","gpu","新版","其中","路径","x64","由于","及","环境变量","该","c","c++",".","进行","的","环境","│","cupti","中","需要","我们",",","添加"," ","最新","txt","链接","dll","那样","─","像","自带","并","bin","几个","└","cudnn","readme","=","覆盖","和","压缩","：","，","下载","第三","sla","v10","。","extras","即可","两个","文件","完成","不同","还","直接","#"],"title":"安装CUDNN","title_tokens":["cudnn","安装"]},{"location":"book-1-x/chapter-1/hello-world/#anaconda","text":"Windows用户建议使用Anaconda管理python环境。作为一个开源的项目，Anaconda发行版已经集成了我们所需要的大多数python包，其中有些包是我们自己难以安装上的，例如支持python3的PIL。我们选用python3版的Anaconda，下载路径如下： Anaconda 最新版下载链接 注意选择x64版的安装包。安装结束后，我们已经有python3.7的环境了。鉴于有些情况下我们可能需要使用更早的python版本，接下来我们可以安装python3.6的虚环境。 Anaconda可以安装在用户或系统目录下。注意，如果安装在系统目录下，如果不在虚环境下，安装任何包都需要管理员模式。不过这不影响本教程的示例，因为我们将安装虚环境。直接打开 Anaconda Prompt ，并键入以下命令： conda create -n py36 python = 3 .6 anaconda 按照引导流程安装，经过一段时间后，我们将得到python3.6版的Anaconda。以后我们可以直接从开始菜单 Anaconda Prompt (py36) 进入该虚环境，也可以在基环境中键入 activate py36 转换到虚环境中。 提示 如果用户愿意，还可以通过 conda install -c conda-forge opencv 安装 opencv 。opencv是一个强大的图像处理库，这里python版的opencv比C++版更容易上手。一般该命令安装的是conda库中最新版的opencv（截至笔者写到这里时是opencv3.4.4）。然而，这样安装的并非是支持GPU的版本。尽管conda还提供一个GPU的opencv版本，可以通过 conda install -c patricksnape opencv-gpu 安装 opencv2 ，但它的版本还停留在2.4.9，和opencv3的用法殊有不同，请读者注意这一点。","text_tokens":["但","接下","教程","在","opencv","流程","以后","图像","3","上","段时间","发行版","一段","是","命令","基","用户","手","版","9","目录","容易","殊有","选择","笔者","可能","下","大多数","请","这样","一般","得到","项目","难以","安装包","不","提供","愿意","可以","opencv3","windows","自己","最新版","开始菜单","尽管","本","如下","模式","截至","通过","系统目录","（","prompt","所","将","集成","以下","一个","版本","安装","管理员","patricksnape","菜单","了","已经","时","例如","打开","开源","停留","读者","开始","建议","库中","一点","(","发行","activate","后","它","因为","处理","影响","到","比","作为","情况","2.4","键入","4.4","7","经过","gpu","然而","新版","引导","其中","路径","不过","x64","也","支持","该","接下来","install","c","包都","用法","下来","c++",".","的","早","环境","一段时间","-","鉴于","python","包是","任何",")","opencv2","中","需要","我们","或"," ","最新","链接","大多","conda","python3","并","更","6","管理","注意","）","并非","这","图像处理","=","写","forge","anaconda","pil","有","和","多数","包","示例","：","，","下载","进入","选用","系统","时间","使用","create","。","库","有些","这里","强大","转换","虚","结束","提示","按照","还","不同","从","n","py36","直接","如果"],"title":"安装Anaconda","title_tokens":["anaconda","安装"]},{"location":"book-1-x/chapter-1/hello-world/#tensorflow_1","text":"可以通过 pip install tensorflow-gpu == 查看Tensorflow是否有官方发行的新版。当然，使用GPU的用户要特别注意最新版是否和你预装的驱动匹配，尤其是CUDA是否匹配，否则Tensorflow可能无法正常工作。 在官方发行版不适合我们使用的时候，我们也可以查看如下第三方发行的项目： fo40225/tensorflow-windows-wheel 该项目的维护者在不断根据Tensorflow的更新，预编译出适合不同版本的Tensorflow安装包。截至笔者写到这里为止，最新支持到r1.12版。 原则上来讲，我们选择尽可能新的版本。有时候官方发行版对CUDA的支持滞后，因此我们可以选择第三方版。无论选择哪种发行方，要安装Tensorflow，我们需要选择对应的GPU版，并在虚环境下执行以下命令： 官方版 pip install --upgrade tensorflow-gpu 第三方版 pip install https://github.com/fo40225/tensorflow-windows-wheel/blob/master/1.12.0/py36/GPU/cuda100cudnn73sse2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 第三方版(CPU AVX2加强) curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 \"C:/Program Files/7-Zip/7z.exe\" x tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 # Note that you need to specify where your 7-zip gets installed. pip install tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 等待一段时间后，安装将会结束。","text_tokens":["当然","匹配","三方","该项","files","将会","在","段时间","是","发行版","https","命令","一段","cuda100cudnn73sse2","avx2","用户","/","版","选择","否则","正常","笔者","cp36","可能","下","zip","项目","第三方","安装包","不","curl","哪","可以","执行","program","your","是否","windows","根据","github","最新版","12","0","tensorflow","whl","cpu","如下","不断","截至","官方","amd64","有时候","通过","win","官方版",":","查看","exe","gets","以下","版本","7z","安装","#","原则上","尽可能","原则","目的","编译","出","无论","x","(","发行","need","后","githubusercontent","wheel","因此","_","到","cuda","工作","note","7","gpu","新版","适合","raw","尽可","也","支持","滞后","install","预","c",".","的","新","环境","一段时间","-","维护",")","需要","fo40225","我们","驱动","方"," ","最新","并","upgrade","002","to","r1","更新","master","注意","you","where","维护者","com","你","要","来讲","=","写","有","和","1.12","cuda100cudnn73avx2","\"","：","，","specify","时间","使用","第三","installed","。","为止","有时","that","cp36m","特别","这里","对","尤其","无法","虚","结束","001","种","pip","等待","时候","对应","不同","加强","blob","o","py36","预装"],"title":"安装预编译好的Tensorflow","title_tokens":["编译","预","tensorflow","的","好","安装"]},{"location":"book-1-x/chapter-1/hello-world/#hello-world_1","text":"撰写如下代码，保存到 hello-world.py 文件， Python 1 2 3 4 5 6 7 8 9 if __name__ == '__main__' : import tensorflow as tf test_str = tf . constant ( 'Hello, world!' ) test_cal = tf . reduce_sum ( tf . random_normal ([ 1000 , 1000 ])) with tf . Session () as sess : print ( 'Current Tensorflow version is:' , tf . __version__ ) print ( 'Test string: ' , sess . run ( test_str )) print ( 'Test calculation:' , sess . run ( test_cal )) Output Current Tensorflow version is: 1 .13.1 Test string: b 'Hello, world!' Test calculation: 955 .5544 在保存目录下，执行 python hello-world.py 第一次运行可能需要等待较长的初始化时间（硬件配置）。如果能正常运行，我们将看到如下结果： 其中，显示结果之前的记录信息反映了GPU已经可以正常工作。而“Test calculation”显示的结果是 10^6 10^6 个服从 \\mathcal{N}(0,1) \\mathcal{N}(0,1) 分布的随机数之和。根据相互独立的随机正态分布互不相关的特性，我们可以推算出，该结果服从 \\mathcal{N}(0,10^3) \\mathcal{N}(0,10^3) 的正态分布。","text_tokens":["constant","as","在","random","3","py","是","\\","看到","main","print","reduce","9","b","目录","而","正常","5","初始","可能","下","__","算出","hello","run","可以","执行","sum","cal","根据","0","tensorflow","一次","如下","运行","之前","name","1000",":","相互","955","（","将","了","已经","配置","互不","^","撰写","第一","is","特性","version","(","服从","保存","推算","{","第一次","1","_","到","current","相关","工作","session","10","机数","7","sess","gpu","8","”","较长","其中","5544","with","记录","normal","该","'","world",".","的","能","-","!","python",")","string","随机","代码","需要",",","我们","tf"," ","13.1","2","calculation","4","6","output","import","）","str","=","结果","分布","和","mathcal","“","：","，","if","[","时间","反映","之","]","正态分布","。","硬件","独立","test","随机数","显示","信息","等待","个","文件","初始化","n","}","推算出","如果"],"title":"Hello world! 测试","title_tokens":["!","hello","world"," ","测试"]},{"location":"book-1-x/chapter-1/linear-classification/","text":"线性分类 ¶ 摘要 本节介绍如何使用顺序模型(sequential model)来编写一个线性分类器，使用sigmoid函数激活，并验证其效果。在本节我们将编写第一个Project，并介绍一些基本概念、和一个推荐的Tensorflow Project的编写格式。 理论 ¶ 问题描述 ¶ 考虑我们有如下的二分类数据集 (\\mathbf{x},~y_i) \\in \\mathbb{D}_i (\\mathbf{x},~y_i) \\in \\mathbb{D}_i ，并且有一个未知的常数向量 \\mathbf{a}_i \\mathbf{a}_i 和未知的常数标量 c_i c_i ，使得： \\begin{equation} y_i = \\left\\{ \\begin{aligned} 0, && \\mathbf{a}_i^T \\mathbf{x} + c_i \\leqslant 0, \\\\ 1, && \\mathbf{a}_i^T \\mathbf{x} + c_i > 0. \\end{aligned} \\right. \\end{equation} 其中， \\mathbf{a} \\mathbf{a} 可以看成是某超平面的（未标准化的）法向量，那么 \\mathbf{a}^T \\mathbf{x} + c = 0 \\mathbf{a}^T \\mathbf{x} + c = 0 是该超平面的截距式定义，亦即该平面与 x_i x_i 轴的交点可以显式表述为 x_i^{(0)} = - \\frac{c}{a_i} x_i^{(0)} = - \\frac{c}{a_i} 。由此可知，式 (1) (1) 显式定义了一个点在超平面的哪一侧。特别地，若 \\mathbf{x} \\mathbf{x} 是一个二维向量，则该超平面退化为一维平面；若 \\mathbf{x} \\mathbf{x} 是一个标量，则该超平面退化为一条直线。 若我们定义 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} ，有 \\begin{equation} \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix}, ~~ \\mathbf{A} = \\begin{bmatrix} \\mathbf{a}^T_1 \\\\ \\mathbf{a}^T_2 \\\\ \\vdots \\\\ \\mathbf{a}^T_n \\end{bmatrix}, ~~ \\mathbf{c} = \\begin{bmatrix} c_1 \\\\ c_2 \\\\ \\vdots \\\\ c_n \\end{bmatrix}. \\end{equation} 则我们可以认为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 其中 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 是一个定义噪声的向量。 我们可以把向量 \\mathbf{y} \\mathbf{y} 的元素看成是互不相关的多个超平面对向量 \\mathbf{x} \\mathbf{x} 各自独立的分类结果。即 y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} 。由于每个超平面构成一个二分类，如果把每个二分类看作是向量是否属于这个类的测度，那么 \\mathbf{y} \\mathbf{y} 可以被看作是一个多分类的结果，尽管向量 \\mathbf{x} \\mathbf{x} 可能被同时分入多个类中。 假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 来（亦即是否属于该分类）。 须知 请注意我们在这里说到“线性分类器”，虽然使用“线性”一词，但准确来说，这是一个仿射变换。因为线性变换要求有齐次性，即 f(x) = \\alpha f(x) f(x) = \\alpha f(x) ，但仿射变换允许我们引入一个平移向量 \\mathbf{b} \\mathbf{b} 。当然，我们的求解的线性问题本身也是一个仿射变换。 在这个问题里，我们虽然不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，但我们知道由 (3) (3) 确定的线性关系，因此，我们可以随机生成一组 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，构建线性模型： \\begin{align} \\tilde{\\mathbf{y}} = \\sigma ( \\mathbf{W} \\mathbf{x} + \\mathbf{b} ). \\end{align} 其中，可微函数 \\sigma \\sigma 是一个将实数空间 \\mathbb{R}^n \\mathbb{R}^n 映射到有限范围的实数空间 [0,~1]^n [0,~1]^n 内的函数。特别地， \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 。因此，可以将 \\sigma \\sigma 看作是二分类布尔函数的插值函数。理论上，只要我们找到 \\mathbf{W}=\\mathbf{A} \\mathbf{W}=\\mathbf{A} ， \\mathbf{b}=\\mathbf{c} \\mathbf{b}=\\mathbf{c} ，则该线性分类器可以直接拟合出原分布来。 感知机 ¶ 我们将 (4) (4) 定义的线性模型称为 单层感知机 (Single-layer perceptron) 模型。它包含一个权重矩阵 \\mathbf{W} \\mathbf{W} 和一个偏置矩阵 \\mathbf{b} \\mathbf{b} 。事实上，可以将 (4) (4) 改写成如下形式 \\begin{align} \\tilde{\\mathbf{y}} = \\sigma \\left( \\begin{bmatrix} \\mathbf{W} & \\mathbf{b} \\end{bmatrix} \\begin{bmatrix} \\mathbf{x} \\\\ 1 \\end{bmatrix} \\right). \\end{align} 可见偏置本身可以看成是输入向量多了一个常数元素的等价模型。 感知机是最早的神经网络形式，它非常孱弱，只能解线性问题，但却为神经网络后来的发展开了先河。在单层感知机里，我们视输入向量 \\mathbf{x} \\mathbf{x} 的每个元素为一个“神经元”，矩阵 \\mathbf{W} \\mathbf{W} 和偏置 \\mathbf{b} \\mathbf{b} 将我们的输入映射到输出层 \\mathbf{y} \\mathbf{y} ，输出层的每个元素也视为一个神经元。在这个过程中， W_{ij} W_{ij} 作为 i i 行 j j 列的元素，代表了连接两个神经元的权重。我们用红线代表正值，蓝线代表负值，感知机可以被图示为 线性感知机的输出也是输入的线性组合，但我们可以添加激活函数，即 \\sigma(\\cdot) \\sigma(\\cdot) 将其映射到非线性空间。这要求我们添加的激活函数是一个非线性函数。 事实上，将单层感知机层叠，前一层的输出作为后一层的输入，就构建出早期的神经网络。这种网络每一层都是全连接的（两个神经元之间总是有权重，尽管值可能为0），每一层都有激活函数。理论上，任意一个两层堆叠的感知机，只要神经元数目足够多，就可以拟合出任意一个非线性函数。然而，实际测试中，这一理论的效果并不尽如人意，因此又有陆续地改进，才有了后来的深度学习。饮水思源，鉴往知来，我们也将从这个简简单单的单层模型开始，走上学习“深度学习”之旅。 Sigmoid函数 ¶ 在上述介绍中，我们没有解决的两个问题是， 如何定义插值函数 \\sigma \\sigma ？ 如何找到合适的 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ？ 我们首先讨论第一个问题。一般地，多分类问题中，如果各个分类彼此并非相斥，且不一定要将结果分入任一类的话，我们可以用 Sigmoid 函数来定义 \\sigma \\sigma ，亦即 \\begin{align} \\sigma(\\mathbf{x}) = \\frac{1}{ 1 + e^{-\\mathbf{x}}}. \\end{align} 它同时满足 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 ，且是一个单调函数。以下代码向我们展示了这种函数的特性： Python 1 2 3 4 5 6 7 8 9 10 11 12 import numpy as np import matplotlib.pyplot as plt def test_sigmoid (): x = np . linspace ( - 5 , 5 , 100 ) y = 1 / ( 1 + np . exp ( - x ) ) plt . plot ( x , y ) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () if __name__ == '__main__' : test_sigmoid () Output 使用sigmoid函数的一大好处是，它的导数求解非常简单，很适合用来做神经网络这样一个复杂模型的激活函数。注意虽然 \\sigma(\\mathbf{x}) \\sigma(\\mathbf{x}) 和 \\mathbf{x} \\mathbf{x} 都是向量，这意味着导数是Jacobian矩阵，但由于 \\sigma \\sigma 是一个对 \\mathbf{x} \\mathbf{x} 各元素独立的解析函数，这个Jacobian矩阵实际上是一个对角矩阵，对角线上第j个元素的值为 \\begin{align} \\left. \\frac{ \\partial \\sigma(x) }{ \\partial x } \\right|_{x=x_j} = \\left. - e^{-x} \\left( - \\frac{1}{\\left( 1+e^{-x} \\right)^2} \\right) \\right|_{x=x_j} = - \\sigma(x_j) ( 1 - \\sigma(x_j) ). \\end{align} 可见，该函数的导数和计算函数本身的复杂度相若，可以做到快速求导。 求解问题 ¶ 接下来，我们需要解决第二个问题，亦即找到 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} 。这一问题通常可以写成反问题的形式： \\begin{align} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} \\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}^{(k)},~ \\sigma ( \\mathbf{W} \\mathbf{x}^{(k)} + \\mathbf{b} ) \\right). \\end{align} 最简单的情况下，我们可以把 损失函数(loss function) 定义为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{align} 我们称 (8) (8) 为 逻辑斯蒂回归(logistic regression) 。有趣的是，虽然这个术语叫“回归”，但它解的其实是个分类问题。但是，既然这是一个分类问题，我们可以不使用这个损失函数，而是从概率论的角度看待这个问题。由此，我们引出一个新的损失函数：“交叉熵”。 交叉熵 ¶ 我们视sigmoid函数输出的值为一个概率，表示分类器对预测结果的确信程度，记 \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} ，则 \\begin{equation} \\begin{aligned} \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}), \\\\ \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) &= 1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}). \\end{aligned} \\end{equation} 注意这里的概率向量的含义是，其中第i个元素表明第i个超平面分类结果的 确信程度 。 然而，这个概率只是分类器对分类结果的确信程度，却并非是分类准确度的概率，实际上，分类 准确度 的概率，应当表述为 \\begin{equation} \\begin{aligned} \\mathbf{p}(\\mathbf{y}|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta})^{1-\\mathbf{y}}\\\\ &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\left(1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}) \\right)^{1-\\mathbf{y}}. \\end{aligned} \\end{equation} 注意 这里 \\mathbf{x}^{\\mathbf{y}} \\mathbf{x}^{\\mathbf{y}} 表示的是对每个元素一一求取指数，即函数第i个元素的返回值应当为 {x_i}^{y_i} {x_i}^{y_i} 。 我们使用真实值 \\mathbf{y} \\mathbf{y} 作为指数给概率向量加权。当 \\mathbf{y}=1 \\mathbf{y}=1 时，乘积项的第二个因子消去，该函数退化为以预测值为1的可信度 \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) ；反之则第一个因子消去，退化为以预测值为0的可信度 \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) 。这就是最大似然估计方法。至此，我们可以写出似然估计函数 \\begin{align} L(\\boldsymbol{\\Theta}) = \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}). \\end{align} 对似然估计函数取对数，则有 \\begin{equation} \\begin{aligned} l(\\boldsymbol{\\Theta}) &= \\sum_{k=1}^N \\log \\left( \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}) \\right) \\\\ &= \\sum_{k=1}^N \\mathbf{y}^{(k)} \\cdot \\log\\left(\\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right) + \\left(1 - \\mathbf{y}^{(k)} \\right) \\cdot \\log\\left(1 - \\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right). \\end{aligned} \\end{equation} 我们最终的目的是要最大化似然函数，亦即 \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) ，这等价于最小化 -l(\\boldsymbol{\\Theta}) -l(\\boldsymbol{\\Theta}) 。对比 (8) (8) 和 (9) (9) ，于是我们可以定义交叉熵为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = - \\mathrm{mean}\\left[ \\mathbf{y} \\cdot \\log\\left( \\tilde{\\mathbf{y}} \\right) + \\left(1 - \\mathbf{y} \\right) \\cdot \\log\\left(1 - \\tilde{\\mathbf{y}} \\right) \\right]. \\end{align} 注意这里我们使用 \\mathrm{mean}\\left[ \\cdot \\right] \\mathrm{mean}\\left[ \\cdot \\right] 表示求取一个向量所有元素的平均值。实际上，Tensorflow允许我们定义损失函数的输出为一个和输出向量维度相同的向量，Tensorflow自带的交叉熵也是这样定义的。实际应用时，Tensorflow会自动在向量维度上求均值，并压缩成上述 (14) (14) 的形式。 若我们记 \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) ，代入sigmoid函数，为了确保该损失函数的稳定性，我们可以将 (14) (14) 整理为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{x}} \\right) = \\mathrm{mean}\\left[ \\max(\\tilde{\\mathbf{x}}, \\mathbf{0}) - \\tilde{\\mathbf{x}} \\cdot \\mathbf{y} + \\log\\left(1 + e^{-|\\tilde{\\mathbf{x}}|} \\right) \\right]. \\end{align} 提示 这里交叉熵整理的推导过程参见 Tensorflow-API官方文档 。 实际情况下，我们使用 (15) (15) 来求取sigmoid函数激活下的交叉熵。 解线性多分类问题 ¶ 接下来，我们将开始实战上手，编写我们的第一个Project。虽然一个Project的格式并无定法，每个人按照自己的喜好会选择不同的风格，但一个从无受过训练的人，往往写出的Project几乎完全不具有可读性。实际上，学习任何语言， 变量命名规范 、 缩进规范 以及 模块化 、 面向对象 等都被认为是编写一个具有可读性的代码所不得不知的概念。本教程所推荐的代码格式，均具有统一的风格，读者在了解每个Project和其对应的教程时，会慢慢熟悉这种风格的特点。愿读者能从这样的风格中得到启发，得到 代码可读性 的神髓。 代码规范 ¶ 建立一个具有较强可读性的Tensorflow工程需要我们活用python的模块化设计。我们通常推荐以下的结构 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 撰写各个模块时，建议使用类封装各组功能相同的函数。具有良好使用习惯的coder应当注意给各个面向用户的类、函数撰写（哪怕简短的）说明文字，在一些较长的函数、方法的定义中，适当注释各部分的功能，以便读者能正确理解代码意义。 另外，在对象命名上，python有如下必须遵守或不成文的规定，和C/C++用户熟悉的蛇形命名法不同，它大致包括 类与函数多用驼峰命名法，变量可以采用驼峰或蛇形命名法。 驼峰命名法指的是用大小写区分每个单词块，例如 alphaBetaFunction () ； 蛇形命名法指的是用下划线区分每个单词块，例如 alpha_beta_function = 10 ； 宏变量使用全字大写+蛇形命名法 函数/方法，还有模块均是首字母小写，但类的首字母大写。 用单下划线 _ 表示临时存储器，或省略参数，例如一个函数 func () 有两个返回值时，可以用 _ , b = func () 表示我们只需要第二个返回值；单下划线还可以与星号连用省略多个返回值； 以单下划线开头的方法，表示模块级的私有方法，在模块以外使用 import 导入类时，不会导入这些方法，例如 def _alphaBeta ( self ): ； 以单下划线结尾的对象，用来和python的关键字区分，例如 func ( x , class_ ) ; 以双下划线开头的方法，如果不以双下划线结尾，则表示类级的私有方法，只有类内部的方法能调用这些方法，在类外部、包括继承的子类里都原则上不能调用（但其实也有办法调用），例如 def _alphaBeta ( self ): ； 以双下划线同时开头和结尾的方法，一般是用来 重写 (override) 特殊功能，例如 def __getattribute__ (): 将重写获得类属性的方法。 Tensorflow的数据概念 ¶ 在Tensorflow中，我们把变量都称为“ 张量 (Tensor) ”。这是因为我们有零维的标量，一维的向量，二维的矩阵，更高维的我们都称为张量。作为一个更大的概念，张量当然也可以用来包括标量、向量和矩阵了。在Tensorflow中，有的张量是 可以训练 (trainable) 的，有的则不是。比如一个张量的形状（指各维大小），当然可以是一个 < tf . Tensor 'Shape:0' shape = ( 1 ,) dtype = int32 > 类型的张量，但它不是变量，当然就不可训练。我们也可以人为控制某些张量可以训练或不可以训练，但本节、乃至本章所介绍的凡是我们接触到的张量，都是可以训练的。 特别地，对于神经网络而言，在网络内计算（或者说流动、传播）的一个n维数据，通常按照以下形式组织： tensor [ batch , dim1 , dim2 , ... , dimn , channel ] 其中，第一个维度 batch 一定存在，它表示的是单个batch中的某一个样本。如果一个batch只有一个样本，那么 batch 只能取0。 从 dim1 到 dimn 指的是实际的n维数据的各个维度； channel 指的是数据的通道，例如，一个二维RGB图像，每种颜色代表一个通道，因此有三个通道。 channel 通常用在卷积网络里，我们经常需要在深度卷积网络里不断增大通道数的同时，缩小数据尺寸。 在某些特殊情况下， channel 维度可以不存在，例如我们使用的是全连接层而不是卷积网络， tf.keras.layer.Flatten 可以用来将一个有通道的张量压缩成一个没有通道的一维向量（但是注意 batch 维度仍然存在，不会被压缩）。 因此，我们知道一个n维的数据，在神经网络中通常被描述为一个n+2维的矩阵，而一个一维向量，在卷积网络里是三维的： vector [ batch , length , channel ] 但是在全连接网络里，是二维的： vector [ batch , channel ] 在本节，乃至本章里，我们还不讨论卷积网络，因此我们都是使用二维张量（一维向量组）作为我们的数据。 数据生成 ¶ 在本项目里，我们不需要扩展Tensorflow。但是，我们需要以随机生成数据代替数据集。因此，首先，通过以下代码定义数据生成器 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class TestDataSet : ''' A generator of the data set for testing the linear model. ''' def __init__ ( self , scale_x , A , c ): ''' Initialize the data generator. scale_x: the scale of input vector. A, c: the linear transformation. ''' self . s_x = 2 * scale_x self . A = A self . c = c self . len_x = A . shape [ 0 ] self . config () def config ( self , train = True , batch = 100 , noise = 0.1 ): ''' Configuration train: a flag for controlling the iterator mode. batch: the number of samples in a batch noise: std. of the error added to the y. ''' self . train = bool ( train ) self . batch = batch self . noise = noise def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) y = np . greater ( y , 0.0 ) . astype ( np . float32 ) return x , y def next_test ( self ): ''' Get the next test batch x. ''' return self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) def __iter__ ( self ): while True : samp = self . __next__ () yield samp def __next__ ( self ): if self . train : return self . next_train () else : return self . next_test () 该生成器输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。这种数据集写法我们在后面还会用到， model . fit 允许我们不是馈入样本（或样本批次），而是馈入一个 生成器(generator) 。因此我们重写了 __iter__ 方法，并使其通过 yield 返回一个生成器。这样我们定义的数据集类就可以被Keras的训练函数 model . fit 使用。接下来，调用如下测试代码： dparser.py 1 2 3 4 5 6 7 8 9 10 def test_dataset (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) c = np . random . uniform ( 1 , 3 , [ 1 , 6 ]) dataSet = TestDataSet ( 10 , A , c ) dIter = iter ( dataSet ) for i in range ( 10 ): x , y = next ( dIter ) print ( np . sum ( y , axis = 0 ) / 100 ) test_dataset () Output [ 0.47 0.57 0.58 0.56 0.5 0.38 ] [ 0.6 0.61 0.47 0.48 0.38 0.52 ] [ 0.5 0.61 0.49 0.42 0.45 0.53 ] [ 0.59 0.52 0.44 0.44 0.49 0.51 ] [ 0.54 0.59 0.48 0.5 0.51 0.47 ] [ 0.49 0.57 0.56 0.49 0.53 0.4 ] [ 0.5 0.61 0.51 0.54 0.51 0.52 ] [ 0.5 0.51 0.61 0.5 0.44 0.5 ] [ 0.44 0.46 0.53 0.45 0.56 0.52 ] [ 0.52 0.46 0.51 0.52 0.49 0.44 ] 我们随机生成了 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的数据，每组数据100个，并且测试了10组。输出结果是各组测试中， \\mathbf{y} \\mathbf{y} 在对应维度上分类为1的概率估计。结果基本都在0.5左右，说明我们的这种数据生成模式产生的点能均匀分布在各个超平面两侧，适合进行后续测试。 定义线性顺序模型 ¶ 顺序 (sequential) 模型是一个单输入单输出模型，网络结构较为简单，也不存在跨层短接（残差连接）。在大多数情况下，已经上手的Tensorflow用户不使用这个模型，故而作为我们入门的第一个project，我们姑且用之，但我们将不再使用顺序模型来实现后续的project。一个顺序模型大致可以描述为下图的模式： graph LR st(输<br/>入) --> l1[层<br/>1] l1 --> l2[层<br/>2] l2 --> l3[层<br/>3] l3 --> ldots[层<br/>...] ldots --> ed(输<br/>出) classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,ed styStart 由于我们完成的是一个线性分类器，故而我们使用单层的序列模型即可。 接下来，我们来定义一个类， class LinClsHandle : 。定义一个类的时候，我们通常需要定义的内容包括 在初始化方法 __init__ 里定义传入网络的固定参数，例如学习速率，存取路径等； 在方法 construct 里定义网络的构造和使用的优化器； 在方法 train 里定义训练网络的过程，主要需要调用 model . fit 。如果我们在数据集的定义非常完善，则这一环节不需要花费太多的功夫； 在方法 test 里定义测试网络的过程，主要需要调用 model . evaluate 。如果有必要，可以通过 model . predict 返回测试结果。 初始化方法 ¶ 首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe 由于目前我们的project还非常简单，这里只需要有学习速率( learning_rate )，轮次数( epoch )和每轮迭代次数( steppe )即可。 构造方法 ¶ 接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction self . model = tf . keras . Sequential () self . dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , input_shape = ( INPUT_SHAPE ,), kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = tf . nn . sigmoid ) self . model . add ( self . dense1 ) # Set optimizer self . model . compile ( optimizer = tf . train . AdamOptimizer ( self . lr ), loss = tf . keras . losses . BinaryCrossentropy (), metrics = [ self . accuracy , tf . keras . metrics . BinaryAccuracy ()] ) @staticmethod def accuracy ( y_true , y_pred ): return tf . keras . backend . mean ( tf . keras . backend . equal ( y_true , tf . keras . backend . round ( y_pred ))) 须知 这里 LABEL_SHAPE 和 INPUT_SHAPE 为两个宏变量，分别为输出和输入的向量维度。 我们使用 Dense 定义全连接层，它的用法请参照 这里 。由于我们已经知道 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 可能的取值范围，这里我们重定义了 \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的初始化方式。 信息: Dense API tf . keras . layers . Dense ( shape , ** kwargs ) 指全连接层，其输入一组已知形状的向量，输出一组形状为 shape 的向量。可用的API如下： shape : 正整数，输出空间维度。 activation : 激活函数。 若不指定，则不使用激活函数 (即，线性激活: a(\\mathbf{y}) = \\mathbf{y} a(\\mathbf{y}) = \\mathbf{y} )。该函数可以定义为任何元素级操作的Tensorflow函数。 use_bias : 布尔值，该层是否使用偏置向量。 True 则网络定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} ， False 则定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} \\mathbf{y} = \\mathbf{W}\\mathbf{x} 。 kernel_initializer : kernel 权值矩阵的初始化器，自定义的初始化器需要使用Keras后端API编写。 bias_initializer : 偏置向量的初始化器，同上。 kernel_regularizer : 运用到 kernel 权值矩阵的正则化函数，自定义的正则化函数需要使用Keras后端API编写。 bias_regularizer : 运用到偏置向的的正则化函数，同上。 activity_regularizer : 运用到层的输出的正则化函数，同上。 kernel_constraint : 运用到 kernel 权值矩阵的约束函数，只能使用Keras备选的几种方案，不能自定义。 bias_constraint : 运用到偏置向量的约束函数，同上。 信息: model.compile API model . compile ( optimizer , ** kwargs ) 在这里指的是顺序模型的编译函数，其可用的API如下： optimizer : 优化器，可以使用Tensorflow内置的优化器。 loss : 损失函数，也是目标函数。顺序模型只有一个输出，因此只能传入一个损失函数。可以使用形式为 func ( y_true , y_pred ) 的Tensorflow函数。 metrics : 测度函数，一般是一组函数，如果是一个函数则定义为 [ func ] 即可。自定义的测度函数目前还需要使用Keras后端API编写。 loss_weights : 损失的权重，顺序模型只有一个损失函数，因此只有一个权重，但要使用一维列表 [ value ] 定义。可以使用张量来控制可变权重。 sample_weight_mode : 按时间步采样权重，默认不提供。相比上面的损失权重，该选项会随着迭代次数使用不同的权重，因此输入的是二维列表。 weighted_metrics : 测度的权重，和损失权重类似，用来加给不同的测度函数。由于我们可以使用不只一个测度函数，这里的权重是个一维列表。 target_tensors : 默认情况下，Keras 将为模型的目标创建一个占位符，在训练过程中将使用目标数据。相反，如果你想使用自己的目标张量（反过来说，Keras在训练期间不会载入这些目标张量的外部 Numpy数据），您可以通过 target_tensors 参数指定它们。对于单输出的顺序模型，它应该是单个张量。 ** kwargs : 其他参量，会传递给 tf . Session . run 。 另外，注意我们这里构造网络的时候有如下技巧： Tensorflow在导入Keras模式以后，已经不再使用 (15) (15) 的形式定义 sigmoid交叉熵 ，而是采取更通用的定义 (14) (14) ； 我们使用Tensorflow重新封装过的类， 二分类交叉熵 ( BinaryCrossentropy ) 来作为Keras模型的损失函数 self.loss ，该函数与 多分类交叉熵 ( CategoricalCrossentropy ) 不同，乃是对两组对比张量的每个元素分别计算交叉熵，再求取均值，正符合本应用的需求； 我们通过静态方法，调用Keras的后端API，自己定义了预测准确度的测度函数 self.accuracy ，同时也使用另一个来自Tensorflow封装好的测度类 二分类准确度 ( BinaryAccuracy ) ，这是为了比照两个准确度的区别，以便我们更好理解该测度类； 我们将网络层的关键字 self.dense1 保留在了实例中，这是为了确保接下来我们能通过实例抽取该层的参数。 需要注意的是，由于 二分类交叉熵 ， 二分类准确度 和 多分类交叉熵 等都是类（从它们的定义都是大写字母开头也可以看出来），因此我们需要在使用的时候后面加上括号以实例化；由于这些类都定义了 __call__ 方法，我们可以像使用函数一样使用它们的实例。 训练和测试方法 ¶ 最后定义的式训练和测试方法。由于我们目前的project还比较简单，关于这两部分都直接调用现有的API即可。使用的API在之前已经说明。 model.fit 在没有额外设置的情况下，默认会返回一个 History回调器 ； model.evaluate 返回的是测试样本给出的损失函数和准确值测度。 model.predict 返回的是测试样本给出的网络输出。详情请参照 顺序模型API 。 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def train ( self , dataSet ): ''' Use a data set to train the network. ''' return self . model . fit ( dataSet , epochs = self . epoch , steps_per_epoch = self . steppe ) def test ( self , data , labels ): ''' Use (data, label) pairs to test the results. ''' loss , accu = self . model . evaluate ( data , labels ) print ( 'Evaluated loss =' , loss ) print ( 'Evaluated accuracy =' , accu ) return self . model . predict ( data ) 信息: model.fit API model . fit ( dataSet , ** kwargs ) 是训练函数，注意这个函数虽然支持输入一组 x,~y x,~y 用来代替 dataSet ，我们还是建议在任何情况下都用dataSet馈送数据，以免内存中数据集占用过多。 dataSet : 数据集，其本身应当是一个 tf.data.Dataset 类型的类，或者是一个能不断迭代产生新数据的生成器。数据的 batch 大小由 dataSet 本身决定。 epochs : 整数，终止训练时经历的世代(轮次)数，通常一个epoch表示遍历整个数据集一回。 verbose : 0, 1或2。日志显示模式。 0=安静模式, 1=进度条, 2=每轮一行。默认是1。 callbacks : 回调器，它是 tf.keras.callbacks 模块下的类，用来在训练中进行记录保存和数据检查点更新。默认是 tf.keras.callbacks.History 。 validation_split : 在 0 和 1 之间浮动。用作验证集的训练数据的比例。模型将分出一部分不会被训练的验证数据，并将在每一轮结束时评估这些验证数据的误差和任何其他模型指标。验证数据是混洗之前 x 和 y 数据的最后一部分样本中。 validation_data : 元组 (x_val，y_val) 或元组 (x_val，y_val，val_sample_weights) ，用来评估损失，以及在每轮结束时的任何模型度量指标。模型将不会在这个数据上进行训练。这个参数会覆盖 validation_split 。 shuffle : 布尔值（是否在每轮迭代之前混洗数据）。当 steps_per_epoch 非 None 时，这个参数无效。 class_weight : 可选的字典，用来映射类索引（整数）到权重（浮点）值，用于加权损失函数（仅在训练期间）。这可能有助于告诉模型 「更多关注」来自代表性不足的类的样本。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 initial_epoch : 开始训练的轮次（有助于恢复之前的训练）。 steps_per_epoch : 在声明一个轮次完成并开始下一个轮次之前的总步数（样品批次）。使用TensorFlow数据张量等输入张量进行训练时，默认值 None 等于数据集中样本的数量除以 batch 的大小，如果无法确定，则为1。 validation_steps : 只有在指定了 steps_per_epoch 时才有用。停止前要验证的总步数（批次样本）。 该函数会返回 callbacks 定义的实例。 信息 model.evaluate API model . evaluate ( x , y , ** kwargs ) 是测试函数，需要传入 label 即 y 来验证性能。 x , y : Numpy 数组，分别是输入和输出的真实参照值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数会返回损失函数和测度（列表）。 信息 model.predict API model . predict ( x , ** kwargs ) 是预测函数，用在只知道输入 x 的场合。 x : Numpy 数组，输入值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数返回预测结果。 调试 ¶ 首先，训练网络。我们随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的仿射变换，并且设置好数据集，给定噪声扰动为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 。设定20个epoch，每个epoch迭代500次，每次馈入32个样本构成的batch，然后开始训练： lin-cls.py 1 2 3 4 5 6 7 8 9 # Initialization A = np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataSet ( 10 , A , c ) dataSet . config ( batch = 32 , noise = 0.1 ) # Construct the model and train it. h = LinClsHandle ( learning_rate = 0.01 , epoch = 20 , steppe = 500 ) h . construct () record = h . train ( iter ( dataSet )) Output Epoch 1 /20 500 /500 [==============================] - 1s 3ms/step - loss: 6 .3005 - accuracy: 0 .5884 - binary_accuracy: 0 .5884 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 5 .4671 - accuracy: 0 .6407 - binary_accuracy: 0 .6407 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4 .5711 - accuracy: 0 .6957 - binary_accuracy: 0 .6957 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 3 .6789 - accuracy: 0 .7519 - binary_accuracy: 0 .7519 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .7101 - accuracy: 0 .8127 - binary_accuracy: 0 .8127 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .0059 - accuracy: 0 .8627 - binary_accuracy: 0 .8627 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .6403 - accuracy: 0 .8894 - binary_accuracy: 0 .8894 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .3663 - accuracy: 0 .9066 - binary_accuracy: 0 .9066 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .0466 - accuracy: 0 .9274 - binary_accuracy: 0 .9274 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .8377 - accuracy: 0 .9418 - binary_accuracy: 0 .9418 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .6465 - accuracy: 0 .9546 - binary_accuracy: 0 .9546 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .4492 - accuracy: 0 .9667 - binary_accuracy: 0 .9667 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .2795 - accuracy: 0 .9779 - binary_accuracy: 0 .9779 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .1624 - accuracy: 0 .9861 - binary_accuracy: 0 .9861 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0680 - accuracy: 0 .9926 - binary_accuracy: 0 .9926 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0128 - accuracy: 0 .9971 - binary_accuracy: 0 .9971 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0052 - accuracy: 0 .9986 - binary_accuracy: 0 .9986 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0049 - accuracy: 0 .9985 - binary_accuracy: 0 .9985 接下来，从训练返回的 History 类型的回调器中抽取对loss和accuracy的记录。 lin-cls.py 1 2 3 4 5 # Show records plt . semilogy ( record . epoch , record . history [ 'loss' ]), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Cross entropy' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () plt . plot ( record . epoch , record . history [ 'accuracy' ], label = 'self defined' ), plt . plot ( record . epoch , record . history [ 'binary_accuracy' ], label = 'from tensorflow' ), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Accuracy' ), plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 结果显示，我们自定义的准确度测度和Tensorflow内置的 二分类准确度 完全相同，这说明其本身的定义就是求取所有元素阈值化后，各自分类结果是否正确的平均值。这个实验也让我们对自定义测度函数有了一定的认识。 重新设定数据集的产生方式，变为每个batch含10个样本。使用这组重新随机生成的数据测试网络输出， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 # Generate a group of testing samples: dataSet . config ( batch = 10 ) x , y = next ( dataSet ) # Check the testing results yp = h . test ( x , y ) _ , ( ax1 , ax2 ) = plt . subplots ( 1 , 2 ) ax1 . imshow ( y , interpolation = 'nearest' , aspect = 'auto' ) ax1 . set_title ( 'True class' ) ax2 . imshow ( yp , interpolation = 'nearest' , aspect = 'auto' ) ax2 . set_title ( 'Predicted class' ) plt . gcf () . set_size_inches ( 10 , 5 ), plt . show () Output Evaluated loss ( losses.BinaryCrossentropy ) = 0 .0023145806044340134 Evaluated accuracy ( self defined ) = 1 .0 Evaluated accuracy ( metrics.BinaryAccuracy ) = 1 .0 注意我们未对测量的结果阈值化，因此显示出来的测量结果和理想值略有差别，但从图可知，阈值化后则测量结果全部准确。 通过抽取 h.dense1 的参数，我们可以对比 \\mathbf{A} \\mathbf{A} 和 \\mathbf{W} \\mathbf{W} ，以及 \\mathbf{c} \\mathbf{c} 和 \\mathbf{b} \\mathbf{b} ， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 # Check the regressed values W , b = h . dense1 . get_weights () plt . imshow ( A , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'A' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . imshow ( W , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'W' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . plot ( c . T , label = 'c' ) plt . plot ( b . T , label = 'b' ) plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 可以发现，虽然我们训练的分类器十分有效，但其权值和预期的 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 并不完全相同。这是由于sigmoid函数激活的特性，使得当预测值偏向最小或最大的情况下， |\\sigma(x)| \\rightarrow 1 |\\sigma(x)| \\rightarrow 1 ，根据 (7) (7) ，可知其梯度 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 ，因此那些分类结果已经比较确信的样本，其梯度消失，对训练网络的影响忽略不计（这是合理的，因为我们不希望极端样本干扰结果，更希望对分类结果不确切的样本进行训练）。故而，我们虽然可以求解出这个分类问题，但求解到的 \\mathbf{W} \\mathbf{W} , \\mathbf{b} \\mathbf{b} 不会回归到 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 上。关于回归问题，我们会在下一节进一步讨论。","text_tokens":["当然","本章","对比","已知","一部分","导数","\\","之间","一大","shuffle","参照","3663","解","大多数","环节","0466","往往","存储","可选","sum","因子","里","太多","法指","工程","式","定义","实例","之旅","iterator","以下","一个","500","于是","关键","rate","method","残差","写成","略有","「","法","不计","存取","per","initialization","因为","round","重新","相关","entropy","自动","10","就是","故而","；","现有","然而","else","以便","类时","0.46","用单","内置","6957","8627","8377","2795","定法","tf","亦","稳定性","─","8127","标准化","大多","本身","差别","字典","化","调试","21","aligned","lr","多数","true","描述","虽然","向","正整数","0.49","并且","至此","等","平均值","两层","两侧","输出","37","数目","0.38","accuracy","split","以后","称为","6403","手","考虑","通常","基本","如何","自定","10.0","uniform","过多","代表","摘要","压缩成","内存","效果","l3","来自","叫","cls","显式","鉴往知来","一回","行","写法","关注","每轮","载入","知机","第一","目标","randomnormal","每次","0.52","用","analyzing","逻辑","added","介绍","情况","一个二维","extending","熵","展示","*","只是","乘积","0052","才","消","额外","后面","正值","fill","简单","内容","满足","发展","、","to","0.53","更","return","data","e","bool","又","：","coder","时间","开","规定","parser","对于","轴","占用","模块化","parameters","看","9926","范围","提示","文件","of","bias","constant","k","高维","std","数","tool","for","均","非","各","理解","回归","参数","首先","选择","地","序列","请","陆续","临时","0023145806044340134","根据","好处","layer","testing","正则","4492","测试","nn","还是","以","cross","（","三个","未","in","选项","例如","都","最大","标量","samples","equation","rightarrow","max","0.44","用作","决定","axis","23","_","session","适合","备选","想","gca","事实上","init","的","│","我们","单个"," ","许多","每","2","某","4","第二个","平均","这","一类","有","压缩","title","整数","上求","出来","records","module","编写","总","frac","几乎","特别","独立","技巧","一组","经常","9274","rvert","大写字母","蓝线","训练","活用","多个","linclshandle","星号","/","b","简短","通用","类中","目前","相比","exp","视为","红线","仿射变换","range","特殊","传入","尽管","几种","shape","允许","后续","一一","速率","图","通过","忽略不计","人意","11","上面","lvert","construction","确信","插值","性关系","目的","dp","getattribute","其他","可微","ylabel","缩成","一些","st","后","变换","9779","learning","channel","9667","8894","送入","接下来","传播","是因为","先河","连用","func","正确理解","其","extension","反之","以免","layers","梯度","熟悉","16","stroke","24","and","过","存储器","，","单独","讨论","while","不知","不是","flatten","f","staticmethod","忽略","若","说","受过","regression","表示","大化","不同","初始化","从","设计","14","直接","tilde","教程","interpolation","必要","过来","检查","main","更大","s","起来","0.45","角度","kernel","对数","复杂度","凡是","初始","那么","特点","仅","映射","蛇形","知道","6465","等于","增大","dparser","正","infty","意味着","样品","轮","任","该层","保存","&&","交点","auto","指定","initializer","神经网","it","解决","后端","面向","”","每个","比例","迭代","backend","下来","模块","命名","输","j",")","accu","具有","使","助于","单调","自带","文字","import","基本概念","包括","25","空间","斯蒂","用到","改进","plot","第二","控制","we","测试代码","单层","术语","方式","实数","读取","模型","度量","perceptron","可变","表明","方法","对应","完成","0680","sigma","静态方法","符","nearest","step","十分","各组","维","没有","相若","第","evaluate","取值","len","5711","y","前","可读","__","+","none","项目","run","哪","p","外围","模式","做到","小写","特征","组合","将","set","就","级","yield","9985","rgb","不以","双","values","求解","(","集","validation","22","使得","良好","终止","来说","语言","估计","mathbf","由于","44","有限","不足","属性","完全","defined","比照","需要","看待","或","缩进","风格","网络层","感知机","调用","遍历","weights","深度","注释","步数","分布","可用","括号","大致","sample","]","0.61","或者","dense1","即可","回调","设定值","不得","}","孱弱","设定","在","一部","或者说","重","29","可能","平移","大写","二","regularizer","dense","自己","尽如人意","面向对象","端","categoricalcrossentropy","足够","推断","等价","变量","流动","54","给","^","6407","超平面","退化","graph","时才","分类器","出","43","给出","告诉","而言","trainable","准确度","反过来","只","之后","因此","不会","非常","很","关系","¶","代表性","pyplot","指","它们","相同","initializers","用法","器","数组","新","加上","需求","-","停止","代码","单","stystart","分成","callbacks","内部","9981","└","指数","并非","0.4","0.01","去","格式","0.58","5884","0.0","2ms","一定","分别","。","意味","对","颜色","record","subplots","希望","45","类级","把","构造","get","整个","外部","用户","尽如","9","列","15","设置","感知","astype","adamoptimizer","一般","非线性","得到","合理","继承","是否","较为简单","最小化","首字","定性","功能","下图","应用","这是","测量","了","网络结构","已经","互不","思源","信度","快速","还会","反","construct","最","须知","不能","短接","同时","tools","层","反过来说","属于","其中","0055","合适","41","能","semilogy","w","单单","固定",",","添加","greater","比较简单","一维","6789","数据","且","更新","history","where","38","你","要","steppe","结果","未知","私有","0.59","l2","mode","与","齐次","d","权值","拟合","linspace","这里","一节","scale","混洗","按照","神经网络","连接","采样","上","好","存在","labels","print","configuration","求导","理想","logistic","输入","一个多","4671","零维","包含","gcf","本","不断","确切","之前","mapsto","宏","默认值","元素","推导","进度条","数据测试","被","撰写","losses","9418","这个","子类","53","100","sequential","性","50","主要","the","yp","阈值","call","26","8","缩小","必须","准确","c++","找到","27","仍然",">","val","详情","步","39","神髓","方案","顺序","generator","mathbb","equal","让","写字","mathrm","if","1624","计算","事实","相反","引入","一轮","返回","元组","经历","不可","generate","视","但","早期","random","图像","性能","跟","是","组","weight","结果显示","our","卷积","用来","use","日志","符合","不","通道","功夫","target","12","加权","length","adam","numpy","同一","<","以双","时","人","对角线","开始","epochs","总是","编译","区别","文档","由此可知","损失","简简单单","完善","噪声","另外","有用","一行","input","假设","则","这组","33","来","18","有趣","training","keras","那些","leqslant","size","问题","比较","用于","from","注意","某些","两组","线性变换","最小","和","稳定","dtype","分入","error","默认","均匀","t","过程","大小写","规范","tensor","显示","log","0.1","封装","轮次","整理","其实","节","学习","pass","任意","参见","解析","value","分出","regressed","config","左右","api","legend","类型","预处理","办法","世代","matplotlib","一个点","相斥","1e","定义数据","~","调整","28","面向用户","dim1","而是","如下","iter","约束","flag",":","9546","于","件夹","自定义","beta","不成文","无","x","├","{","指标","器中","次","入","给定","实际","说明","另","不成","partial","normal","c","最大化","right","activation","theta","实现","下划","后来","成器","代入","放在","36","比如","这种","省略","只要","代替","一","17","）","cdots","检查点","只有","记","二个","def","sigmoid","=","首字母","13","但类","ax1","mathcal","按","彼此","饮水思源","kwargs","信息","fae6a9","第一个","姑且","a","#","加","有关","np","实战","testdataset","结构","理器","偏置","浮动","向量","下","似然","化后","weighted","name","取","1s","无关","left","9986","sim","所","变为","集类","引用","更好","原则","alphabeta","网络","特性","这一","应该","查点","override","一层","一样","处理","布尔","32","一步","创建","7","概念","消失","路径","可信","0049","begin","pairs","全",".","数据分布","仿射","采取","中","diter","0.54","保留","标准","除了","可见","认为","3ms","项","形状","31","预测","pred","不再","ed","？","single","预测值","产生","一条","适当","期间","fit","意义","结束","bmatrix","返回值","由","神经","同","以单","上述","接下","全部","0.6","3","表述","测度","35","三维","false","即","进一步","46","除以","负值","程度","最早","label","...","activity","驼峰","每组","习惯","无定法","0.56","了解","构建","0.57","应当","主","aspect","matmul","线性关系","文件夹","分类","读者","类似","愿","建议","以外","馈送","线性组合","形式","权重","verbose","花费","metrics","实际上","影响","作为","0.42","inches","跨层","end","全字","运用","单词","epoch","复杂","controlling","进行","含义","python","fixed","含","安静","求取","define","优化","42","启发","常数","生成器","0.47","vdots","train","激活","next","使用","optimizer","class","可读性","test","无法","cdot","还","可知","开头","推断出","随着","plt","但是","建立","self","0059","transformation","神经元","7519","干扰","向用","linear","对角","概率","看作","initial","层叠","矩阵","」","5","mean","大量","称","组织","最后","声明","可以","无效","确保","处理器","一词","出原","loss","做","划线","获得","部分","乃至","1","l1","构成","走上","19","的话","扰动","分析","i","较长","codes","49","静态","9861","支持","|","'","ldots","非常简单","写出","乃是","结尾","指全","任何","number","索引","model","0.5","误差","30","然后","40","完全相同","由此","6","关键字","20","有助","布尔值","&","验证","列表","再","引出","之","int32","network","个","processing","块","为","varepsilon","函数","如果","统一","均值","constraint","py","binary","而","dim2","正确","两","steps","分离","理论","上手","概率论","ij","测试方法","tensorflow","传递","这些","xlabel","恢复","发现","确定","真实","较强","您","group","0.48","人为","成文","52","ba9132","张量","原则上","ax2","测试函数","binarycrossentropy","post","@","它","当","样本","只能","多用","尺寸","直线","值","采用","馈入","区分","一侧","均匀分布","记录","project","要求","也","store","类","jacobian","hat","l","组拆","float32","随机","以及","alpha","会","每种","boldsymbol","生成","哪怕","中将","像","极端","并","r","喜好","点","为了","output","还有","参量","操作","predicted","dataset","9971","覆盖","堆叠","进度","7101","“","results","colorbar","predict","对象","占位","samp","51","无定","批次","dimn","既然","截距","n","成","as","48","initialize","扩展","内","noise","h","34","下划线","改写","lin","导入","浮点","这样","评估","遵守","多","提供","所有","本节","br","反过","show","大小","0","arg","认识","官方","evaluated","各个","align","作用","重写","二维","场合","数量","交叉","配置","有助于","各自","慢慢","子","字母","imshow","抽取","可信度","classdef","batch","偏向","维度","0.51","binaryaccuracy","饮水","较为","集中","0128","到","vector","线性","预期","47","9066","操作符","3005","该","却","调整结构","平面","最终","tensors","详情请","过程中将","推荐","图示",";","limits","min","stddev","alphabetafunction","接触","关于","指各维","前要","[","compile","次数","add","入门","看成","时候","两个","function","构造方法","check","实验","有效","灵活"],"title":"线性分类","title_tokens":["线性","分类"]},{"location":"book-1-x/chapter-1/linear-classification/#_1","text":"摘要 本节介绍如何使用顺序模型(sequential model)来编写一个线性分类器，使用sigmoid函数激活，并验证其效果。在本节我们将编写第一个Project，并介绍一些基本概念、和一个推荐的Tensorflow Project的编写格式。","text_tokens":["概念","在","sigmoid","将","和","一个","来","project","验证","格式","，","激活","基本","使用","分类","第一","如何","的","编写","基本概念","。","分类器",")","model","(","推荐","我们","其","一些","sequential"," ","模型","本节","、","第一个","并","摘要","tensorflow","本","效果","介绍","线性","节","函数","顺序"],"title":"线性分类","title_tokens":["线性","分类"]},{"location":"book-1-x/chapter-1/linear-classification/#_2","text":"","text_tokens":[],"title":"理论","title_tokens":["理论"]},{"location":"book-1-x/chapter-1/linear-classification/#_3","text":"考虑我们有如下的二分类数据集 (\\mathbf{x},~y_i) \\in \\mathbb{D}_i (\\mathbf{x},~y_i) \\in \\mathbb{D}_i ，并且有一个未知的常数向量 \\mathbf{a}_i \\mathbf{a}_i 和未知的常数标量 c_i c_i ，使得： \\begin{equation} y_i = \\left\\{ \\begin{aligned} 0, && \\mathbf{a}_i^T \\mathbf{x} + c_i \\leqslant 0, \\\\ 1, && \\mathbf{a}_i^T \\mathbf{x} + c_i > 0. \\end{aligned} \\right. \\end{equation} 其中， \\mathbf{a} \\mathbf{a} 可以看成是某超平面的（未标准化的）法向量，那么 \\mathbf{a}^T \\mathbf{x} + c = 0 \\mathbf{a}^T \\mathbf{x} + c = 0 是该超平面的截距式定义，亦即该平面与 x_i x_i 轴的交点可以显式表述为 x_i^{(0)} = - \\frac{c}{a_i} x_i^{(0)} = - \\frac{c}{a_i} 。由此可知，式 (1) (1) 显式定义了一个点在超平面的哪一侧。特别地，若 \\mathbf{x} \\mathbf{x} 是一个二维向量，则该超平面退化为一维平面；若 \\mathbf{x} \\mathbf{x} 是一个标量，则该超平面退化为一条直线。 若我们定义 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} ，有 \\begin{equation} \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix}, ~~ \\mathbf{A} = \\begin{bmatrix} \\mathbf{a}^T_1 \\\\ \\mathbf{a}^T_2 \\\\ \\vdots \\\\ \\mathbf{a}^T_n \\end{bmatrix}, ~~ \\mathbf{c} = \\begin{bmatrix} c_1 \\\\ c_2 \\\\ \\vdots \\\\ c_n \\end{bmatrix}. \\end{equation} 则我们可以认为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 其中 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 是一个定义噪声的向量。 我们可以把向量 \\mathbf{y} \\mathbf{y} 的元素看成是互不相关的多个超平面对向量 \\mathbf{x} \\mathbf{x} 各自独立的分类结果。即 y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} 。由于每个超平面构成一个二分类，如果把每个二分类看作是向量是否属于这个类的测度，那么 \\mathbf{y} \\mathbf{y} 可以被看作是一个多分类的结果，尽管向量 \\mathbf{x} \\mathbf{x} 可能被同时分入多个类中。 假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 来（亦即是否属于该分类）。 须知 请注意我们在这里说到“线性分类器”，虽然使用“线性”一词，但准确来说，这是一个仿射变换。因为线性变换要求有齐次性，即 f(x) = \\alpha f(x) f(x) = \\alpha f(x) ，但仿射变换允许我们引入一个平移向量 \\mathbf{b} \\mathbf{b} 。当然，我们的求解的线性问题本身也是一个仿射变换。 在这个问题里，我们虽然不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，但我们知道由 (3) (3) 确定的线性关系，因此，我们可以随机生成一组 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，构建线性模型： \\begin{align} \\tilde{\\mathbf{y}} = \\sigma ( \\mathbf{W} \\mathbf{x} + \\mathbf{b} ). \\end{align} 其中，可微函数 \\sigma \\sigma 是一个将实数空间 \\mathbb{R}^n \\mathbb{R}^n 映射到有限范围的实数空间 [0,~1]^n [0,~1]^n 内的函数。特别地， \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 。因此，可以将 \\sigma \\sigma 看作是二分类布尔函数的插值函数。理论上，只要我们找到 \\mathbf{W}=\\mathbf{A} \\mathbf{W}=\\mathbf{A} ， \\mathbf{b}=\\mathbf{c} \\mathbf{b}=\\mathbf{c} ，则该线性分类器可以直接拟合出原分布来。","text_tokens":["当然","tilde","任意","但","k","训练","在","把","3","上","内","表述","\\","是","多个","看作","考虑","基本","测度","b","直接","类中","即","y","地","那么","向量","可能","下","大量","平移","请","+","理论","一个点","符合","~","一个多","不","仿射变换","映射","哪","二","可以","知道","是否","0","尽管","里","如下","允许","一词","式","定义","确定","align","特征","推断","显式","left","（","未","构建","将","一个","元素","这是","in","二维","出原","infty","了","被","线性关系","互不","^","插值","分类","各自","标量","性关系","超平面","退化","这个","equation","分类器","可微","法","求解","x","(","由此可知","集","&&","交点","当","样本","{","变换","性","须知","因为","使得","1","噪声","_","构成","因此","相关","同时","到","直线","布尔","假设","线性","给定","情况","关系","一个二维","来说","；","一侧","mathbf","”","每个","属于","end","i","其中","则","由于","有限","来","也","要求","该","类","c","|","begin","hat","准确","right","leqslant",".","平面","找到","的","新","能","数据分布","仿射","w","-",")","随机",">","alpha","我们",",","boldsymbol","其","生成","0.5"," ","亦","问题","一维","标准化","2","本身","r","某","由此","只要","数据","注意","）","标准","cdots","mathbb","线性变换","认为","空间","=","常数","有","和","aligned","&","结果","未知","分布","vdots","“","与","：","，","分入","齐次","[","d","虽然","使用","t","引入","]","一条","。","拟合","frac","f","特别","对","独立","若","这里","轴","并且","说","函数","实数","模型","bmatrix","看成","时候","范围","一组","对应","由","截距","n","}","为","可知","sigma","推断出","varepsilon","a","如果"],"title":"问题描述","title_tokens":["描述","问题"]},{"location":"book-1-x/chapter-1/linear-classification/#_4","text":"我们将 (4) (4) 定义的线性模型称为 单层感知机 (Single-layer perceptron) 模型。它包含一个权重矩阵 \\mathbf{W} \\mathbf{W} 和一个偏置矩阵 \\mathbf{b} \\mathbf{b} 。事实上，可以将 (4) (4) 改写成如下形式 \\begin{align} \\tilde{\\mathbf{y}} = \\sigma \\left( \\begin{bmatrix} \\mathbf{W} & \\mathbf{b} \\end{bmatrix} \\begin{bmatrix} \\mathbf{x} \\\\ 1 \\end{bmatrix} \\right). \\end{align} 可见偏置本身可以看成是输入向量多了一个常数元素的等价模型。 感知机是最早的神经网络形式，它非常孱弱，只能解线性问题，但却为神经网络后来的发展开了先河。在单层感知机里，我们视输入向量 \\mathbf{x} \\mathbf{x} 的每个元素为一个“神经元”，矩阵 \\mathbf{W} \\mathbf{W} 和偏置 \\mathbf{b} \\mathbf{b} 将我们的输入映射到输出层 \\mathbf{y} \\mathbf{y} ，输出层的每个元素也视为一个神经元。在这个过程中， W_{ij} W_{ij} 作为 i i 行 j j 列的元素，代表了连接两个神经元的权重。我们用红线代表正值，蓝线代表负值，感知机可以被图示为 线性感知机的输出也是输入的线性组合，但我们可以添加激活函数，即 \\sigma(\\cdot) \\sigma(\\cdot) 将其映射到非线性空间。这要求我们添加的激活函数是一个非线性函数。 事实上，将单层感知机层叠，前一层的输出作为后一层的输入，就构建出早期的神经网络。这种网络每一层都是全连接的（两个神经元之间总是有权重，尽管值可能为0），每一层都有激活函数。理论上，任意一个两层堆叠的感知机，只要神经元数目足够多，就可以拟合出任意一个非线性函数。然而，实际测试中，这一理论的效果并不尽如人意，因此又有陆续地改进，才有了后来的深度学习。饮水思源，鉴往知来，我们也将从这个简简单单的单层模型开始，走上学习“深度学习”之旅。","text_tokens":["tilde","任意","成","但","神经网络","在","连接","早期","神经元","上","\\","称为","是","之间","改写","偏置","尽如","b","列","层叠","即","矩阵","感知","y","地","向量","前","解","可能","视为","理论","输入","非线性","负值","陆续","ij","多","红线","最早","映射","不","可以","包含","layer","代表","0","尽如人意","尽管","效果","里","如下","足够","测试","定义","align","等价","left","组合","（","人意","行","鉴往知来","将","构建","之旅","一个","元素","就","了","被","知机","都","开始","思源","这个","总是","出","线性组合","网络","这一","x","(","形式","用","权重","后","它","一层","只能","{","简简单单","饮水","1","_","因此","到","值","神经网","非常","线性","作为","实际","走上","层","mathbf","”","每个","然而","end","i","才","也","要求","begin","先河","却","正值","right",".","事实上","全","的","后来","w","-","单单","简单","j",")","图示","中","我们","添加","其"," ","问题","发展","这种","每","本身","感知机","并","只要","4","）","深度","这","可见","空间","=","常数","有","和","&","堆叠","改进","“","又","，","激活","开","事实","single","过程","饮水思源","。","拟合","单层","函数","模型","cdot","两层","bmatrix","perceptron","看成","输出","两个","数目","从","视","}","孱弱","sigma","神经","为","学习","蓝线"],"title":"感知机","title_tokens":["感知机","感知","知机"]},{"location":"book-1-x/chapter-1/linear-classification/#sigmoid","text":"在上述介绍中，我们没有解决的两个问题是， 如何定义插值函数 \\sigma \\sigma ？ 如何找到合适的 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ？ 我们首先讨论第一个问题。一般地，多分类问题中，如果各个分类彼此并非相斥，且不一定要将结果分入任一类的话，我们可以用 Sigmoid 函数来定义 \\sigma \\sigma ，亦即 \\begin{align} \\sigma(\\mathbf{x}) = \\frac{1}{ 1 + e^{-\\mathbf{x}}}. \\end{align} 它同时满足 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 ，且是一个单调函数。以下代码向我们展示了这种函数的特性： Python 1 2 3 4 5 6 7 8 9 10 11 12 import numpy as np import matplotlib.pyplot as plt def test_sigmoid (): x = np . linspace ( - 5 , 5 , 100 ) y = 1 / ( 1 + np . exp ( - x ) ) plt . plot ( x , y ) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () if __name__ == '__main__' : test_sigmoid () Output 使用sigmoid函数的一大好处是，它的导数求解非常简单，很适合用来做神经网络这样一个复杂模型的激活函数。注意虽然 \\sigma(\\mathbf{x}) \\sigma(\\mathbf{x}) 和 \\mathbf{x} \\mathbf{x} 都是向量，这意味着导数是Jacobian矩阵，但由于 \\sigma \\sigma 是一个对 \\mathbf{x} \\mathbf{x} 各元素独立的解析函数，这个Jacobian矩阵实际上是一个对角矩阵，对角线上第j个元素的值为 \\begin{align} \\left. \\frac{ \\partial \\sigma(x) }{ \\partial x } \\right|_{x=x_j} = \\left. - e^{-x} \\left( - \\frac{1}{\\left( 1+e^{-x} \\right)^2} \\right) \\right|_{x=x_j} = - \\sigma(x_j) ( 1 - \\sigma(x_j) ). \\end{align} 可见，该函数的导数和计算函数本身的复杂度相若，可以做到快速求导。","text_tokens":["上述","但","as","神经网络","解析","在","没有","3","np","上","相若","第","导数","是","\\","一大","对角","各","main","9","b","/","如何","首先","即","矩阵","复杂度","求导","y","地","5","用来","向量","exp","__","+","这样","一般","相斥","matplotlib","~","多","不","可以","show","好处","12","0","gcf","name","xlabel","各个","做到","定义","align","numpy",":","left","11","将","set","以下","一个","元素","infty","了","意味着","插值","^","第一","分类","都","对角线","做","快速","这个","特性","网络","求解","x","(","ylabel","任","用","100","它","{","1","实际上","_","同时","介绍","值","神经网","10","非常","很","实际","解决","的话","7","inches","展示","mathbf","8","适合","end","pyplot","由于","来","partial","该","|","begin","'","非常简单","复杂","jacobian","right",".","找到","合适","的","w","-","python","简单",")","j","size","代码","满足","中","我们",",","0.5"," ","亦","问题","单调","这种","2","本身","4","6","且","注意","import","output","并非","这","一类","可见","e","要","def","sigmoid","=","结果","和","plot","：","，","分入","彼此","if","激活","计算","虽然","？","使用","讨论","一定","向","。","frac","linspace","意味","对","独立","test","模型","个","第一个","两个","}","为","sigma","神经","plt","函数","如果"],"title":"Sigmoid函数","title_tokens":["sigmoid","函数"]},{"location":"book-1-x/chapter-1/linear-classification/#_5","text":"接下来，我们需要解决第二个问题，亦即找到 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} 。这一问题通常可以写成反问题的形式： \\begin{align} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} \\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}^{(k)},~ \\sigma ( \\mathbf{W} \\mathbf{x}^{(k)} + \\mathbf{b} ) \\right). \\end{align} 最简单的情况下，我们可以把 损失函数(loss function) 定义为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{align} 我们称 (8) (8) 为 逻辑斯蒂回归(logistic regression) 。有趣的是，虽然这个术语叫“回归”，但它解的其实是个分类问题。但是，既然这是一个分类问题，我们可以不使用这个损失函数，而是从概率论的角度看待这个问题。由此，我们引出一个新的损失函数：“交叉熵”。","text_tokens":["tilde","但是","但","k","接下","把","\\","是","概率","回归","通常","b","角度","即","y","解","下","称","+","logistic","概率论","~","不","可以","sum","arg","而是","定义","叫","align","left","lvert","一个","这是","交叉","loss","^","分类","这个","写成","反","这一","x","(","形式","最","损失","它","{","1","逻辑","_","情况","解决","熵","mathbf","8","”","end","接下来","begin","有趣","l","下来","right",".","找到","的","新","w","-","简单",")","需要","我们",",","看待"," ","亦","问题","limits","min","2","由此","第二个","二个","=","斯蒂","mathcal","“","第二","：","，","虽然","使用","引出","。","术语","regression","个","function","既然","从","n","}","其实","为","sigma","rvert","函数"],"title":"求解问题","title_tokens":["求解","问题"]},{"location":"book-1-x/chapter-1/linear-classification/#_6","text":"我们视sigmoid函数输出的值为一个概率，表示分类器对预测结果的确信程度，记 \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} ，则 \\begin{equation} \\begin{aligned} \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}), \\\\ \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) &= 1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}). \\end{aligned} \\end{equation} 注意这里的概率向量的含义是，其中第i个元素表明第i个超平面分类结果的 确信程度 。 然而，这个概率只是分类器对分类结果的确信程度，却并非是分类准确度的概率，实际上，分类 准确度 的概率，应当表述为 \\begin{equation} \\begin{aligned} \\mathbf{p}(\\mathbf{y}|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta})^{1-\\mathbf{y}}\\\\ &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\left(1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}) \\right)^{1-\\mathbf{y}}. \\end{aligned} \\end{equation} 注意 这里 \\mathbf{x}^{\\mathbf{y}} \\mathbf{x}^{\\mathbf{y}} 表示的是对每个元素一一求取指数，即函数第i个元素的返回值应当为 {x_i}^{y_i} {x_i}^{y_i} 。 我们使用真实值 \\mathbf{y} \\mathbf{y} 作为指数给概率向量加权。当 \\mathbf{y}=1 \\mathbf{y}=1 时，乘积项的第二个因子消去，该函数退化为以预测值为1的可信度 \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) ；反之则第一个因子消去，退化为以预测值为0的可信度 \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) 。这就是最大似然估计方法。至此，我们可以写出似然估计函数 \\begin{align} L(\\boldsymbol{\\Theta}) = \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}). \\end{align} 对似然估计函数取对数，则有 \\begin{equation} \\begin{aligned} l(\\boldsymbol{\\Theta}) &= \\sum_{k=1}^N \\log \\left( \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}) \\right) \\\\ &= \\sum_{k=1}^N \\mathbf{y}^{(k)} \\cdot \\log\\left(\\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right) + \\left(1 - \\mathbf{y}^{(k)} \\right) \\cdot \\log\\left(1 - \\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right). \\end{aligned} \\end{equation} 我们最终的目的是要最大化似然函数，亦即 \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) ，这等价于最小化 -l(\\boldsymbol{\\Theta}) -l(\\boldsymbol{\\Theta}) 。对比 (8) (8) 和 (9) (9) ，于是我们可以定义交叉熵为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = - \\mathrm{mean}\\left[ \\mathbf{y} \\cdot \\log\\left( \\tilde{\\mathbf{y}} \\right) + \\left(1 - \\mathbf{y} \\right) \\cdot \\log\\left(1 - \\tilde{\\mathbf{y}} \\right) \\right]. \\end{align} 注意这里我们使用 \\mathrm{mean}\\left[ \\cdot \\right] \\mathrm{mean}\\left[ \\cdot \\right] 表示求取一个向量所有元素的平均值。实际上，Tensorflow允许我们定义损失函数的输出为一个和输出向量维度相同的向量，Tensorflow自带的交叉熵也是这样定义的。实际应用时，Tensorflow会自动在向量维度上求均值，并压缩成上述 (14) (14) 的形式。 若我们记 \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) ，代入sigmoid函数，为了确保该损失函数的稳定性，我们可以将 (14) (14) 整理为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{x}} \\right) = \\mathrm{mean}\\left[ \\max(\\tilde{\\mathbf{x}}, \\mathbf{0}) - \\tilde{\\mathbf{x}} \\cdot \\mathbf{y} + \\log\\left(1 + e^{-|\\tilde{\\mathbf{x}}|} \\right) \\right]. \\end{align} 提示 这里交叉熵整理的推导过程参见 Tensorflow-API官方文档 。 实际情况下，我们使用 (15) (15) 来求取sigmoid函数激活下的交叉熵。","text_tokens":["tilde","上述","k","参见","对比","在","均值","第","表述","\\","是","概率","9","b","15","即","对数","api","y","mean","向量","下","+","这样","似然","程度","~","所有","p","可以","sum","因子","加权","0","tensorflow","压缩成","arg","最小化","定性","确保","官方","允许","取","一一","以","定义","真实","align","应用","等价","left","于","将","一个","元素","应当","in","推导","确信","给","时","交叉","于是","^","第一","分类","最大","信度","超平面","目的","退化","这个","分类器","equation","可信度","x","(","形式","缩成","文档","max","损失","维度","当","{","准确度","1","实际上","_","值","自动","作为","实际","就是","情况","；","熵","估计","mathbf","8","然而","每个","只是","end","i","则","其中","乘积","消","可信","来","也","该","相同","|","begin","最大化","l","却","准确","写出","right",".","theta","平面","的","含义","最终","w","-","代入",")","会","我们",",","boldsymbol",";"," ","亦","limits","稳定性","求取","自带","反之","并","第二个","平均","为了","注意","指数","并非","这","最小","e","要","记","二个","sigmoid","=","有","项","结果","aligned","&","和","mathrm","mathcal","压缩","去","预测","第二","稳定","，","[","上求","激活","使用","预测值","过程","]","返回","。","对","这里","若","至此","平均值","表示","log","cdot","个","输出","第一个","提示","表明","返回值","方法","大化","整理","视","}","n","为","sigma","14","函数"],"title":"交叉熵","title_tokens":["交叉","熵"]},{"location":"book-1-x/chapter-1/linear-classification/#_7","text":"接下来，我们将开始实战上手，编写我们的第一个Project。虽然一个Project的格式并无定法，每个人按照自己的喜好会选择不同的风格，但一个从无受过训练的人，往往写出的Project几乎完全不具有可读性。实际上，学习任何语言， 变量命名规范 、 缩进规范 以及 模块化 、 面向对象 等都被认为是编写一个具有可读性的代码所不得不知的概念。本教程所推荐的代码格式，均具有统一的风格，读者在了解每个Project和其对应的教程时，会慢慢熟悉这种风格的特点。愿读者能从这样的风格中得到启发，得到 代码可读性 的神髓。","text_tokens":["但","接下","教程","训练","统一","在","上","实战","是","均","手","选择","可读","特点","这样","得到","往往","不","自己","面向对象","本","无定法","了解","变量","将","所","一个","被","时","人","第一","都","读者","开始","慢慢","愿","无","实际上","实际","语言","面向","概念","每个","project","接下来","写出","完全","下来","的","模块","能","命名","定法","任何","代码","具有","推荐","以及","会","中","我们","其"," ","缩进","风格","、","这种","并","神髓","喜好","熟悉","启发","认为","和","格式","，","虽然","不知","编写","。","对象","规范","几乎","可读性","受过","无定","等","模块化","第一个","按照","不得","对应","不同","从","学习"],"title":"解线性多分类问题","title_tokens":["解","分类","多","线性","问题"]},{"location":"book-1-x/chapter-1/linear-classification/#_8","text":"建立一个具有较强可读性的Tensorflow工程需要我们活用python的模块化设计。我们通常推荐以下的结构 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 撰写各个模块时，建议使用类封装各组功能相同的函数。具有良好使用习惯的coder应当注意给各个面向用户的类、函数撰写（哪怕简短的）说明文字，在一些较长的函数、方法的定义中，适当注释各部分的功能，以便读者能正确理解代码意义。 另外，在对象命名上，python有如下必须遵守或不成文的规定，和C/C++用户熟悉的蛇形命名法不同，它大致包括 类与函数多用驼峰命名法，变量可以采用驼峰或蛇形命名法。 驼峰命名法指的是用大小写区分每个单词块，例如 alphaBetaFunction () ； 蛇形命名法指的是用下划线区分每个单词块，例如 alpha_beta_function = 10 ； 宏变量使用全字大写+蛇形命名法 函数/方法，还有模块均是首字母小写，但类的首字母大写。 用单下划线 _ 表示临时存储器，或省略参数，例如一个函数 func () 有两个返回值时，可以用 _ , b = func () 表示我们只需要第二个返回值；单下划线还可以与星号连用省略多个返回值； 以单下划线开头的方法，表示模块级的私有方法，在模块以外使用 import 导入类时，不会导入这些方法，例如 def _alphaBeta ( self ): ； 以单下划线结尾的对象，用来和python的关键字区分，例如 func ( x , class_ ) ; 以双下划线开头的方法，如果不以双下划线结尾，则表示类级的私有方法，只有类内部的方法能调用这些方法，在类外部、包括继承的子类里都原则上不能调用（但其实也有办法调用），例如 def _alphaBeta ( self ): ； 以双下划线同时开头和结尾的方法，一般是用来 重写 (override) 特殊功能，例如 def __getattribute__ (): 将重写获得类属性的方法。","text_tokens":["但","建立","各组","self","类级","在","有关","跟","扩展","上","tool","活用","py","for","向用","是","均","各","理解","多个","结构","下划线","main","理器","外部","用户","参数","星号","通常","/","简短","b","our","正确","自定","预处理","导入","可读","用来","分离","办法","__","+","一般","遵守","临时","大写","存储","调整","继承","蛇形","可以","...","特殊","外围","面向用户","驼峰","大小","tensorflow","里","首字","如下","这些","法指","工程","功能","处理器","各个","习惯","定义","小写",":","无关","件夹","变量","较强","（","三个","宏","将","以下","一个","dparser","应当","重写","主","以双","成文","自定义","beta","给","级","时","例如","文件夹","引用","原则上","以单","撰写","读者","都","关键","不以","原则","子","建议","字母","以外","alphabeta","getattribute","不成文","双","其他","划线","网络","获得","法","x","(","部分","post","子类","用","保存","一些","├","如果","它","多用","override","the","analyzing","只","处理","另外","不能","_","不会","良好","同时","tools","采用","说明","情况","10","区分","extending","；","面向","每个","分析","送入","较长","其中","以便","必须","全字","则","codes","单词","操作符","不成","类时","也","store","相同","类","c","用单","属性","连用","调整结构",".","c++","的","模块","能","下划","命名","│","结尾","-","python",")","内容","正确理解","model","具有","推荐","代码","需要","放在","我们","中","生成","或","alpha",",","哪怕"," ","单",";","网络层","─","、","extension","并","省略","define","内部","第二个","数据","关键字","alphabetafunction","data","文字","调用","└","注意","import","）","熟悉","where","除了","还有","注释","操作","包括","只有","二个","def","=","首字母","有","但类","and","和","私有","存储器","第二","与","func","，","coder","records","大致","we","module","单独","使用","规定","返回","。","适当","parser","对象","大小写","class","这里","可读性","读取","模块化","表示","模型","意义","封装","function","两个","processing","文件","方法","不同","返回值","设计","视","还","块","其实","开头","灵活","函数","#"],"title":"代码规范","title_tokens":["代码","规范"]},{"location":"book-1-x/chapter-1/linear-classification/#tensorflow","text":"在Tensorflow中，我们把变量都称为“ 张量 (Tensor) ”。这是因为我们有零维的标量，一维的向量，二维的矩阵，更高维的我们都称为张量。作为一个更大的概念，张量当然也可以用来包括标量、向量和矩阵了。在Tensorflow中，有的张量是 可以训练 (trainable) 的，有的则不是。比如一个张量的形状（指各维大小），当然可以是一个 < tf . Tensor 'Shape:0' shape = ( 1 ,) dtype = int32 > 类型的张量，但它不是变量，当然就不可训练。我们也可以人为控制某些张量可以训练或不可以训练，但本节、乃至本章所介绍的凡是我们接触到的张量，都是可以训练的。 特别地，对于神经网络而言，在网络内计算（或者说流动、传播）的一个n维数据，通常按照以下形式组织： tensor [ batch , dim1 , dim2 , ... , dimn , channel ] 其中，第一个维度 batch 一定存在，它表示的是单个batch中的某一个样本。如果一个batch只有一个样本，那么 batch 只能取0。 从 dim1 到 dimn 指的是实际的n维数据的各个维度； channel 指的是数据的通道，例如，一个二维RGB图像，每种颜色代表一个通道，因此有三个通道。 channel 通常用在卷积网络里，我们经常需要在深度卷积网络里不断增大通道数的同时，缩小数据尺寸。 在某些特殊情况下， channel 维度可以不存在，例如我们使用的是全连接层而不是卷积网络， tf.keras.layer.Flatten 可以用来将一个有通道的张量压缩成一个没有通道的一维向量（但是注意 batch 维度仍然存在，不会被压缩）。 因此，我们知道一个n维的数据，在神经网络中通常被描述为一个n+2维的矩阵，而一个一维向量，在卷积网络里是三维的： vector [ batch , length , channel ] 但是在全连接网络里，是二维的： vector [ batch , channel ] 在本节，乃至本章里，我们还不讨论卷积网络，因此我们都是使用二维张量（一维向量组）作为我们的数据。","text_tokens":["当然","但是","但","本章","神经网络","维","训练","在","连接","高维","图像","没有","把","数","内","是","称为","存在","更大","或者说","组","通常","而","三维","dim2","矩阵","凡是","类型","地","卷积","那么","向量","用来","下","+","不","组织","可以","本节","...","通道","零维","特殊","知道","大小","dim1","0","tensorflow","代表","layer","压缩成","里","不断","shape","length","取","各个",":","变量","增大","流动","（","三个","所","<","以下","将","一个","就","二维","人为","了","被","张量","例如","rgb","第一","都","标量","网络","(","形式","用","缩成","batch","乃至","而言","trainable","维度","它","样本","只能","因为","1","因此","不会","到","同时","介绍","尺寸","神经网","作为","channel","实际","情况","vector","一个二维","层","；","概念","”","缩小","则","其中","指","也","'","传播","是因为","keras","全",".","的",")","仍然","中",">","每种","我们",",","tf","或","单个","需要"," ","一维","比如","、","2","某","更","数据","注意","某些","）","深度","这","包括","接触","只有","=","有","和","指各维","形状","压缩","“","控制","dtype","：","，","[","描述","计算","使用","一定","讨论","不是","]","flatten","。","对于","特别","tensor","或者","颜色","int32","表示","不可","dimn","第一个","按照","经常","还","从","n","为","神经","如果"],"title":"Tensorflow的数据概念","title_tokens":["的","数据","tensorflow","概念"]},{"location":"book-1-x/chapter-1/linear-classification/#_9","text":"在本项目里，我们不需要扩展Tensorflow。但是，我们需要以随机生成数据代替数据集。因此，首先，通过以下代码定义数据生成器 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class TestDataSet : ''' A generator of the data set for testing the linear model. ''' def __init__ ( self , scale_x , A , c ): ''' Initialize the data generator. scale_x: the scale of input vector. A, c: the linear transformation. ''' self . s_x = 2 * scale_x self . A = A self . c = c self . len_x = A . shape [ 0 ] self . config () def config ( self , train = True , batch = 100 , noise = 0.1 ): ''' Configuration train: a flag for controlling the iterator mode. batch: the number of samples in a batch noise: std. of the error added to the y. ''' self . train = bool ( train ) self . batch = batch self . noise = noise def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) y = np . greater ( y , 0.0 ) . astype ( np . float32 ) return x , y def next_test ( self ): ''' Get the next test batch x. ''' return self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) def __iter__ ( self ): while True : samp = self . __next__ () yield samp def __next__ ( self ): if self . train : return self . next_train () else : return self . next_test () 该生成器输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。这种数据集写法我们在后面还会用到， model . fit 允许我们不是馈入样本（或样本批次），而是馈入一个 生成器(generator) 。因此我们重写了 __iter__ 方法，并使其通过 yield 返回一个生成器。这样我们定义的数据集类就可以被Keras的训练函数 model . fit 使用。接下来，调用如下测试代码： dparser.py 1 2 3 4 5 6 7 8 9 10 def test_dataset (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) c = np . random . uniform ( 1 , 3 , [ 1 , 6 ]) dataSet = TestDataSet ( 10 , A , c ) dIter = iter ( dataSet ) for i in range ( 10 ): x , y = next ( dIter ) print ( np . sum ( y , axis = 0 ) / 100 ) test_dataset () Output [ 0.47 0.57 0.58 0.56 0.5 0.38 ] [ 0.6 0.61 0.47 0.48 0.38 0.52 ] [ 0.5 0.61 0.49 0.42 0.45 0.53 ] [ 0.59 0.52 0.44 0.44 0.49 0.51 ] [ 0.54 0.59 0.48 0.5 0.51 0.47 ] [ 0.49 0.57 0.56 0.49 0.53 0.4 ] [ 0.5 0.61 0.51 0.54 0.51 0.52 ] [ 0.5 0.51 0.61 0.5 0.44 0.5 ] [ 0.44 0.46 0.53 0.45 0.56 0.52 ] [ 0.52 0.46 0.51 0.52 0.49 0.44 ] 我们随机生成了 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的数据，每组数据100个，并且测试了10组。输出结果是各组测试中， \\mathbf{y} \\mathbf{y} 在对应维度上分类为1的概率估计。结果基本都在0.5左右，说明我们的这种数据生成模式产生的点能均匀分布在各个超平面两侧，适合进行后续测试。","text_tokens":["45","但是","self","各组","接下","训练","在","48","transformation","random","std","0.6","3","initialize","扩展","noise","np","py","for","linear","34","testdataset","\\","是","len","get","概率","print","s","config","configuration","9","35","/","0.45","15","组","基本","左右","首先","29","y","46","5","中","__","astype","+","这样","输入","1e","项目","定义数据","~","不","range","可以","sum","28","uniform","每组","12","0","tensorflow","本","里","而是","testing","如下","模式","shape","iter","测试","允许","后续","各个","以","flag","定义","通过","0.56",":","mapsto","（","11","iterator","set","以下","写法","dparser","一个","就","in","重写","0.57","集类","54","0.48","了","matmul","52","被","配置","yield","^","分类","都","samples","超平面","还会","method","43","x","(","0.52","53","batch","集","100","0.44","维度","50","0.51","样本","22","the","{","axis","之后","1","23","因此","_","added","相关","input","26","32","10","vector","馈入","0.42","上","说明","19","7","*","估计","8","mathbf","适合","47","else","i","49","44","均匀分布","33","后面","normal","该","18","0.46","接下来","c","'","迭代","器","keras","下来",".","init","controlling","float32","27","41","的","平面","能","进行","-","成器","随机",")","number","size","代码","model","使",">","需要","以及","我们",",","生成","0.5","36","greater","或"," ","30","其","diter","40","这种","2","39","to","并","0.53","r","4","调用","数据","代替","6","data","return","0.54","点","42","17","）","16","output","38","generator","mathbb","20","0.4","25","21","24","def","=","dataset","生成器","13","结果","分布","用到","0.47","0.59","train","31","bool","mode","：","true","，","[","if","error","0.58","均匀","next","0.0","使用","产生","测试代码","while","]","不是","返回","。","class","0.61","samp","fit","test","0.49","51","并且","函数","批次","scale","0.1","两侧","个","输出","37","一组","方法","对应","}","14","为","of","0.38","a"],"title":"数据生成","title_tokens":["生成","数据"]},{"location":"book-1-x/chapter-1/linear-classification/#_10","text":"顺序 (sequential) 模型是一个单输入单输出模型，网络结构较为简单，也不存在跨层短接（残差连接）。在大多数情况下，已经上手的Tensorflow用户不使用这个模型，故而作为我们入门的第一个project，我们姑且用之，但我们将不再使用顺序模型来实现后续的project。一个顺序模型大致可以描述为下图的模式： graph LR st(输<br/>入) --> l1[层<br/>1] l1 --> l2[层<br/>2] l2 --> l3[层<br/>3] l3 --> ldots[层<br/>...] ldots --> ed(输<br/>出) classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,ed styStart 由于我们完成的是一个线性分类器，故而我们使用单层的序列模型即可。 接下来，我们来定义一个类， class LinClsHandle : 。定义一个类的时候，我们通常需要定义的内容包括 在初始化方法 __init__ 里定义传入网络的固定参数，例如学习速率，存取路径等； 在方法 construct 里定义网络的构造和使用的优化器； 在方法 train 里定义训练网络的过程，主要需要调用 model . fit 。如果我们在数据集的定义非常完善，则这一环节不需要花费太多的功夫； 在方法 test 里定义测试网络的过程，主要需要调用 model . evaluate 。如果有必要，可以通过 model . predict 返回测试结果。","text_tokens":["但","接下","训练","在","连接","必要","3","是","构造","存在","evaluate","linclshandle","结构","用户","参数","通常","/","初始","序列","下","__","大多数","上手","输入","环节","不","可以","br","...","功夫","较为简单","传入","tensorflow","里","模式","太多","测试","l3","后续","下图","速率","定义","通过",":","（","将","<","一个","网络结构","已经","ba9132","例如","第一","分类","graph","残差","这个","分类器","出","网络","(","classdef","construct","用","sequential","st","存取","集","如果","主要","花费","完善","较为","1","l1","短接","入","作为","线性","情况","非常","故而","层","；","跨层","则","路径","由于","来","也","project","接下来","类","ldots","器","下来",".","fill","init","实现","的","输","-","简单",")","固定","内容","model",">","需要","我们","单",",","stystart",";"," ","大多","2","调用","数据","一","优化","）","顺序","这","stroke","包括","有","和","结果","lr","多数","train","l2","：","，","描述","不再","大致","[","ed","使用","过程","之","]","predict","返回","。","class","fit","test","单层","入门","等","即可","模型","fae6a9","输出","时候","第一个","完成","方法","初始化","为","姑且","学习","#"],"title":"定义线性顺序模型","title_tokens":["线性","定义","模型","顺序"]},{"location":"book-1-x/chapter-1/linear-classification/#_11","text":"首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe 由于目前我们的project还非常简单，这里只需要有学习速率( learning_rate )，轮次数( epoch )和每轮迭代次数( steppe )即可。","text_tokens":["self","3","py","for","linclshandle","9","目前","首先","lin","初始","5","steps","__","速率","定义","cls",":","每轮","epochs","rate","轮","(","per","initialization","the","只","1","_","learning","非常","10","7","8","epoch","由于","project","'","training","迭代","非常简单",".","init","的","-","简单",")","fixed","需要",",","我们"," ","30","2","4","6","def","=","0.01","steppe","有","and","和","lr","：","，","optimizer","次数","。","class","这里","即可","parameters","方法","初始化","还","学习","pass"],"title":"初始化方法","title_tokens":["初始","方法","初始化"]},{"location":"book-1-x/chapter-1/linear-classification/#_12","text":"接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction self . model = tf . keras . Sequential () self . dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , input_shape = ( INPUT_SHAPE ,), kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = tf . nn . sigmoid ) self . model . add ( self . dense1 ) # Set optimizer self . model . compile ( optimizer = tf . train . AdamOptimizer ( self . lr ), loss = tf . keras . losses . BinaryCrossentropy (), metrics = [ self . accuracy , tf . keras . metrics . BinaryAccuracy ()] ) @staticmethod def accuracy ( y_true , y_pred ): return tf . keras . backend . mean ( tf . keras . backend . equal ( y_true , tf . keras . backend . round ( y_pred ))) 须知 这里 LABEL_SHAPE 和 INPUT_SHAPE 为两个宏变量，分别为输出和输入的向量维度。 我们使用 Dense 定义全连接层，它的用法请参照 这里 。由于我们已经知道 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 可能的取值范围，这里我们重定义了 \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的初始化方式。 信息: Dense API tf . keras . layers . Dense ( shape , ** kwargs ) 指全连接层，其输入一组已知形状的向量，输出一组形状为 shape 的向量。可用的API如下： shape : 正整数，输出空间维度。 activation : 激活函数。 若不指定，则不使用激活函数 (即，线性激活: a(\\mathbf{y}) = \\mathbf{y} a(\\mathbf{y}) = \\mathbf{y} )。该函数可以定义为任何元素级操作的Tensorflow函数。 use_bias : 布尔值，该层是否使用偏置向量。 True 则网络定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} ， False 则定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} \\mathbf{y} = \\mathbf{W}\\mathbf{x} 。 kernel_initializer : kernel 权值矩阵的初始化器，自定义的初始化器需要使用Keras后端API编写。 bias_initializer : 偏置向量的初始化器，同上。 kernel_regularizer : 运用到 kernel 权值矩阵的正则化函数，自定义的正则化函数需要使用Keras后端API编写。 bias_regularizer : 运用到偏置向的的正则化函数，同上。 activity_regularizer : 运用到层的输出的正则化函数，同上。 kernel_constraint : 运用到 kernel 权值矩阵的约束函数，只能使用Keras备选的几种方案，不能自定义。 bias_constraint : 运用到偏置向量的约束函数，同上。 信息: model.compile API model . compile ( optimizer , ** kwargs ) 在这里指的是顺序模型的编译函数，其可用的API如下： optimizer : 优化器，可以使用Tensorflow内置的优化器。 loss : 损失函数，也是目标函数。顺序模型只有一个输出，因此只能传入一个损失函数。可以使用形式为 func ( y_true , y_pred ) 的Tensorflow函数。 metrics : 测度函数，一般是一组函数，如果是一个函数则定义为 [ func ] 即可。自定义的测度函数目前还需要使用Keras后端API编写。 loss_weights : 损失的权重，顺序模型只有一个损失函数，因此只有一个权重，但要使用一维列表 [ value ] 定义。可以使用张量来控制可变权重。 sample_weight_mode : 按时间步采样权重，默认不提供。相比上面的损失权重，该选项会随着迭代次数使用不同的权重，因此输入的是二维列表。 weighted_metrics : 测度的权重，和损失权重类似，用来加给不同的测度函数。由于我们可以使用不只一个测度函数，这里的权重是个一维列表。 target_tensors : 默认情况下，Keras 将为模型的目标创建一个占位符，在训练过程中将使用目标数据。相反，如果你想使用自己的目标张量（反过来说，Keras在训练期间不会载入这些目标张量的外部 Numpy数据），您可以通过 target_tensors 参数指定它们。对于单输出的顺序模型，它应该是单个张量。 ** kwargs : 其他参量，会传递给 tf . Session . run 。 另外，注意我们这里构造网络的时候有如下技巧： Tensorflow在导入Keras模式以后，已经不再使用 (15) (15) 的形式定义 sigmoid交叉熵 ，而是采取更通用的定义 (14) (14) ； 我们使用Tensorflow重新封装过的类， 二分类交叉熵 ( BinaryCrossentropy ) 来作为Keras模型的损失函数 self.loss ，该函数与 多分类交叉熵 ( CategoricalCrossentropy ) 不同，乃是对两组对比张量的每个元素分别计算交叉熵，再求取均值，正符合本应用的需求； 我们通过静态方法，调用Keras的后端API，自己定义了预测准确度的测度函数 self.accuracy ，同时也使用另一个来自Tensorflow封装好的测度类 二分类准确度 ( BinaryAccuracy ) ，这是为了比照两个准确度的区别，以便我们更好理解该测度类； 我们将网络层的关键字 self.dense1 保留在了实例中，这是为了确保接下来我们能通过实例抽取该层的参数。 需要注意的是，由于 二分类交叉熵 ， 二分类准确度 和 多分类交叉熵 等都是类（从它们的定义都是大写字母开头也可以看出来），因此我们需要在使用的时候后面加上括号以实例化；由于这些类都定义了 __call__ 方法，我们可以像使用函数一样使用它们的实例。","text_tokens":["接下","已知","连接","对比","过来","采样","3","上","好","\\","测度","false","kernel","即","初始","参照","输入","label","知道","activity","本","定义","实例","宏","一个","元素","正","分类","losses","类似","关键","该层","形式","权重","sequential","the","round","metrics","重新","指定","call","initializer","10","作为","后端","；","8","每个","以便","运用","迭代","backend","准确","内置","下来",")","tf","步","求取","方案","优化","化","顺序","equal","21","空间","写字","lr","train","控制","true","激活","计算","相反","使用","optimizer","向","正整数","class","方式","等","模型","输出","可变","方法","还","静态方法","符","开头","随着","accuracy","但","self","以后","linear","是","取值","weight","矩阵","y","自定","5","mean","用来","10.0","__","+","use","符合","不","run","可以","target","12","模式","确保","来自","adam","cls","numpy","将","set","载入","级","loss","目标","编译","区别","randomnormal","(","损失","22","1","另外","input","情况","19","来说","熵","*","mathbf","则","由于","静态","后面","来","18","'","keras","乃是","指全","任何","比照","model","需要","网络层","更","调用","6","关键字","return","weights","注意","两组","20","布尔值","和","可用","列表","再","：","括号","时间","默认","sample","过程","]","对于","dense1","即可","看","个","封装","范围","}","为","函数","如果","bias","constant","value","在","均值","constraint","py","理解","参数","重","api","可能","请","大写","二","regularizer","dense","自己","tensorflow","传递","端","而是","如下","正则","这些","categoricalcrossentropy","nn","约束","以",":","变量","（","您","选项","自定义","给","张量","都","binarycrossentropy","x","@","它","只能","{","准确度","反过来","只","_","因此","不会","session","指","备选","另","想","它们","也","类","c","initializers","用法","器","activation","的","加上","需求","-","会","我们","单","单个"," ","中将","像","2","4","为了","17","）","参量","操作","只有","def","=","sigmoid","有","13","按","整数","出来","0.0","分别","编写","。","占位","对","技巧","kwargs","信息","一组","大写字母","a","#","as","训练","加","构造","linclshandle","外部","偏置","9","b","通用","15","目前","lin","相比","导入","向量","下","adamoptimizer","一般","提供","多","反过","weighted","是否","传入","几种","shape","通过","应用","11","上面","这是","construction","二维","了","已经","交叉","更好","字母","抽取","其他","网络","construct","应该","后","维度","binaryaccuracy","须知","一样","不能","到","同时","布尔","线性","层","创建","7","反过来说","该","接下来","全",".","能","w","tensors","采取","func","过程中将","中",",","其","一维","stddev","数据","layers","保留","16","你","要","and","过","形状","mode","与","预测","，","[","pred","不再","权值","compile","次数","期间","staticmethod","这里","add","若","时候","两个","初始化","不同","从","14","同"],"title":"构造方法","title_tokens":["方法","构造方法","构造"]},{"location":"book-1-x/chapter-1/linear-classification/#_13","text":"最后定义的式训练和测试方法。由于我们目前的project还比较简单，关于这两部分都直接调用现有的API即可。使用的API在之前已经说明。 model.fit 在没有额外设置的情况下，默认会返回一个 History回调器 ； model.evaluate 返回的是测试样本给出的损失函数和准确值测度。 model.predict 返回的是测试样本给出的网络输出。详情请参照 顺序模型API 。 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def train ( self , dataSet ): ''' Use a data set to train the network. ''' return self . model . fit ( dataSet , epochs = self . epoch , steps_per_epoch = self . steppe ) def test ( self , data , labels ): ''' Use (data, label) pairs to test the results. ''' loss , accu = self . model . evaluate ( data , labels ) print ( 'Evaluated loss =' , loss ) print ( 'Evaluated accuracy =' , accu ) return self . model . predict ( data ) 信息: model.fit API model . fit ( dataSet , ** kwargs ) 是训练函数，注意这个函数虽然支持输入一组 x,~y x,~y 用来代替 dataSet ，我们还是建议在任何情况下都用dataSet馈送数据，以免内存中数据集占用过多。 dataSet : 数据集，其本身应当是一个 tf.data.Dataset 类型的类，或者是一个能不断迭代产生新数据的生成器。数据的 batch 大小由 dataSet 本身决定。 epochs : 整数，终止训练时经历的世代(轮次)数，通常一个epoch表示遍历整个数据集一回。 verbose : 0, 1或2。日志显示模式。 0=安静模式, 1=进度条, 2=每轮一行。默认是1。 callbacks : 回调器，它是 tf.keras.callbacks 模块下的类，用来在训练中进行记录保存和数据检查点更新。默认是 tf.keras.callbacks.History 。 validation_split : 在 0 和 1 之间浮动。用作验证集的训练数据的比例。模型将分出一部分不会被训练的验证数据，并将在每一轮结束时评估这些验证数据的误差和任何其他模型指标。验证数据是混洗之前 x 和 y 数据的最后一部分样本中。 validation_data : 元组 (x_val，y_val) 或元组 (x_val，y_val，val_sample_weights) ，用来评估损失，以及在每轮结束时的任何模型度量指标。模型将不会在这个数据上进行训练。这个参数会覆盖 validation_split 。 shuffle : 布尔值（是否在每轮迭代之前混洗数据）。当 steps_per_epoch 非 None 时，这个参数无效。 class_weight : 可选的字典，用来映射类索引（整数）到权重（浮点）值，用于加权损失函数（仅在训练期间）。这可能有助于告诉模型 「更多关注」来自代表性不足的类的样本。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 initial_epoch : 开始训练的轮次（有助于恢复之前的训练）。 steps_per_epoch : 在声明一个轮次完成并开始下一个轮次之前的总步数（样品批次）。使用TensorFlow数据张量等输入张量进行训练时，默认值 None 等于数据集中样本的数量除以 batch 的大小，如果无法确定，则为1。 validation_steps : 只有在指定了 steps_per_epoch 时才有用。停止前要验证的总步数（批次样本）。 该函数会返回 callbacks 定义的实例。 信息 model.evaluate API model . evaluate ( x , y , ** kwargs ) 是测试函数，需要传入 label 即 y 来验证性能。 x , y : Numpy 数组，分别是输入和输出的真实参照值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数会返回损失函数和测度（列表）。 信息 model.predict API model . predict ( x , ** kwargs ) 是预测函数，用在只知道输入 x 的场合。 x : Numpy 数组，输入值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数返回预测结果。","text_tokens":["3","一部分","上","检查","之间","labels","print","起来","测度","shuffle","即","参照","除以","仅","输入","可选","映射","label","知道","不断","之前","式","定义","等于","实例","默认值","一个","应当","进度条","被","类似","建议","这个","馈送","样品","「","保存","权重","per","verbose","the","指定","影响","10","；","现有","8","epoch","比例","迭代","准确","进行","模块",")","accu","val","tf","助于","详情","安静","本身","字典","顺序","生成器","train","计算","虽然","使用","一轮","返回","class","元组","test","经历","无法","等","模型","度量","输出","方法","完成","还","accuracy","split","self","没有","性能","是","evaluate","initial","通常","weight","」","y","5","用来","use","none","日志","不","声明","最后","无效","过多","12","内存","加权","代表","效果","模式","来自","cls","numpy","同一","组合","一回","将","set","关注","每轮","时","loss","开始","epochs","(","部分","用","集","损失","validation","1","有用","一行","终止","情况","*","则","由于","额外","不足","来","支持","'","keras","简单","任何","索引","size","model","需要","误差","或","比较","to","用于","更","调用","6","return","data","遍历","weights","注意","有助","步数","布尔值","和","验证","列表","默认","sample","过程","或者","显示","占用","即可","network","回调","设定值","轮次","为","函数","如果","设定","在","一部","数","py","分出","非","参数","api","类型","两","steps","可能","世代","~","测试方法","tensorflow","这些","测试","还是","恢复","确定","真实",":","（","给","张量","都","测试函数","时才","给出","x","告诉","用作","它","当","样本","决定","指标","只","_","不会","值","说明","代表性","记录","project","类","器","数组","组拆","的","新","-","停止","成器","以及","会","我们","生成"," ","分成","许多","callbacks","每","2","并","4","代替","）","这","检查点","只有","def","dataset","=","覆盖","13","进度","results","整数","predict","分别","。","总","对","kwargs","批次","信息","一组","a","训练","linclshandle","整个","9","浮动","目前","设置","lin","浮点","下","评估","多","是否","大小","0","传入","evaluated","作用","11","场合","了","已经","数量","有助于","其他","网络","查点","batch","集中","到","布尔","7","该","pairs",".","能","详情请","中",",","比较简单","其","添加","数据","以免","更新","history","关于","steppe","结果","前要","预测","，","compile","产生","期间","fit","表示","结束","混洗","由","14","直接"],"title":"训练和测试方法","title_tokens":["测试方法","方法","训练","和","测试"]},{"location":"book-1-x/chapter-1/linear-classification/#_14","text":"首先，训练网络。我们随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的仿射变换，并且设置好数据集，给定噪声扰动为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 。设定20个epoch，每个epoch迭代500次，每次馈入32个样本构成的batch，然后开始训练： lin-cls.py 1 2 3 4 5 6 7 8 9 # Initialization A = np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataSet ( 10 , A , c ) dataSet . config ( batch = 32 , noise = 0.1 ) # Construct the model and train it. h = LinClsHandle ( learning_rate = 0.01 , epoch = 20 , steppe = 500 ) h . construct () record = h . train ( iter ( dataSet )) Output Epoch 1 /20 500 /500 [==============================] - 1s 3ms/step - loss: 6 .3005 - accuracy: 0 .5884 - binary_accuracy: 0 .5884 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 5 .4671 - accuracy: 0 .6407 - binary_accuracy: 0 .6407 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4 .5711 - accuracy: 0 .6957 - binary_accuracy: 0 .6957 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 3 .6789 - accuracy: 0 .7519 - binary_accuracy: 0 .7519 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .7101 - accuracy: 0 .8127 - binary_accuracy: 0 .8127 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .0059 - accuracy: 0 .8627 - binary_accuracy: 0 .8627 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .6403 - accuracy: 0 .8894 - binary_accuracy: 0 .8894 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .3663 - accuracy: 0 .9066 - binary_accuracy: 0 .9066 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .0466 - accuracy: 0 .9274 - binary_accuracy: 0 .9274 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .8377 - accuracy: 0 .9418 - binary_accuracy: 0 .9418 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .6465 - accuracy: 0 .9546 - binary_accuracy: 0 .9546 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .4492 - accuracy: 0 .9667 - binary_accuracy: 0 .9667 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .2795 - accuracy: 0 .9779 - binary_accuracy: 0 .9779 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .1624 - accuracy: 0 .9861 - binary_accuracy: 0 .9861 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0680 - accuracy: 0 .9926 - binary_accuracy: 0 .9926 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0128 - accuracy: 0 .9971 - binary_accuracy: 0 .9971 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0052 - accuracy: 0 .9986 - binary_accuracy: 0 .9986 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0049 - accuracy: 0 .9985 - binary_accuracy: 0 .9985 接下来，从训练返回的 History 类型的回调器中抽取对loss和accuracy的记录。 lin-cls.py 1 2 3 4 5 # Show records plt . semilogy ( record . epoch , record . history [ 'loss' ]), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Cross entropy' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () plt . plot ( record . epoch , record . history [ 'accuracy' ], label = 'self defined' ), plt . plot ( record . epoch , record . history [ 'binary_accuracy' ], label = 'from tensorflow' ), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Accuracy' ), plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 结果显示，我们自定义的准确度测度和Tensorflow内置的 二分类准确度 完全相同，这说明其本身的定义就是求取所有元素阈值化后，各自分类结果是否正确的平均值。这个实验也让我们对自定义测度函数有了一定的认识。 重新设定数据集的产生方式，变为每个batch含10个样本。使用这组重新随机生成的数据测试网络输出， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 # Generate a group of testing samples: dataSet . config ( batch = 10 ) x , y = next ( dataSet ) # Check the testing results yp = h . test ( x , y ) _ , ( ax1 , ax2 ) = plt . subplots ( 1 , 2 ) ax1 . imshow ( y , interpolation = 'nearest' , aspect = 'auto' ) ax1 . set_title ( 'True class' ) ax2 . imshow ( yp , interpolation = 'nearest' , aspect = 'auto' ) ax2 . set_title ( 'Predicted class' ) plt . gcf () . set_size_inches ( 10 , 5 ), plt . show () Output Evaluated loss ( losses.BinaryCrossentropy ) = 0 .0023145806044340134 Evaluated accuracy ( self defined ) = 1 .0 Evaluated accuracy ( metrics.BinaryAccuracy ) = 1 .0 注意我们未对测量的结果阈值化，因此显示出来的测量结果和理想值略有差别，但从图可知，阈值化后则测量结果全部准确。 通过抽取 h.dense1 的参数，我们可以对比 \\mathbf{A} \\mathbf{A} 和 \\mathbf{W} \\mathbf{W} ，以及 \\mathbf{c} \\mathbf{c} 和 \\mathbf{b} \\mathbf{b} ， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 # Check the regressed values W , b = h . dense1 . get_weights () plt . imshow ( A , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'A' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . imshow ( W , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'W' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . plot ( c . T , label = 'c' ) plt . plot ( b . T , label = 'b' ) plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 可以发现，虽然我们训练的分类器十分有效，但其权值和预期的 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 并不完全相同。这是由于sigmoid函数激活的特性，使得当预测值偏向最小或最大的情况下， |\\sigma(x)| \\rightarrow 1 |\\sigma(x)| \\rightarrow 1 ，根据 (7) (7) ，可知其梯度 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 ，因此那些分类结果已经比较确信的样本，其梯度消失，对训练网络的影响忽略不计（这是合理的，因为我们不希望极端样本干扰结果，更希望对分类结果不确切的样本进行训练）。故而，我们虽然可以求解出这个分类问题，但求解到的 \\mathbf{W} \\mathbf{W} , \\mathbf{b} \\mathbf{b} 不会回归到 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 上。关于回归问题，我们会在下一节进一步讨论。","text_tokens":["接下","全部","对比","interpolation","3","上","好","\\","测度","进一步","3663","理想","0466","4671","label","gcf","确切","定义","mapsto","6465","元素","aspect","500","数据测试","分类","losses","9418","rate","这个","略有","不计","initialization","the","因为","yp","metrics","auto","阈值","重新","影响","entropy","10","就是","故而","it","inches","8","每个","epoch","迭代","准确","内置","下来","6957","8627","8377","进行","2795",")","含","8127","求取","本身","差别","化","mathbb","让","train","plot","true","1624","激活","next","虽然","使用","返回","class","test","并且","方式","平均值","generate","输出","0680","可知","sigma","nearest","plt","step","十分","accuracy","但","self","0059","random","7519","干扰","6403","5711","结果显示","y","自定","5","不","可以","uniform","12","cls","set","loss","9985","开始","每次","values","求解","(","集","使得","噪声","1","构成","input","情况","19","扰动","mathbf","则","0052","这组","由于","9861","18","|","'","完全","那些","defined","size","model","或","然后","问题","完全相同","比较","更","6","from","weights","注意","最小","20","和","：","t","]","显示","dense1","0.1","回调","个","9926","}","为","of","varepsilon","函数","设定","在","均值","py","regressed","回归","binary","参数","config","首先","legend","正确","类型","~","二","0023145806044340134","根据","tensorflow","testing","4492","iter","测试","xlabel","发现","cross",":","9546","（","未","group","自定义","^","ax2","6407","最大","samples","分类器","出","binarycrossentropy","x","rightarrow","当","样本","{","准确度","器中","次","_","因此","不会","值","给定","馈入","说明","记录","也","normal","相同","gca","c","的","-","随机","以及","会","我们","boldsymbol","生成"," ","极端","2","r","并","4","平均","9981","17","output","）","这","predicted","=","dataset","0.01","9971","sigmoid","有","13","ax1","7101","mathcal","title","results","colorbar","出来","5884","records","2ms","一定","。","对","record","subplots","n","9274","a","#","希望","训练","np","noise","h","testdataset","linclshandle","get","9","/","b","15","设置","lin","下","合理","所有","仿射变换","化后","是否","show","0","认识","shape","evaluated","图","忽略不计","1s","通过","9986","11","sim","这是","测量","变为","确信","了","已经","各自","imshow","dp","抽取","网络","特性","ylabel","construct","batch","偏向","变换","binaryaccuracy","0128","9779","到","32","learning","9667","一步","7","8894","预期","消失","9066","0055","3005","0049","接下来",".","semilogy","仿射","w",",","其","6789","数据","梯度","history","16","3ms","关于","steppe","and","结果","预测","，","[","权值","产生","预测值","讨论","忽略","一节","check","从","实验","14","有效"],"title":"调试","title_tokens":["调试"]},{"location":"book-1-x/chapter-1/linear-regression/","text":"线性回归 ¶ 摘要 本节介绍如何使用类模型(Model)来编写一个线性回归器，以拟合出一个线性模型。本节将第一次介绍如何编写一个带用户参数(选项)的Project，并且允许用户选择不同的优化器、对比验证不同优化算法的效果。 理论 ¶ 一般回归问题 ¶ 设存在一个多输出方程 \\mathbf{y} = \\mathcal{F}(x) \\mathbf{y} = \\mathcal{F}(x) ，当然 \\mathcal{F} \\mathcal{F} 可以是非线性函数，那么我们可以考虑使用一个带可调参数的模型 \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}) \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}) 来模拟它，其中 \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} 是可调的参数。于是，该问题可以被表述为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\boldsymbol{\\Theta}} &\\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}_k) \\right),\\\\ \\mathrm{s.t.}~&\\mathbf{y}_k = \\mathcal{F}(\\mathbf{x}_k). \\end{aligned} \\end{equation} 在我们不知道 \\mathcal{F} \\mathcal{F} 的情况下，我们的目的是使用大量的 \\mathbf{x}_k,~\\mathbf{y}_k \\mathbf{x}_k,~\\mathbf{y}_k 样本，来调整出一个最优的近似模型 \\mathbf{D}_{\\boldsymbol{\\Theta}} \\mathbf{D}_{\\boldsymbol{\\Theta}} 。由于 \\mathcal{F} \\mathcal{F} 是非线性的，这要求我们的 \\mathbf{D}_{\\boldsymbol{\\Theta}} \\mathbf{D}_{\\boldsymbol{\\Theta}} 也可以是非线性的。实际情况下，这样的问题往往不容易求解，尤其是信号的非线性性极强时，该问题很容易陷入局部最优解，从而对求得一个可接受的解造成很大的障碍。 这里 \\mathcal{L} \\mathcal{L} 是损失函数。在回归问题中，很多情况下我们都只能选择 均方误差 (Mean squared error, MSE) 作为损失函数，这是因为回归问题的目的是模拟出一组信号来，而这些信号的分布范围可能是任意的。在一些特别的应用里，例如，如果我们的信号全部为正值，那么我们可以考虑使用 信噪比 (Signal-to-noise ratio, SNR) 来作为我们的损失函数。 线性回归 ¶ 继上一节的学习，我们知道如何解一个定义为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 的分类模型。在本节，让我们考虑一个更简单的模型： \\begin{align} \\mathbf{y} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon}. \\end{align} 现在， \\mathbf{y} \\mathbf{y} 是关乎 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 的一个仿射函数，并且我们仍然保留噪声函数 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 。由于这是一个线性模型，我们可以想象到，存在一个线性回归器， \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，使得预测结果为 \\begin{align} \\tilde{\\mathbf{y}} = \\mathbf{W} \\mathbf{x} + \\mathbf{b}. \\end{align} 类似上一节，假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}_k,~\\mathbf{y}_k) \\in \\mathbb{D} (\\mathbf{x}_k,~\\mathbf{y}_k) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 。 故而，该问题可以描述为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} &\\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathbf{W} \\mathbf{x}_k + \\mathbf{b} \\right), \\\\ \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) &= \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{aligned} \\end{equation} 在本例中， \\mathbf{y} \\mathbf{y} 有正有负，因此我们使用均方误差来作为损失函数。 求解问题 ¶ 作为线性问题，该问题实际上可以写出其解析解。未免读者感到过于突兀，我们先从一个简单的问题开始入手： 例子：一次函数的线性回归 如果我们的矩阵 \\mathbf{A} \\mathbf{A} 退化为标量 a a ，向量 \\mathbf{c} \\mathbf{c} 退化为标量c，那么 (3) (3) 可以重新写为： \\begin{align} y = a x + c + \\varepsilon. \\end{align} 考虑我们拥有N个样本点 (x_k,~y_k) (x_k,~y_k) ，上述问题实际上可以求得解析解。设由这N个点构成了样本向量 \\mathbf{x}_d,~\\mathbf{y}_d \\mathbf{x}_d,~\\mathbf{y}_d (注意与前述的向量区分开来)，则问题可以写成 \\begin{align} \\arg \\min_\\limits{a,~c} \\lVert \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} \\rVert^2_2. \\end{align} 这就是附图所示的，拟合到直线的一次函数回归问题。将该损失函数展开，有 \\begin{equation} \\begin{aligned} \\mathcal{L}(a,~c) &= ( \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} )^T ( \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} )\\\\ &= \\mathbf{y}_d^T\\mathbf{y}_d + a^2 \\mathbf{x}_d^T \\mathbf{x}_d + c^2 + 2ac \\mathbf{1}^T \\mathbf{x}_d - 2 a \\mathbf{y}_d^T \\mathbf{x}_d - 2c \\mathbf{1}^T \\mathbf{y}_d. \\end{aligned} \\end{equation} 令 \\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial a}=0,~\\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial c}=0 \\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial a}=0,~\\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial c}=0 ，则我们得到一组二元一次方程组 \\begin{equation} \\left\\{ \\begin{aligned} a \\mathbf{x}_d^T \\mathbf{x}_d + c \\mathbf{1}^T \\mathbf{x}_d &= \\mathbf{y}_d^T \\mathbf{x}_d. \\\\ c + a \\mathbf{1}^T \\mathbf{x}_d &= \\mathbf{1}^T \\mathbf{y}_d. \\end{aligned} \\right. \\end{equation} 解之，得 \\begin{equation} \\left\\{ \\begin{aligned} a &= \\frac{ \\mathbf{y}_d^T \\mathbf{x}_d - ( \\mathbf{1}^T \\mathbf{y}_d ) ( \\mathbf{1}^T \\mathbf{x}_d ) }{ \\mathbf{x}_d^T \\mathbf{x}_d - (\\mathbf{1}^T \\mathbf{x}_d)^2 } = \\frac{ \\sum_k x_k y_k - \\sum_k y_k \\sum_k x_k }{ \\sum_k (x_k)^2 - \\left(\\sum_k x_k\\right)^2 }. \\\\ c &= \\mathbf{1}^T \\mathbf{y}_d - a ( \\mathbf{1}^T \\mathbf{x}_d ) = \\sum_k y_k - a \\left( \\sum_k x_k \\right). \\end{aligned} \\right. \\end{equation} 这个式子在诸多教材上都会出现，作为学生解回归问题的入门话题。可见，我们在本节讨论的问题并不是一个陌生的问题，相反，我们过去非常熟悉的一个问题，是这个问题的退化到标量下的特殊情况。另，计算该问题的相关系数，我们常使用 \\begin{align} \\rho = \\frac{ \\sum_k \\left(x_k - \\overline{x}\\right) \\left(y_k - \\overline{y}\\right) }{ \\sqrt{ \\sum_k \\left(x_k - \\overline{x}\\right)^2 \\sum_k \\left(y_k - \\overline{y}\\right)^2 } }, \\end{align} 其中 \\overline{x} = \\sum_k x_k ,~ \\overline{y} = \\sum_k y_k \\overline{x} = \\sum_k x_k ,~ \\overline{y} = \\sum_k y_k 。 有了解上述例子的基础，我们自然可以写出， \\begin{equation} \\begin{aligned} \\mathcal{L}(\\mathbf{A},~\\mathbf{c}) &= \\sum_k ( \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k - \\mathbf{c} )^T ( \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k - \\mathbf{c} )\\\\ &= \\sum_k \\left[ \\mathbf{y}_k^T\\mathbf{y}_k + \\mathbf{x}_k^T \\mathbf{A}^T\\mathbf{A} \\mathbf{x}_k + \\mathbf{c}^T \\mathbf{c} + 2 \\mathbf{c}^T \\mathbf{A} \\mathbf{x}_k - 2 \\mathbf{y}_k^T \\mathbf{A} \\mathbf{x}_k - 2 \\mathbf{y}_k^T \\mathbf{c} \\right]. \\end{aligned} \\end{equation} 提示 接下来的求导主要涉及单值对矩阵求导（导数仍是矩阵），单值对向量求导（导数仍是向量）。可以参考 The Matrix Cookbook 查到对应情况下的求导结果。 同理，令 \\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{A}}=0,~\\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{c}}=0 \\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{A}}=0,~\\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{c}}=0 ，则我们得到一组二元一次方程组 \\begin{equation} \\left\\{ \\begin{aligned} \\sum_k \\left[ \\mathbf{A} \\mathbf{x}_k \\mathbf{x}_k^T + \\mathbf{c} \\mathbf{x}_k^T \\right] &= \\sum_k \\left[ \\mathbf{y}_k \\mathbf{x}_k^T \\right]. \\\\ \\sum_k \\left[ \\mathbf{c} + \\mathbf{A} \\mathbf{x}_k \\right] &= \\sum_k \\left[ \\mathbf{y}_k \\right]. \\end{aligned} \\right. \\end{equation} 解之，得 \\begin{equation} \\left\\{ \\begin{aligned} \\mathbf{A} &= \\left[ N \\sum_k \\left[ \\mathbf{y}_k \\mathbf{x}_k^T \\right] - \\sum_k \\left[ \\mathbf{y}_k \\right] \\sum_k \\left[ \\mathbf{x}_k^T \\right] \\right] \\left[ N \\sum_k \\left[ \\mathbf{x}_k \\mathbf{x}_k^T \\right] - \\sum_k \\left[ \\mathbf{x}_k \\right] \\sum_k \\left[ \\mathbf{x}_k^T \\right] \\right]^{-1} \\\\ \\mathbf{c} &= \\frac{1}{N} \\sum_k \\left[ \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k \\right]. \\end{aligned} \\right. \\end{equation} 可见，当上式中的逆不存在时（即低秩的情况），该方程还是有可能解不唯一。 同时，相关系数的计算可以表示为 \\begin{align} \\rho = \\mathrm{mean} \\left[ \\frac{ \\sum_k \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\cdot \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) }{ \\sqrt{ \\sum_k \\left[ \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\cdot \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\right] \\sum_k \\left[ \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) \\cdot \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) \\right] } } \\right]. \\end{align} 这就是 皮尔森相关系数 (Pearson's correlation) 。其中 \\overline{\\mathbf{x}} = \\sum_k \\mathbf{x}_k ,~ \\overline{\\mathbf{y}} = \\sum_k \\mathbf{y}_k \\overline{\\mathbf{x}} = \\sum_k \\mathbf{x}_k ,~ \\overline{\\mathbf{y}} = \\sum_k \\mathbf{y}_k ， \\cdot \\cdot 表示的是两个向量按元素各自相乘。它是式 (11) (11) 在多变量问题上的推广。相当于对向量的每一个元素，分别从统计上求取皮尔森相关系数，然后对向量每个元素对应的皮尔森相关系数求取平均值。 优化算法 ¶ 接下来，我们要介绍几种最常见的优化算法。关于更多这方面的内容，可以查考Google团队编写的在线电子书 Deep Learning 。笔者打算在未来为此开辟专题写文，因此这里只是介绍几种常见的 一阶梯度下降 算法。传统优化领域里，单靠一阶梯度下降往往难以满足对准确度的需求，但深度学习(Deep learning)往往必须使用这些简单的一阶梯度下降算法，就连使用一阶梯度近似二阶梯度的算法 共轭梯度下降 ，在很多情况下都被认为是费用(cost)过高。这是由于一个深度网络，往往具有大量的参数需要训练，因此一个Model的参数少则数十MB，多则上GB。一阶梯度下降算法所需的计算量小，能确保我们一次迭代的过程能迅速完成，因而备受青睐。为了提升其性能，深度学习领域内也对其进行了诸多改进。 注意 其实，论到优化算法，往往不得不提到 反向传播 。不过实际上，一个Tensorflow的入门者，其实完全不需要学习如何推导反向传播的过程。下面我们的叙述也完全不会提及反向传播相关的内容。关于为何我们不需要了解反向传播，在下一节我们会论到。但是，在本教程后期，介绍高级技巧的时候，我们会详细展开。事实上，笔者认为，一个Tensorflow的用户，如果只是为了编写代码，反向传播与ta其实无关痛痒；但只有真正掌握反向传播，我们才算是真正入门了神经网络的理论。 我们在这里说到优化算法，是用在训练网络上的。事实上，只有几种个别的机器学习应用，需要我们在测试阶段执行 迭代算法 (iterative algorithm) 。一般来说，深度学习的训练过程可以被普遍地描述为：已知一个带可调参数 \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} 的模型 \\mathcal{D}_{\\boldsymbol{\\Theta}} \\mathcal{D}_{\\boldsymbol{\\Theta}} ，已知一组数据集 (\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D} (\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D} ，则我们的训练目标为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\boldsymbol{\\Theta}} \\mathbb{E}_{(\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D}} \\left[ \\mathcal{L} \\left( \\mathbf{y}_i,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_i) \\right) \\right]. \\end{aligned} \\end{equation} 实际情况下，一般用均值估计来代替上式的期望函数。联系我们上一节的优化问题 (1) (1) 和本节的优化问题 (5) (5) ，都可以描述成上式的形式。也就是说，线性分类/回归器，是神经网络在解线性问题时的特例。 引入动量的优化算法 ¶ 接下来，让我们看看第一个算法， 随机梯度下降 (stochastic gradient descent, SGD) 。 随机梯度下降 记学习率为 \\epsilon \\epsilon ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\mathbf{g} 。 注意学习率一般需要设为一个较小的值，视情况而定。 由于梯度的期望满足 \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{g} \\right] &= \\frac{1}{m} \\sum\\limits_{k=1}^m \\mathbb{E} \\left[ \\nabla_{\\boldsymbol{\\Theta}} \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\right] \\\\ &= \\mathbb{E} \\left[ \\nabla_{\\boldsymbol{\\Theta}} \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}) \\right) \\right] = \\nabla_{\\boldsymbol{\\Theta}} \\mathbb{E} \\left[ \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}) \\right) \\right]. \\end{aligned} \\end{equation} 可知随机抽取m个样本计算的梯度，在统计学上的期望等于全局梯度的期望。因此，这是一个有效的算法。 随机梯度下降存在明显的弊端，就是在收敛到（全局或局部）最优解的前提下，全局梯度为0，但通过随机选取batch得到的梯度（一般）可能不为0；并且，迭代受到个别极端样本梯度的影响较大，因此，我们有了第一个改进，即 带动量的随机梯度下降 (SGD with momentum) 。 带动量的随机梯度下降 参考文献 提出该算法的文章，可以在这里参考： On the momentum term in gradient descent learning algorithms. Neural Networks 记学习率为 \\epsilon \\epsilon ，惯性常数为 \\alpha \\alpha ，初始化动量 \\mathbf{v}=\\mathbf{v}_0 \\mathbf{v}=\\mathbf{v}_0 （不考虑继续训练的情况下 \\mathbf{v}_0 = \\mathbf{0} \\mathbf{v}_0 = \\mathbf{0} ），则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 计算带动量的更新值 \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} + \\mathbf{v} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} + \\mathbf{v} 。 显然，我们不难计算出， \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{v} \\right] &= \\alpha \\mathbb{E} \\left[ \\mathbf{v} \\right] - \\epsilon \\mathbb{E} \\left[ \\mathbf{g} \\right]. \\\\ \\mathbb{E} \\left[ \\mathbf{v} \\right] &= - \\frac{\\epsilon}{1 - \\alpha} \\mathbb{E} \\left[ \\mathbf{g} \\right]. \\end{aligned} \\end{equation} 注意惯性通常需要设为 \\alpha \\in (0,~1) \\alpha \\in (0,~1) 。 这种改进的带来的好处是， 每次更新梯度时，上一次的梯度都会以指数衰减的形式残留在本次迭代中，从而确保新的梯度会被旧的梯度部分中和，避免极端梯度对更新参数影响过大； 当求解得到的梯度陷入局部最优时，如果该局部最优处的曲率较小，可以依靠动量的惯性，越过该局部最优解。 附图说明了使用这种算法的好处。黑色路径为SGD的更新轨迹，而红色路径为本算法的更新轨迹，可以看出随着迭代次数的增加，算法收敛的效果强于SGD。 有人从Nesterov在1983年的论文得到启发，提出了一个修正后的带动量随机梯度下降法，即 带Nesterov动量的随机梯度下降 (SGD with Nesterov momentum) 。 带Nesterov动量的随机梯度下降 参考文献 提出该算法的文章，可以在这里参考： A method for unconstrained convex minimization problem with the rate of convergence o\\left( \\frac{1}{k_2} \\right) o\\left( \\frac{1}{k_2} \\right) 记学习率为 \\epsilon \\epsilon ，惯性常数为 \\alpha \\alpha ，初始化动量 \\mathbf{v}=\\mathbf{v}_0 \\mathbf{v}=\\mathbf{v}_0 （不考虑继续训练的情况下 \\mathbf{v}_0 = \\mathbf{0} \\mathbf{v}_0 = \\mathbf{0} ），则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算惯性目标点的位置： \\boldsymbol{\\Theta}^{\\dagger} \\leftarrow \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\boldsymbol{\\Theta}^{\\dagger} \\leftarrow \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} ； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}^{\\dagger}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}^{\\dagger}} (\\mathbf{x}_k) \\right) ； 计算带动量的更新值 \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta}^{\\dagger} - \\epsilon \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta}^{\\dagger} - \\epsilon \\mathbf{g} 。 其实，该方法的更新量期望与前一种方法一样， 显然，我们不难计算出， \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{v} \\right] &= - \\frac{\\epsilon}{1 - \\alpha} \\mathbb{E} \\left[ \\mathbf{g} \\right]\\\\ &= \\frac{\\epsilon}{1 - \\alpha} \\nabla_{\\boldsymbol{\\Theta}} \\mathbb{E} \\left[ \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta} + \\alpha \\mathbf{v}} (\\mathbf{x}) \\right) \\right]. \\end{aligned} \\end{equation} 当收敛到最优解时， \\mathbf{v} \\rightarrow 0 \\mathbf{v} \\rightarrow 0 ，同时有 \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\rightarrow \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\rightarrow \\boldsymbol{\\Theta} 。我们在此不展开证明这个算法时能收敛的。但Nesterov的文献表明，它能将上面提到的带动量梯度下降算法的误差从 O\\left(\\frac{1}{K}\\right) O\\left(\\frac{1}{K}\\right) 下降到 O\\left(\\frac{1}{K^2}\\right) O\\left(\\frac{1}{K^2}\\right) 。其中 K K 为迭代次数。下图展示了这种方法的改进原理。它的梯度是在更新动量的惯性部分之后才计算出来的，因此新的梯度和之前的惯性是首尾相接的。实际实现时，按照上面的算法，每次迭代需要更新两次参数，计算一次梯度。合理调整算法的计算次序，可以改进为每次迭代更新一次参数，计算一次梯度。 引入可变学习率的优化算法 ¶ 上述几种算法共同的特点是，具有一个“学习率”。实际上，这个学习率非常不好处理，值过小时，收敛速度很慢；值过大时，在最优解附近又难以收敛。为了解决这一思路，我们可以令学习率可变。最简单的思路是，将学习率设为指数衰减的（当然也可以设置下界），这样当开始学习的时候，学习率较大；而即将收敛时，学习率又会较小。 但是，以上做法不过是一些小小的花招(trick)罢了，接下来介绍的几种算法，是根据当前计算出的梯度来自适应调整学习率的。理论上，使用这种算法，用户不再需要特别关注学习率对训练的影响，我们尽可以设置一个偏大的学习率，在训练过程中，它能被自适应调整到一个合适的区间上。 首先，我们来介绍一种初步的改进， Adagrad (Adaptive Subgradient) ， Adgrad 参考文献 提出该算法的文章，可以在这里参考： Adaptive Subgradient Methods for Online Learning and Stochastic Optimization 记学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，初始化学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新学习率为： \\mathbf{r} \\leftarrow \\mathbf{r} + \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\mathbf{r} + \\mathrm{diag}(\\mathbf{g})^2 ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} 。 注意文献中常用向量点积 \\odot \\odot 来表示学习率，这样学习率就不是对角矩阵而是向量了。我们这里不定义额外的符号，以便不熟悉相关定义的读者理解。 这一方法的思想是，学习率随着梯度的累计增大而逐渐减小，类似我们使用指数衰减的策略。所不同的是，在梯度小的地方，我们认为梯度平缓，所以学习率减小得慢，以便算法迅速地通过这一片区域；在梯度大地地方，由于梯度陡峭，为了防止我们因为学习率过大漏过该区域，学习率减小得快，以适应梯度的大小。 这个方法没有从根本上解决迭代次数过多时，梯度过小的问题。不难看出该算法学习率以 O\\left(\\frac{1}{\\mathbf{g}^T\\mathbf{g}}\\right) O\\left(\\frac{1}{\\mathbf{g}^T\\mathbf{g}}\\right) 的比率衰减，经验指出，这个算法在很多情况下是不好用的，只能解决一些比较特定的模型。 在这里，我们依然不给出收敛性的证明（或许在未来我们会在专题中讨论这一问题）。读者不必为这些算法的原理感到压力，我们只需要对其有一个直观的了解就好。 考虑到Adagrad学习率减小的速度未免太快了，我们可以考虑它的改进， RMSprop (root mean square proportion) ，注意它是另一个算法Adadelta的特例，不过在本节我们不会讨论Adadelta，有兴趣的读者可以自己去寻找参考资料。 RMSprop 参考文献 提出该算法的文章，可以在这里参考： Overview of mini-batch gradient descent 记学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，衰减参数 \\rho \\rho ，初始化学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新学习率为： \\mathbf{r} \\leftarrow \\rho \\mathbf{r} + (1 - \\rho) \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\rho \\mathbf{r} + (1 - \\rho) \\mathrm{diag}(\\mathbf{g})^2 ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} 。 和上一个算法相比，它唯一的改变就是引入了一个衰减参数 \\rho \\rho ，以指数衰减将之前收集的学习率遗忘。如此就可以控制指数过大的问题，这个trick真是令人一言难尽。但是有趣的是，实际经验中，这个方法真的是卓有成效，是现在常用的神经网络优化算法之一。 最后让我们来介绍当前最实用的算法（之一）， Adam (adaptive momentum estimation) 。顾名思义，它的基本原理是基于对动量的可变估计。实际上，在上一节的Project中，我们选用的优化器就是Adam，Tensorflow的官方教程中，也将Adam作为默认推荐的优化器。 Adam 参考文献 提出该算法的文章，可以在这里参考： Adam: a Method for Stochastic Optimization 特别需要注意的是，Adam的收敛性证明已经被后来者推翻，指出其中存在一个错误。改正后的版本称为AMSGrad，Tensorflow的Keras API支持我们在设置Adam的时候开启AMSGrad模式。关于AMSGrad，我们不在此展开讨论，有兴趣的读者可以参考： On the Convergence of Adam and Beyond 记 k k 为迭代次数，学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，衰减参数 \\rho_1,~\\rho_2 \\rho_1,~\\rho_2 ，初始化动量为 \\mathbf{s} = \\mathbf{0} \\mathbf{s} = \\mathbf{0} ，学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新动量为： \\mathbf{s} \\leftarrow \\rho_1 \\mathbf{s} + (1 - \\rho_1) \\mathbf{g} \\mathbf{s} \\leftarrow \\rho_1 \\mathbf{s} + (1 - \\rho_1) \\mathbf{g} ； 更新学习率为： \\mathbf{r} \\leftarrow \\rho_2 \\mathbf{r} + (1 - \\rho_2) \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\rho_2 \\mathbf{r} + (1 - \\rho_2) \\mathrm{diag}(\\mathbf{g})^2 ； 调整参数大小： \\hat{\\mathbf{s}} \\leftarrow \\dfrac{\\mathbf{s}}{1 - \\rho_1^k} \\hat{\\mathbf{s}} \\leftarrow \\dfrac{\\mathbf{s}}{1 - \\rho_1^k} , \\hat{\\mathbf{r}} \\leftarrow \\dfrac{\\mathbf{r}}{1 - \\rho_2^k} \\hat{\\mathbf{r}} \\leftarrow \\dfrac{\\mathbf{r}}{1 - \\rho_2^k} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\dfrac{ \\hat{\\mathbf{s}} }{\\delta + \\sqrt{\\hat{\\mathbf{r}}}} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\dfrac{ \\hat{\\mathbf{s}} }{\\delta + \\sqrt{\\hat{\\mathbf{r}}}} 。 Adam不仅估计了学习率的可变性，还引入了可变的动量。这是迄今为止，我们见到的第一个将动量和可变学习率结合起来的算法。我们当然期望它能带来双份的 快乐 好处，可是…… 为什么会这样呢？ ，已经有文献指出，Adam存在原理上的失误，并提出了改正的算法AMSGrad，这正是我们未来将要在专题中讨论的内容。现在读者只需要知道，Adam的思路其实就是结合动量和可变学习率就行了。 注意 无论是我们没提到的Adadelta还是提到的Adam，其实都引入了动量的概念。那么一个自然而然的idea就是，使用Nesterov动量代替普通的动量。当然，毫无意外的是，已经有人做过了。例如，Adam的Nesterov动量版本叫Nadam，有兴趣的读者不妨去了解一下。 解线性回归问题 ¶ 代码规范 ¶ 重申我们之前提到的，我们建议一个完整的工程应当包括 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 在上一节中，我们没有定义 tool.py 和 extension.py ，这是因为我们的工程还很简单，不需要扩展Tensoflow模型，也不需要专门的数据处理代码。相应地，我们把数据的后处理代码直接集成在了主模块 lin-cls.py 里。在这一节，我们要开始构造一个真正严格按照这四部分分离的工程，并且在接下来的各个例子实现里，都会遵照这个模式，读者应当熟悉类似我们所推荐的、这样一个高度分离的模块化设计的思路。 扩展模块 ¶ 此次是我们第一次写扩展模块，编写扩展模块的目的是，提供一个更复杂的支持库，以便我们能轻松地使用Tensorflow。因此，扩展模块编写地原则应当包括： 可适用性 : 它应当与我们某一个Project完全无关，就像我们自己基于Tensorflow编写一个扩展库一样，以后我们在任何项目都应该可以使用同一个扩展模块文件； 低依赖性 : 它应当最低限度地需要依赖库。 tensorflow 库本身当然是需要的，而 numpy ， matplotlib 甚或是读写数据的模块，都不宜出现在这里，以确保我们的扩展模块被其他任何模块调用时，依赖关系都是树状的； 强一致性 : 它的使用风格，应当尽可能和Tensorflow本身的API一致，使得一个之前不怎么接触它的人，也能快速上手。 在这个工程里，我们扩展的内容其实很简单，就是允许模型调用一个指定的优化器。让我们直接看以下代码： extension.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class AdvNetworkBase : ''' Base object of the advanced network APIs. ''' @staticmethod def optimizer ( name = 'adam' , l_rate = 0.01 , decay = 0.0 ): ''' Define the optimizer by default parameters except learning rate. Note that most of optimizers do not suggest users to modify their speically designed parameters. name: the name of optimizer (default='adam') (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') l_rate: learning rate (default=0.01) decay: decay ratio ('adadeltaDA' do not support this option) ''' name = name . casefold () if name == 'adam' : return tf . keras . optimizers . Adam ( l_rate , decay = decay ) elif name == 'amsgrad' : return tf . keras . optimizers . Adam ( l_rate , decay = decay , amsgrad = True ) elif name == 'adamax' : return tf . keras . optimizers . Adamax ( l_rate , decay = decay ) elif name == 'nadam' : return tf . keras . optimizers . Nadam ( l_rate , schedule_decay = decay ) elif name == 'adadelta' : return tf . keras . optimizers . Adadelta ( l_rate , decay = decay ) elif name == 'rms' : return tf . keras . optimizers . RMSprop ( l_rate , decay = decay ) elif name == 'adagrad' : return tf . keras . optimizers . Adagrad ( l_rate , decay = decay ) elif name == 'nmoment' : return tf . keras . optimizers . SGD ( lr = l_rate , momentum = 0.6 , decay = decay , nesterov = True ) else : return tf . keras . optimizers . SGD ( l_rate , decay = decay ) 我们在这里几乎罗列了所有可能使用的优化器，全部来自Keras API。但我们也可以使用Tensorflow旧版API定义的优化器。目前Tensorflow允许使用两种API中的任意一种来定义，但是实验发现，旧版API系列的优化器要么已经在Keras中能找到对应的版本，要么就水土不服，无法正常调用。因此，上文提到的几种优化器，我们基本上全部在这里用Keras API定义出来。 优化器的参数尽可能应当选择默认参数，并且应当封装起来，不宜让用户自行操作。尤其是Adadelta，Adam这些优化器的 \\rho \\rho 变量，在 Keras文档 中，建议我们遵从默认值。 任何继承该类的子类，都可以通过 self . optimizer ( self . optimizerName , self . learning_rate ) 来将封装好的优化器API调用到主模块中。 项目选项：argparse ¶ 本节将第一次引入 argparse 模块。该模块是python本身继承的原生模块，用来给代码提供启动选项。作为一个完整的Project，我们不希望为了调整参数而频繁地修改代码，因此 argparse 对我们是不可或缺的。在后面所有的Project中，我们都会通过 argparse 模块支持项目选项。 argparse 的官方文档可以在此查阅： argparse — Parser for command-line options, arguments and sub-commands 调用 argparse 的一开始，我们需要定义如下内容： Codes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import argparse def str2bool ( v ): if v . casefold () in ( 'yes' , 'true' , 't' , 'y' , '1' ): return True elif v . casefold () in ( 'no' , 'false' , 'f' , 'n' , '0' ): return False else : raise argparse . ArgumentTypeError ( 'Unsupported value encountered.' ) parser = argparse . ArgumentParser ( description = 'A demo for linear regression.' , formatter_class = argparse . ArgumentDefaultsHelpFormatter ) Output usage: tools.py [ -h ] A demo for linear regression. optional arguments: -h, --help show this help message and exit 我们首先定义了 str2bool 函数，用来支持用户提供布尔类型的选项；之后，我们初始化了 parser ，一般地初始化 parser 时，我们主要定义三个参数： description : 项目描述，展示在参数用法之前的一段字符串； formatter_class : 格式化器 ，我们一般调用的都是 ArgumentDefaultsHelpFormatter ，因为它能支持自动换行，并在每个参数用法后展示该参数的默认值； epilog : 后记 ，这一段说明文字出现在所有参数用法之后。我们一般不太需要这个功能，但是有时候我们可以使用该功能提供一些用法范例给用户。 现在，我们来介绍几种典型的 argparse 可以提供的参数类型。 字符串选项 1 2 3 4 5 6 7 parser . add_argument ( '-o' , '--optimizer' , default = 'adam' , metavar = 'str' , help = ''' \\ The optimizer we use to train the model (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') ''' ) 在这里我们定义了一个字符串选项，这是最常用的一类选项。用户可以像 python codes.py -o amsgrad 或者 python codes.py --optimizer amsgrad 一样，通过添加参数来覆盖默认值(定义在 default 字段下)。 数值选项 1 2 3 4 5 6 parser . add_argument ( '-lr' , '--learningRate' , default = 0.001 , type = float , metavar = 'float' , help = ''' \\ The learning rate for training the model. ''' ) 这里添加的参数类型是一个浮点数，虽然用户在输入参数的时候输入的是一个字符串，但 metavar 字段告诉了用户应该输入浮点数， type 决定了用户输入的字符串会被自动转换为浮点数。类似地，将两个字段的 float 改为 int ，我们就能提供一个整数作为参数选项 布尔选项 1 2 3 4 5 6 parser . add_argument ( '-if' , '--importFlag' , type = str2bool , nargs = '?' , const = True , default = False , metavar = 'bool' , help = ''' \\ The flag of importing pre-trained model. ''' ) 这里添加的是一个二值选项，它的默认值是 False ，用户可以通过输入 ( 'yes' , 'true' , 't' , 'y' , '1' ) 中的任何一个来指定该选项为真，或通过 ( 'no' , 'false' , 'f' , 'n' , '0' ) 中的任何一个指定该选项为假，不区分大小写。该功能由我们之前定义的 str2bool 函数提供。 特别值得注意的是，这个布尔选项还可以有这样的用法，例如： python codes.py -if -o amsgrad 我们如果指派了 -if ，在不指定它任何值的情况下，该选项就会被开启（值为真）了；如果我们去掉这一行的 -if ，则该选项关闭（值为假）。 多值选项 1 2 3 4 5 6 parser . add_argument ( '-ml' , '--mergedLabel' , default = None , type = int , nargs = '+' , metavar = 'int' , help = ''' \\ The merged label settings. ''' ) 上面的设置提供了一个可以输入任意多个 int 型值的选项，用法如下： python codes.py -ml 1 3 4 0 2 -o amsgrad 上述的输入会被解析成一个值为 [ 1 , 3 , 4 , 0 , 2 ] 的列表。当然，我们也可以输入任意多的值，但是特别值得注意的是，由于在 nargs 字段指定了 + ，一旦我们指派该选项，就要至少输入一个值方可。 上面的几种范例，并不是每一种都需要用在Project中。实际设置选项的时候，应当参照实际情况来处理。例如，本例中，就只使用 字符串选项 和 数值选项 两种。更多关于 add_argument 的用法，请参阅官方文档： argparse — add_argument() 在所有参数都设置好后，调用 args = parser . parse_args () 即可使参数选项生效。用户输入的参数选项将返回到 args 中，例如，如果用户制定了 -o ( --optimizer )，那么我们可以调用 args.optimizer 来取出该字段的值。 数据生成 ¶ 本节的数据也是自动生成出来的。参考上一节的数据生成器，重新定义数据生成类的迭代器： dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class TestDataRegSet ( TestDataSet ): ''' A generator of the data set for testing the linear regression model. ''' def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) else : np . random . normal ( 0 , self . noise , size = y . shape ) return x , y 提示 这里我们在没有噪声的情况下，仍然调用随机噪声函数，这是为了确保噪声函数被调用，使得随机数无论开关噪声，都能保持一致性。 该生成器同样是输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。与上一节不同的是，我们在本节可以尝试更进一步，令 \\mathbf{A} \\mathbf{A} 的 SVD分解 写作如下形式 \\begin{align} \\mathbf{A} = \\mathbf{U} \\boldsymbol{\\Sigma} \\mathbf{V}^T. \\end{align} 其中， \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 是一个对角矩阵，对角线上的元素顺次排列，对应为矩阵 \\mathbf{A} \\mathbf{A} 的各个特征值。Numpy的库已经集成了 SVD分解 。我们知道，一个 M \\times N M \\times N 的矩阵经过SVD分解后，应当有 \\mathbf{U}_{M \\times M} \\mathbf{U}_{M \\times M} 和 \\mathbf{V}^T_{N \\times N} \\mathbf{V}^T_{N \\times N} 两个方阵。故而，矩阵 \\boldsymbol{\\Sigma}_{M \\times N} \\boldsymbol{\\Sigma}_{M \\times N} 并非方阵。由于它只有对角线上有元素，所以必定有多出来的空行或空列。因此，若我们设 K = \\min(M,~N) K = \\min(M,~N) ，则我们可以知道，SVD分解其实不需要矩阵 \\mathbf{U} \\mathbf{U} 和 \\mathbf{V}^T \\mathbf{V}^T 两个方阵都是方阵，因为当我们取矩阵 \\boldsymbol{\\Sigma}_{K \\times K} \\boldsymbol{\\Sigma}_{K \\times K} 这一对角部分后，可以只取部分行/列构成的矩阵 \\mathbf{U}_{M \\times K} \\mathbf{U}_{M \\times K} 和 \\mathbf{V}^T_{K \\times N} \\mathbf{V}^T_{K \\times N} 。这相当于我们略去了 \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 上的空行/空列，但是SVD分解仍然能保证恢复出原矩阵来。 在本例中，我们保留 \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 中的前 r r 个特征值，其后的特征值都丢弃，我们把这样的做法称为矩阵的低秩近似，于是有 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 def gen_lowrank ( A , r ): ''' Generate a low rank approximation to matrix A. A: input matrix. r: output rank. ''' sze = A . shape r_min = np . amin ( sze ) assert r <= r_min and r > 0 , 'r should in the range of [1, {0}]' . format ( r_min ) u , s , v = np . linalg . svd ( A , full_matrices = False ) s = np . diag ( s [: r ]) return np . matmul ( np . matmul ( u [:,: r ], s ), v [: r ,:]) 一个低秩近似的矩阵，其定义的仿射变换 (3) (3) 满足不同的 \\mathbf{x} \\mathbf{x} 对应同一个值 \\mathbf{y} \\mathbf{y} ；反之， \\mathbf{y} \\mathbf{y} 将会对应多个不同的解 \\mathbf{x} \\mathbf{x} 。如果我们训练的线性分类器模拟的是 (3) (3) 的逆过程，可能我们会无法模拟出合适的解来；但是，由于我们定义的 (4) (4) 仍是在拟合正过程，故而我们仍然可以把这个问题看成是有解的。在后续的内容中，我们会适当地讨论当问题 解不唯一 时，我们可以进行哪些工作来处理这类问题。 接下来，我们即可测试低秩近似的效果， dparser.py 1 2 3 4 5 6 7 8 9 def test_lowrank (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) for r in range ( 1 , 7 ): A_ = gen_lowrank ( A , r ) RMS = np . sqrt ( np . mean ( np . square ( A - A_ ))) R = np . linalg . matrix_rank ( A_ ) print ( 'Rank = {0}, RMS={1}' . format ( R , RMS )) test_lowrank () Output Rank = 1 , RMS = 6.8600432267325955 Rank = 2 , RMS = 4.677152938185369 Rank = 3 , RMS = 3.216810970685858 Rank = 4 , RMS = 1.8380598782932136 Rank = 5 , RMS = 0.9348520972791058 Rank = 6 , RMS = 9.736224609164252e-15 可见，对于一个标准差为10的矩阵，低秩近似的残差仍然是不超过随机高斯矩阵本身的标准差的。这里的秩是我们在调用低秩近似函数后，使用 np.linalg.matrix_rank 测量的结果。 定义类模型 ¶ 类模型 (Model class) ，在官方文档中也称为函数式API，是Tensorflow-Keras的用户大多数情况下应当使用的模型。它支持一些灵活的操作，使得我们可以 多输入多输出 : 类模型的输入和输出层，都是通过函数定义的。类模型在构建的时候，只需要给定输入和输出即可； 跨层短接 : 由于类模型的各层都由函数定义，可以轻松将不同的层连接起来，通常通过 融合层 完成这一工作； 多优化器 : 可以通过复用同一层对应的对象，构建多个不同的类模型，并分别对它们使用不同的训练数据、损失函数、优化器，以实现多优化目标。 一个顺序模型大致可以描述为下图的模式： graph LR st1(输<br/>入<br/>1) --> l11[层<br/>1-1] l11 --> l21[层<br/>1-2] l21 --> l31[层<br/>1-3] l31 --> ldots1[层<br/>...] st2(输<br/>入<br/>2) --> l12[层<br/>2-1] l12 --> l22[层<br/>2-2] l22 --> l32[层<br/>2-3] l32 --> ldots2[层<br/>...] ldots1 --> l3[层<br/>3] ldots2 --> l3 l3 --> l4[层<br/>4] l4 --> ed1(输<br/>出<br/>1) l4 --> ed2(输<br/>出<br/>2) l22 --> ed3(输出3) l21 --> l3 classDef styStart fill:#FAE6A9,stroke:#BA9132; class st1,ed1,st2,ed2,ed3 styStart 在本节中，尽管我们开始使用类模型，但我们定义的仍然是一个单线路的线性回归模型，换言之，这样的模型完全可以通过 顺序模型 实现出来。我们从这一节开始，不再使用顺序模型，其一，是因为顺序模型都可以写成类模型的形式，其二，是希望读者能够熟悉、灵活运用类模型的优势。 我们定义一个继承自 extension.py 的类， class LinRegHandle ( ext . AdvNetworkBase ): 。与上一节的情况相若，这里我们不再赘述需要定义哪些方法。并且，我们也不会介绍一些改动不大、或者不重要的方法，详情请读者参阅源码。 初始化方法 ¶ 首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 , optimizerName = 'adam' ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch optimizerName: the name of optimizer (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe self . optimizerName = optimizerName 与上一节相比，这里我们增加了一个参数， opmizerName ，用来指定我们选用的优化器名称，默认值为 adam 。 构造方法 ¶ 接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction input = tf . keras . Input ( shape = ( INPUT_SHAPE ,), dtype = tf . float32 ) dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = None , name = 'dense1' )( input ) self . model = tf . keras . Model ( inputs = input , outputs = dense1 ) # Set optimizer self . model . compile ( optimizer = self . optimizer ( self . optimizerName , self . lr ), loss = tf . keras . losses . MeanSquaredError (), metrics = [ self . relation ] ) @staticmethod def relation ( y_true , y_pred ): m_y_true = tf . keras . backend . mean ( y_true , axis = 0 ) m_y_pred = tf . keras . backend . mean ( y_pred , axis = 0 ) s_y_true = tf . keras . backend . sqrt ( tf . keras . backend . mean ( tf . keras . backend . square ( y_true ), axis = 0 ) - tf . keras . backend . square ( m_y_true )) s_y_pred = tf . keras . backend . sqrt ( tf . keras . backend . mean ( tf . keras . backend . square ( y_pred ), axis = 0 ) - tf . keras . backend . square ( m_y_pred )) return tf . keras . backend . mean (( tf . keras . backend . mean ( y_true * y_pred , axis = 0 ) - m_y_true * m_y_pred ) / ( s_y_true * s_y_pred )) 使用类模型时，我们每定义一层，都调用对应的网络层函数，并返回层的输出结果。这就是为何它又叫“函数式API”。我们直接使用均方误差作为我们的损失函数，同时，我们还自行定义了一个评价函数， 皮尔森相关系数 ，该系数专门用来反映两组数据之间是否线性相关，上文我们已经叙述过它的定义。 注意 理想情况下，相关系数应当使用整个数据集来求取。但实际情况下做不到这一点，因此我们求取的相关系数只能看作是一个通过batch得到的估计。故此，我们可以发现，求相关系数要求我们每次输入的样本至少有2个。样本数目越多，相关系数的估计越准确。 注意 从式中可以发现，我们定义的皮尔森相关系数时，完全使用的时Tensorflow-Keras API，因此它当然可以用作我们的训练损失函数。但实际情况下，我们并不使用它。考虑一个反例，当两组数据的分布之间唯一的不同只是均值时，亦即 \\mathbf{y}_2 = \\mathbf{y}_1 + C \\mathbf{y}_2 = \\mathbf{y}_1 + C ，这种情况下皮尔森相关系数仍然为1。虽然我们可以考虑用 余弦相似度函数 (Cosine similarity) 来代替它，但经验显示，余弦相似度最大化到一定程度以后，其对应的均方误差反而上升。考虑另一个反例， \\mathbf{y}_2 = \\alpha \\mathbf{y}_1 \\mathbf{y}_2 = \\alpha \\mathbf{y}_1 ，显然 \\mathbf{y}_1 \\mathbf{y}_1 和 \\mathbf{y}_2 \\mathbf{y}_2 的余弦相似度是1。因此，实际应用中，无论是皮尔森相关系数还是余弦相似度，都适合用作评价函数而不是损失函数。 与上一节不同的是，由于这是一个线性回归器，我们不给它提供激活函数。 训练和测试方法 ¶ 类模型的 compile 、 fit 、 evaluate 、 predict 等API与顺序模型完全相同，详情请查看 Keras中文文档 - Model类 (函数式API) 。 调试 ¶ 上一节中，我们每次训练后，就当场显示分析结果。在本节中，我们会“再进一步”。即使用 tools.py 专门进行实验结果分析（后处理）。相对地，训练后，我们会讲 原始输出 (raw output) 保存到文件里。这是一种编写代码的思想，是为了便于我们批量分析测试数据。在后面的Project中，我们会看到，我们既会编写当场显示分析结果的测试代码，也会编写保存输出后使用 tools.py 分析的代码。究竟使用哪种方式分析数据，视具体情况而定。一般地，测试少量数据时，我们当场分析；批量测试大量数据时，或者需要比较不同选项（例如不同噪声）对结果的影响时，我们在 tools.py 中分析。本实验的情况属于后者。 使实验结果可复现 ¶ 由于我们本次实验需要对比不同设置下的回归器性能，我们希望随机生成的矩阵 \\mathbf{A} \\mathbf{A} ，向量 \\mathbf{c} \\mathbf{c} 应当可复现；换言之，我们希望我们的结果是可复现的。 关于这一问题，Keras的文档给出的建议可以在这里查阅： 如何在 Keras 开发过程中获取可复现的结果？ 我们只需要使 argparse 添加一个选项 -sd ( --seed )，并通过该选项控制： 1 2 3 4 5 6 def setSeed ( seed ): np . random . seed ( seed ) random . seed ( seed + 12345 ) tf . set_random_seed ( seed + 1234 ) if args . seed is not None : # Set seed for reproductable results setSeed ( args . seed ) 其中， np.random.seed ， random.seed ， tf.set_random_seed 分别来自Numpy，python原生的random库，以及Tensorflow。将这三个库的 随机种子 (seed) 设为三个不同的值，即可保证我们每次指定 -sd 后，从程序运行开始，得到的所有随机数都是固定的随机序列。当然， Keras文档 指出，即使如此，我们还不能保证我们的结果完完全全是可复现的。因为多线程算法并发的先后顺序随机性、GPU运算带来的先后顺序随机性等干扰因素，均会导致我们每次得到的结果有细微的偏差。但这些因素对于本实验验证可复现数据的要求几乎没有什么影响。 使实验代码保存输出 ¶ 首先，训练网络。我们同样随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的仿射变换，将该变换中的线性变换矩阵采用秩为4的低秩近似，并且设置好数据集，给定噪声扰动由用户决定。默认值下，噪声为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,10)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,10)^6 ，epoch为20个，每个epoch迭代500次，每次馈入32个样本构成的batch。我们将上一节的主函数输出部分修改成如下形式，并进行不加参数的调试： lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # Initialization A = dp . gen_lowrank ( np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]), RANK ) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataRegSet ( 10 , A , c ) dataSet . config ( noise = args . noise ) # Generate a group of testing samples. if args . seed is not None : setSeed ( args . seed + 1000 ) dataSet . config ( batch = args . testBatchNum ) x , y = next ( dataSet ) # Set the data set for training. dataSet . config ( batch = args . trainBatchNum ) # Construct the model and train it. h = LinRegHandle ( learning_rate = args . learningRate , epoch = args . epoch , steppe = args . steppe , optimizerName = args . optimizer ) h . construct () print ( 'Begin to train:' ) print ( '---------------' ) record = h . train ( iter ( dataSet )) # Check the testing results print ( 'Begin to test:' ) print ( '---------------' ) yp , loss_p , corr_p = h . test ( x , y ) # Check the regressed values W , b = h . model . get_layer ( name = 'dense1' ) . get_weights () # Save if args . outputData is not None : np . savez_compressed ( args . outputData , epoch = record . epoch , loss = record . history [ 'loss' ], corr = record . history [ 'relation' ], test_x = x , test_y = y , pred_y = yp , pred_loss = loss_p , pred_corr = corr_p , W = W , b = b , A = A , c = c ) Output Begin to train: --------------- Epoch 1 /20 500 /500 [==============================] - 1s 2ms/step - loss: 29084 .6994 - relation: 0 .3472 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 15669 .9579 - relation: 0 .5597 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 8145 .8705 - relation: 0 .7134 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4000 .0838 - relation: 0 .8130 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1856 .1477 - relation: 0 .8801 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 799 .4556 - relation: 0 .9354 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 336 .8600 - relation: 0 .9700 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 166 .5899 - relation: 0 .9813 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 113 .2465 - relation: 0 .9831 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 102 .0431 - relation: 0 .9834 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .6678 - relation: 0 .9838 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .8547 - relation: 0 .9833 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .1278 - relation: 0 .9834 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .6048 - relation: 0 .9835 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .1930 - relation: 0 .9832 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .6636 - relation: 0 .9835 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .6665 - relation: 0 .9834 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .2459 - relation: 0 .9832 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .9701 - relation: 0 .9836 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .7719 - relation: 0 .9836 Begin to test: --------------- 10 /10 [==============================] - 0s 5ms/sample - loss: 94 .8883 - relation: 0 .9897 Evaluated loss ( losses.MeanSquaredError ) = 94 .88829040527344 Evaluated metric ( Pearson ' s correlation ) = 0 .9897396 以上结果是不加任何参数的前提下，直接以默认参数运行程序得到的。结果显明，MSE最后收敛在100左右，因为我们馈入的label添加了标准差为10的白噪声，对应的方差为100。可知，实验结果与预期一致。另一方面，我们可以看到，相关系数在这里可以充当类似准确度的作用，考虑到我们默认的噪声为10，这一相关系数的收敛结果是符合我们的预期的。 我们还可以注意到，这段代码中，生成测试集的代码被提前了，这是为了确保每次运行程序，只要指定了种子，生成的测试集总是一致的。 现在，我们可以导出生成数据了，首先，我们改变不同的优化器，其他参数全部一致，例如，学习率均为0.01（Adadelta除外，其初始参数一般推荐为1.0）。调用代码时的参数设置如下 python lin-reg.py -e 25 -sd 1 -do test/algorithm/ { optimizer } -o { optimizer } 其中我们用 {optimizer} 来指代我们选用的优化算法。同时，我们固定测试的epoch数量为25，这是因为有些算法的收敛速度不足以保证20个epoch收敛。 接下来，我们固定优化器为Adam，改变不同的噪声，分别令标准差为0, 1, 5, 10, 50, 100，产生多组结果。 python lin-reg.py -sd 1 -do test/noise/ { noise } -is { noise } 在 tools.py 中分析比较结果 ¶ 首先，在 tools.py 中定义数据解析函数 tools.py 1 2 3 4 5 6 7 8 9 10 11 12 def parseData ( path , keys ): keys_list = dict (( k , []) for k in keys ) name_list = [] for f in os . scandir ( path ): if f . is_file (): name , _ = os . path . splitext ( f . name ) name_list . append ( name . replace ( '_' , ' ' )) data = np . load ( os . path . join ( path , f . name )) for key in keys : keys_list [ key ] . append ( data [ key ]) epoch = data [ 'epoch' ] return name_list , epoch , keys_list 该函数的作用是，给定保存输出文件的文件夹路径，能够自动读取文件夹下所有数据文件，并将不同文件的结果列在列表的不同元素中。 keys 关键字能帮助我们指派我们关心的数据字段。 接下来，我们通过如下代码，对比不同优化器条件下的损失函数和测度函数，对比不同噪声条件下的损失函数和测度函数，输出的曲线反映了对训练过程的跟踪。 tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def showCurves ( path , prefix = '{0}' , converter = str ): ''' Show curves from different tests in a same folder. ''' name_list , epoch , keys_list = parseData ( path , [ 'loss' , 'corr' ]) loss_list = keys_list [ 'loss' ] corr_list = keys_list [ 'corr' ] if ( not loss_list ) or ( not corr_list ): raise FileExistsError ( 'No data found, could not draw curves.' ) for i in range ( len ( loss_list )): plt . semilogy ( loss_list [ i ], label = prefix . format ( converter ( name_list [ i ])), marker = MARKERS [ i % 9 ], markevery = 3 ) plt . legend () plt . xlabel ( 'epoch' ), plt . ylabel ( 'MSE' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . tight_layout (), plt . show () for i in range ( len ( corr_list )): plt . plot ( corr_list [ i ], label = prefix . format ( converter ( name_list [ i ])), marker = MARKERS [ i % 9 ], markevery = 3 ) plt . legend () plt . xlabel ( 'epoch' ), plt . ylabel ( 'Pearson \\' s correlation' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . tight_layout (), plt . show () showCurves ( './test/algorithm' ) showCurves ( './test/noise' , prefix = 'ε=N(0,{0})' , converter = int ) Output (优化器) 损失函数 (MSE) 测度函数 (相关系数) Output (噪声) 损失函数 (MSE) 测度函数 (相关系数) 可见，损失曲线反映了训练的进度，而测度曲线反映了当前的准确度。我们可以得到如下结论： 令人意外的是，SGD和Nesterov动量法收敛速度最快。这是由于这两种方法没有引入对学习率的调整。我们使用的损失函数初始点梯度非常大，这使得简单的方法，形如SGD和动量法在一开头就取得了非常迅速的下降；而对那些需要调整学习率的算法而言，初始梯度在很大的情况下，会导致初始学习率被降到较小的水准。这就是为何Adagrad几乎不收敛的原因，因为一开始这一算法的学习率就被大梯度抑制到将近0的水平了，导致训练无法为继； 在调整学习率的算法里，收敛速度有 RMSprop > Adam = NAdam > Adamax = AMSgrad > Adadelta。从AMSgrad以上的这些算法都可资利用，Adadelta的原理和RMSprop几乎相同但效果相差甚巨，这是由于参数不同引起的，我们虽然将Adadelta的学习率特地设为 1.0 ，仍然远远不如RMSprop，可见一个合适的参数对算法的重要性。 噪声的输出结果并不令人意外，所有噪声条件下的MSE最后都收敛到对应的噪声方差上。 为了检查测试集的情况，我们通过以下函数来绘制比较不同样本在不同优化器、不同噪声条件下的RMSE（均方根误差）， tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def showBars ( path , prefix = '{0}' , converter = str , ylim = None ): ''' Show bar graphs for RMSE for each result ''' name_list , epoch , keys_list = parseData ( path , [ 'test_y' , 'pred_y' ]) #print(keys_list) ytrue_list = keys_list [ 'test_y' ] ypred_list = keys_list [ 'pred_y' ] def RMSE ( y_true , y_pred ): return np . sqrt ( np . mean ( np . square ( y_true - y_pred ), axis = 1 )) N = ytrue_list [ 0 ] . shape [ 0 ] NG = len ( ytrue_list ) for i in range ( NG ): plt . bar ([ 0.6 + j + 0.8 * i / NG + 0.4 / NG for j in range ( - 1 , 9 , 1 )], RMSE ( ytrue_list [ i ], ypred_list [ i ]), width = 0.8 / NG , label = prefix . format ( converter ( name_list [ i ]))) plt . legend ( ncol = 5 ) plt . xlabel ( 'sample' ), plt . ylabel ( 'RMSE' ) if ylim is not None : plt . ylim ([ 0 , ylim ]) plt . gcf () . set_size_inches ( 12 , 5 ), plt . tight_layout (), plt . show () showBars ( './test/algorithm' , ylim = 70 ) showBars ( './test/noise' , prefix = 'ε=N(0,{0})' , converter = int ) Output (优化器) Output (噪声) 上述结果反映了 测试结果和训练情况相仿，这是由于我们的训练集和测试机完全独立同分布； Adadelta和Adagrad还没有训练好，它们的误差明显大于其他算法。且Adagrad已经无法收敛，可见这种算法不实用。 再接下来，我们要分别展示不同测试下的输出。下面列举的所有输出由该函数所产生： tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def saveResults ( path , opath , oprefix , datakeys , title = '' , xlabel = None , ylabel = None , onlyFirst = False , plot = False , prefix = ' ({0})' , converter = str ): ''' Save result graphs to a folder. ''' name_list , _ , data_list = parseData ( path , datakeys ) if plot : # show curves c_list = data_list [ 'c' ] b_list = data_list [ 'b' ] NG = len ( b_list ) for i in range ( NG ): plt . plot ( c_list [ i ] . T , label = 'c' ) plt . plot ( b_list [ i ] . T , label = 'b' ) plt . legend () plt . gca () . set_title ( title + prefix . format ( converter ( name_list [ i ]))) if xlabel is not None : plt . xlabel ( xlabel ) if ylabel is not None : plt . ylabel ( ylabel ) plt . gcf () . set_size_inches ( 5 , 5 ) if onlyFirst : formatName = '' else : formatName = name_list [ i ] . replace ( ' ' , '_' ) plt . savefig ( os . path . join ( opath , oprefix + '{0}.svg' . format ( formatName ))) plt . close ( plt . gcf ()) if onlyFirst : return else : # show images data_list = data_list [ datakeys [ 0 ]] NG = len ( data_list ) for i in range ( NG ): plt . imshow ( data_list [ i ], interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( title + prefix . format ( converter ( name_list [ i ]))) if xlabel is not None : plt . xlabel ( xlabel ) if ylabel is not None : plt . ylabel ( ylabel ) plt . gcf () . set_size_inches ( 6 , 5 ) if onlyFirst : formatName = '' else : formatName = name_list [ i ] . replace ( ' ' , '_' ) plt . savefig ( os . path . join ( opath , oprefix + '{0}.png' . format ( formatName ))) plt . close ( plt . gcf ()) if onlyFirst : return 测试代码 1 2 3 4 5 6 7 8 9 10 11 12 13 def saveAllResults (): saveResults ( './test/algorithm' , './record/algorithm' , 'alg-A-' , [ 'A' ], title = 'A' , prefix = '' , onlyFirst = True ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-yt-' , [ 'test_y' ], title = 'True values' , prefix = '' , onlyFirst = True ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-y-' , [ 'pred_y' ], title = 'Predicted values' ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-W-' , [ 'W' ], title = 'W' ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-cb-' , [ 'c' , 'b' ], title = 'Biases' , plot = True ) saveResults ( './test/noise' , './record/noise' , 'noi-A-' , [ 'A' ], title = 'A' , prefix = '' , onlyFirst = True ) saveResults ( './test/noise' , './record/noise' , 'noi-yt-' , [ 'test_y' ], title = 'True values' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-y-' , [ 'pred_y' ], title = 'Predicted values' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-W-' , [ 'W' ], title = 'W' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-cb-' , [ 'c' , 'b' ], title = 'Biases' , plot = True , prefix = ' (ε=N(0,{0}))' , converter = int ) saveAllResults () 首先考虑不同优化器的测试，在这些测试里，我们确保 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 对所有测试相同，且产生的随机数据真值 \\mathbf{y}_{\\mathrm{true}} \\mathbf{y}_{\\mathrm{true}} 对所有测试也相同，亦即： \\mathbf{A} \\mathbf{A} \\mathbf{y} \\mathbf{y} 的真实值 于是我们可得到所有的数据 优化器 \\mathbf{y} \\mathbf{y} 的预测值 \\mathbf{W} \\mathbf{W} \\mathbf{b} \\mathbf{b} 与 \\mathbf{c} \\mathbf{c} Adadelta Adagrad Adam Adamax AMSgrad Nesterov Adam Nesterov Moment RMSprop SGD 接下来考虑不同噪声的测试，在这些测试里，我们确保 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 对所有测试相同，但由于噪声大小的不同，随机数据真值 \\mathbf{y}_{\\mathrm{true}} \\mathbf{y}_{\\mathrm{true}} 会有所偏差： \\mathbf{A} \\mathbf{A} 于是我们可得到所有的数据 \\boldsymbol{\\varepsilon} \\sim N(0,~?) \\boldsymbol{\\varepsilon} \\sim N(0,~?) \\mathbf{y} \\mathbf{y} 的真实值 \\mathbf{y} \\mathbf{y} 的预测值 \\mathbf{W} \\mathbf{W} \\mathbf{b} \\mathbf{b} 与 \\mathbf{c} \\mathbf{c} 0 1 5 10 50 100 我们最为看重的，其实是是否拟合出 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 。一系列实验表明， \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的拟合效果甚好。由于我们建立的仿射变换模型和原始仿射变换模型有着完全一致的结构，优化结果反映这一问题的解相当准确。至此，我们已经掌握了一个完整的Project应当具有的模块结构，以及对不同的优化器有了理论和实际的体验。在后续的章节里，除非有特别的应用，我们不再探讨不同的优化器对结果的影响，在绝大多数情况下，我们都将使用AMSgrad。","text_tokens":["当然","原生","3.216810970685858","文章","对比","已知","导数","过大","\\","之间","带动","8547","adamax","甚或","另一方","其一","9700","开来","寻找","参照","解","收集","只取","大多数","往往","sum","运算","开辟","空列","102","里","工程","具体","之一","式","定义","就要","6636","查看","iterator","集成","以下","一个","500","轻松","提出","于是","linalg","关键","rate","same","method","残差","一点","写成","法","users","少则","per","需","113","initialization","因为","重新","相关","自动","就是","10","故而","机数","；","余弦","然而","慢","else","以便","merged","1983","弊端","marker","无关痛痒","名称","看看","tf","位置","optional","亦","条件","─","大多","本身","请参阅","方面","真是","graphs","个别","调试","故此","21","argumenttypeerror","典型","aligned","lr","多数","小小的","proportion","true","描述","虽然","现在","超过","并且","至此","等","大地","平均值","输出","37","数目","反例","l12","接受","诸多","epilog","最优","1.0","4.677152938185369","实用","amin","以后","反向","trick","称为","看到","足以","手","考虑","通常","基本","机","如何","epsilon","正常","自定","算是","10.0","双份","入手","特例","9.736224609164252","could","uniform","摘要","outputs","效果","l3","成效","设","来自","严格","叫","cls","nesterov","行","相似","关注","性相","水平","第一","or","目标","每次","randomnormal","ratio","用","方差","打算","受到","analyzing","防止","alg","介绍","file","情况","帮助","bar","extending","高级","展示","*","splitext","只是","2459","才","额外","后面","远不如","正值","different","fill","by","源码","简单","cosine","inputs","neural","内容","电子","满足","排列","noi","2c","、","to","args","更","return","data","sze","e","9831","bool","又","：","次序","不好","parser","对于","转换","模块化","parameters","看","远远","字符","范围","提示","文件","掌握","of","v","本原","o","bias","argumentdefaultshelpformatter","constant","k","stochastic","真","tool","for","均","理解","不难看出","回归","参数","一对","首先","不到","选择","全局","地","首尾","序列","算出","机器","一片","mini","showcurves","根据","好处","layer","见到","或许","testing","测试","还是","兴趣","以","遵从","率设","mse","（","三个","gradient","in","选项","卓有","png","例如","都","最大","标量","samples","格式化","8600","equation","rightarrow","常见","反而","用作","秩","parse","决定","axis","descent","不妨","23","_","普遍","sgd","率过","draw","适合","本次","gca","事实上","init","连接起来","的","│","查","dagger","我们","负"," ","showbars","一言","每","上文","2","reg","某","4","平均","str","这","一类","后期","突兀","有","数十","ta","title","联系","9813","整数","去掉","出来","records","module","编写","论","frac","几乎","特别","term","独立","ε","技巧","一方","假","一组","结论","moment","rvert","陡峭","值得注意","测试数据","性极","训练","多个","linclshandle","多线程","sub","/","b","迄今","目前","先后","相比","优势","难以","range","依靠","仿射变换","9835","特殊","尽管","几种","shape","允许","后续","获取","通过","snr","1000","改正","11","上面","lvert","tight","construction","便于","目的","dp","参考","其他","ylabel","speically","低","一些","后","subgradient","程序","变换","轨迹","相应","参考资料","ncol","learning","数据处理","证明","多组","送入","ml","with","字段","接下来","6048","demo","传播","是因为","l21","值得","唯一","均方","…","其","extension","反之","l4","关心","layers","梯度","key","sd","熟悉","16","float","stroke","过多时","24","取得","and","过","each","细微","局部","或缺","，","单独","偏差","讨论","器有","不是","approximation","f","有些","staticmethod","若","说","陷入","regression","表示","所以","先","皮尔森","初始化","不同","大化","从","设计","14","特征值","收敛性","直接","二元","tilde","教程","interpolation","检查","大于","时能","备受","main","s","起来","有所","批量","过高","电子书","kernel","改变","dict","初始","那么","特点","错误","执行","知道","format","这方面","rho","2ac","most","相乘","费用","罢了","等于","增大","版本","正","dparser","outputdata","trained","提升","系数","94","保存","on","秩是","algorithms","强","12345","auto","指定","initializer","神经网","it","解决","”","每个","9838","形如","频繁","迭代","backend","下来","nargs","模块","输","出现",")","j","具有","未免","使","svg","diag","什么","动量","大时","no","文字","import","即使","指出","包括","25","similarity","close","this","l11","testdataregset","不难","取出","parsedata","改进","plot","控制","下面","we","列举","9834","测试代码","提到","范例","方式","这四","root","9832","读取","模型","多值","型值","可变","完成","方法","对应","表明","9897396","sigma","nearest","step","从根本上","系列","顺次","水准","令","强时","没有","更进一步","得慢","相若","推广","usage","evaluate","len","青睐","rank","容易","二阶","y","前","__","+","大漏","none","阶段","项目","得","哪","p","外围","模式","迅速","经验","解时","除外","运行","数值","images","apis","小写","特征","ylim","将","set","matrix","在线","就","有成","一方面","高斯","values","求解","convergence","(","rms","接起","description","集","带来","22","使得","为什么","最为","要么","计算出来","ypred","做法","来说","估计","mathbf","由于","44","不足","痛痒","过去","完全","没","首尾相接","两次","需要","或","8130","line","风格","网络层","相当于","究竟","调用","weights","深度","除非","88829040527344","远远不如","从而","方程","分布","成上","选用","大致","sample","]","库","旧","9701","基本原理","障碍","一系","树状","或者","dense1","即可","跟踪","不得","}","曲线","即使如此","在","生效","argument","处","明显","saveallresults","教材","29","符号","小小","笔者","可能","2465","0838","opath","importflag","dense","自己","推断","年","变量","可","程序运行","9354","给","^","尽可能","叙述","退化","should","graph","分类器","出","给出","43","水土","告诉","而言","度","准确度","直观","角","之后","只","因此","不会","顾名","非常","很","关系","¶","它们","166","相同","methods","很多","读写","initializers","当前","器","用法","default","新","需求","-","专门","savez","代码","单","stystart","适应","高度","相差","st2","└","指数","并非","do","0.4","大","0.01","去","格式","开关","点积","0.0","metavar","2ms","一定","此","相关系数","分别","该类","秩为","。","%","入门者","对","times","record","可资利用","策略","希望","制定","45","把","构造","get","append","整个","怎么","用户","9","6678","列","15","设置","cb","exit","7134","一般","非线性","得到","合理","呢","mergedlabel","继承","是否","1.8380598782932136","cookbook","optimizername","功能","setseed","load","拟出","下图","改动","应用","小量","继","replace","这是","not","测量","correlation","了","已经","为本","既会","率均","tensoflow","快速","均会","算法","令人","重申","construct","336","最","顾名思义","至少","短接","不能","同时","tools","层","分解","一旦","属于","其中","seed","width","low","join","合适","6665","41","能","semilogy","值为","w","markers","固定","odot",",","单值","添加","数据","更新","且","history","where","38","要","steppe","ed2","结果","与","相接","d","因而","当上","拟合","0.001","这里","尤其","一节","按照","os","重要","base","偏大","先后顺序","方程组","后者","神经网络","不仅","讲","连接","上","好","一段","存在","print","相仿","5597","support","选取","求导","理想","必定","输入","常","一个多","yes","中能","5899","gcf","本","之前","不足以","残留","mapsto","逐渐","默认值","元素","推导","越","被","losses","这个","一种","0.8","子类","pre","100","l32","scandir","可是","主要","50","the","好后","yp","biases","花招","原因","26","空行","略去","参数设置","常用","8","corr","惯性","必须","连","看重","9836","二值","准确","找到","27","仍然",">","schedule","详情","会论","依然","带","39","顺序","generator","mathbb","6.8600432267325955","799","让","白","正是","yt","l31","mathrm","ytrue","if","command","计算","事实","相反","引入","绝大多数","返回","区域","modify","不可","generate","自","有着","5ms","不加","nabla","视","最快","降到","matrices","查阅","旧版","但","增加","真正","random","为何","性能","跟","是","提及","前提","our","也就是说","卓有成效","4556","用来","?","use","累计","符合","8705","不","12","9897","显然","adam","numpy","同一","查考","<","适用","online","时","人","对角线","9579","开始","path","epochs","found","一致性","总是","一致","文档","saveresults","损失","save","噪声","一行","input","假设","4000","个点","变性","真值","领域","自行","则","g","曲率","type","33","来","signal","参考文献","18","有趣","training","keras","那些","prefix","size","前述","继续","argparse","29084","问题","比较","有人","不可或缺","from","注意","两组","自然而然","共同","线性变换","和","换言之","后来者","int","dtype","error","默认","t","过程","有时","that","大小写","规范","原始","their","关乎","显示","陌生","种","封装","其实","optimization","学习","节","pass","squared","具体情况","任意","importing","解析","value","不太","快乐","仍","重要性","regressed","导致","完完全全","config","一系列","单靠","左右","api","legend","类型","预处理","该字","matplotlib","1477","1e","定义数据","~","9833","调整","其二","28","两种","而是","如下","iter","overline","共轭","flag",":","件夹","opmizername","自定义","模拟出","amsgrad","x","此次","├","{","estimation","object","iterative","次","入","给定","实际","说明","adagrad","经过","探讨","尝试","不过","另","partial","尽","normal","c","换行","最大化","right","activation","theta","实现","后来","详细","成器","放在","36","testbatchnum","复用","这种","意外","数据字","idea","只要","线程","代替","一","统计","17","）","较","layout","cdots","oprefix","只有","记","小时","def","=","13","8883","mathcal","按","pearson","启动","初步","强于","为止","reproductable","elif","const","fae6a9","第一个","体验","settings","compressed","a","#","原理","unsupported","加","真的","有关","np","optimizers","testdataset","结构","理器","测试阶段","problem","各层","标准差","onlyfirst","向量","下","法在","快","就行了","不怎么","arguments","区间","convex","name","取","1278","导出","1s","8801","无关","left","中文","章节","sim","所","relation","线性相关","解不","过于","引用","原则","is","网络","adadeltada","无论","这一","解之","应该","一层","一样","处理","32","布尔","一步","7","概念","raw","路径","begin","写文","子书","指代",".","拥有","赘述","数据分布","仿射","看出","中","保留","标准","除了","可见","认为","思路","下界","31","advnetworkbase","提前","预测","delta","pred","不再","反映","展开讨论","限度","？","产生","预测值","适当","哪些","6994","15669","fit","随机数","rmse","bmatrix","避免","不必","由","神经","同","难看","上述","全部","接下","将会","0.6","来者","3","表述","利用","甚巨","融合","同样","保持","35","测度","false","即","上式","写作","进一步","46","线路","程度","这方","label","...","基础","附图","推翻","argumentparser","丢弃","了解","构建","不得不","应当","主","aspect","matmul","例子","leftarrow","文件夹","求","器为","分类","类似","读者","建议","量","trainbatchnum","段","形式","except","其后","同一个","decay","灵活运用","metrics","第一次","实际上","影响","多则","adaptive","作为","square","信噪比","inches","ldots2","跨层","end","运用","epoch","不如","formatter","advanced","help","特定","甚","复杂","进行","markevery","deep","最低","python","fixed","assert","options","率为","毫无","近似","求取","str2bool","define","将近","同理","解来","优化","sqrt","networks","42","充当","启发","0.9348520972791058","特地","专题","上升","常数","生成器","可变性","train","所示","多线","速度","激活","next","使用","optimizer","m","学生","不宜","class","test","无法","相当","字","种子","full","cdot","普通","momentum","还","可知","开头","推断出","随机性","随着","抑制","plt","传统","自然","但是","一下","self","水土不服","建立","st1","干扰","linear","造成","对角","看作","矩阵","101","5","mean","大量","称","复现","文献","最后","可以","依赖性","绘制","一次","确保","处理器","有时候","后记","metric","出原","loss","一言难尽","beyond","做","ed3","部分","适用性","rmsprop","可调","1","构成","工作","19","信号","扰动","关闭","分析","i","遵照","codes","支持","algorithm","|","'","写出","小","任何","model","0.5","误差","评价","30","然后","比率","available","方","绝大","40","完全相同","6","关键字","u","option","依赖","当场","ext","20","0431","&","涉及","验证","红色","列表","而定","再","计学","式子","后处理","基本上","network","gen","个","想象","processing","随机噪声","论文","为","思想","tests","附近","varepsilon","函数","如果","开发","7719","均值","overview","py","保证","率以","而","nmoment","steps","分离","message","理论","罗列","地方","gb","较大","l22","8145","测试方法","tensorflow","引起","ldots1","svd","率","这些","xlabel","发现","恢复","真实","平缓","求得","raise","group","当于","为此","开启","本例","unconstrained","ba9132","70","converter","黑色","方根","就是说","designed","post","迄今为止","继上","@","它","当","样本","只能","cost","直线","值","采用","馈入","区分","字符串","nadam","project","要求","也","store","集来","类","savefig","l","hat","float32","基于","感到","list","能够","随机","adgrad","设由","无论是","以及","会","alpha","boldsymbol","生成","话题","另一方面","指派","0s","dfrac","像","极端","完整","ng","并","r","点","为了","output","资料","1856","操作","predicted","写","dataset","模拟","覆盖","进度","以上","3472","“","results","colorbar","fileexistserror","datakeys","一般来说","predict","对象","folder","失误","从式","ed1","浮点数","有解","如此","方可","—","n","展开","adadelta","由该","改为","lowrank","成","as","不服","commands","noise","内","即将","扩展","未免太","h","34","formatname","点数","收敛","做过","因素","少量","衰减","遗忘","lin","压力","浮点","这样","多","提供","根本","所有","相对","本节","br","团队","show","逆","大小","0","值过","arg","方阵","官方","evaluated","各个","完全一致","1234","align","mb","作用","suggest","数量","配置","一次函数","各自","子","imshow","不为","keys","抽取","classdef","并发","99","batch","集中","casefold","到","统计学","线性","minimization","gpu","预期","尽可","操作符","期望","该","meansquarederror","结合","调整结构","写为","修改","详情请","未来","推荐",";","limits","min","1930","修正","stddev","接触","参阅","关于","linreghandle","阶梯","[","再进一步","减小","显明","compile","google","越过","下降","次数","很大","curves","将要","add","入门","数据文件","encountered","result","看成","时候","两个","learningrate","构造方法","check","实验","有效","灵活","note"],"title":"线性回归","title_tokens":["线性","回归"]},{"location":"book-1-x/chapter-1/linear-regression/#_1","text":"摘要 本节介绍如何使用类模型(Model)来编写一个线性回归器，以拟合出一个线性模型。本节将第一次介绍如何编写一个带用户参数(选项)的Project，并且允许用户选择不同的优化器、对比验证不同优化算法的效果。","text_tokens":["对比","将","一个","允许","来","project","验证","选项","类","回归","，","用户","参数","器","使用","第一","如何","的","编写","选择","。","拟合","算法","出",")","model","(","并且"," ","模型","本节","带","、","第一次","摘要","不同","一次","本","效果","介绍","优化","线性","节","以"],"title":"线性回归","title_tokens":["线性","回归"]},{"location":"book-1-x/chapter-1/linear-regression/#_2","text":"","text_tokens":[],"title":"理论","title_tokens":["理论"]},{"location":"book-1-x/chapter-1/linear-regression/#_3","text":"设存在一个多输出方程 \\mathbf{y} = \\mathcal{F}(x) \\mathbf{y} = \\mathcal{F}(x) ，当然 \\mathcal{F} \\mathcal{F} 可以是非线性函数，那么我们可以考虑使用一个带可调参数的模型 \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}) \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}) 来模拟它，其中 \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} 是可调的参数。于是，该问题可以被表述为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\boldsymbol{\\Theta}} &\\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathbf{D}_{\\boldsymbol{\\Theta}}(\\mathbf{x}_k) \\right),\\\\ \\mathrm{s.t.}~&\\mathbf{y}_k = \\mathcal{F}(\\mathbf{x}_k). \\end{aligned} \\end{equation} 在我们不知道 \\mathcal{F} \\mathcal{F} 的情况下，我们的目的是使用大量的 \\mathbf{x}_k,~\\mathbf{y}_k \\mathbf{x}_k,~\\mathbf{y}_k 样本，来调整出一个最优的近似模型 \\mathbf{D}_{\\boldsymbol{\\Theta}} \\mathbf{D}_{\\boldsymbol{\\Theta}} 。由于 \\mathcal{F} \\mathcal{F} 是非线性的，这要求我们的 \\mathbf{D}_{\\boldsymbol{\\Theta}} \\mathbf{D}_{\\boldsymbol{\\Theta}} 也可以是非线性的。实际情况下，这样的问题往往不容易求解，尤其是信号的非线性性极强时，该问题很容易陷入局部最优解，从而对求得一个可接受的解造成很大的障碍。 这里 \\mathcal{L} \\mathcal{L} 是损失函数。在回归问题中，很多情况下我们都只能选择 均方误差 (Mean squared error, MSE) 作为损失函数，这是因为回归问题的目的是模拟出一组信号来，而这些信号的分布范围可能是任意的。在一些特别的应用里，例如，如果我们的信号全部为正值，那么我们可以考虑使用 信噪比 (Signal-to-noise ratio, SNR) 来作为我们的损失函数。","text_tokens":["squared","当然","性极","任意","k","最优","强时","全部","在","noise","表述","\\","是","造成","存在","回归","s","参数","考虑","而","容易","选择","y","那么","mean","解","下","大量","可能","这样","非线性","~","一个多","不","往往","调整","可以","sum","知道","arg","里","这些","设","拟出","snr","应用","mse","求得","left","可","一个","模拟出","被","例如","于是","^","都","目的","equation","出","求解","x","(","ratio","一些","损失","它","样本","{","只能","因为","可调","1","_","线性","实际","情况","很","作为","信号","信噪比","mathbf","end","其中","由于","来","也","要求","该","signal","begin","很多","是因为","l","正值","right",".","theta","的","-",")","均方","中","我们","boldsymbol",",","误差"," ","limits","问题","min","带","近似","to","这","从而","=","模拟","方程","&","aligned","分布","mathrm","mathcal","局部","，","error","d","使用","t","很大","。","f","障碍","特别","对","这里","尤其","陷入","模型","输出","范围","一组","n","}","为","接受","函数","如果"],"title":"一般回归问题","title_tokens":["一般","回归","问题"]},{"location":"book-1-x/chapter-1/linear-regression/#_4","text":"继上一节的学习，我们知道如何解一个定义为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 的分类模型。在本节，让我们考虑一个更简单的模型： \\begin{align} \\mathbf{y} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon}. \\end{align} 现在， \\mathbf{y} \\mathbf{y} 是关乎 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 的一个仿射函数，并且我们仍然保留噪声函数 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 。由于这是一个线性模型，我们可以想象到，存在一个线性回归器， \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，使得预测结果为 \\begin{align} \\tilde{\\mathbf{y}} = \\mathbf{W} \\mathbf{x} + \\mathbf{b}. \\end{align} 类似上一节，假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}_k,~\\mathbf{y}_k) \\in \\mathbb{D} (\\mathbf{x}_k,~\\mathbf{y}_k) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 。 故而，该问题可以描述为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} &\\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathbf{W} \\mathbf{x}_k + \\mathbf{b} \\right), \\\\ \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) &= \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{aligned} \\end{equation} 在本例中， \\mathbf{y} \\mathbf{y} 有正有负，因此我们使用均方误差来作为损失函数。","text_tokens":["tilde","任意","k","训练","在","3","上","\\","是","存在","回归","考虑","基本","b","如何","y","解","下","大量","+","符合","~","不","本节","可以","知道","sum","0","arg","定义","align","特征","推断","left","lvert","一个","正","这是","in","本例","^","分类","类似","分类器","equation","x","(","继上","集","损失","当","样本","{","使得","1","噪声","_","因此","到","假设","线性","给定","情况","作为","故而","mathbf","end","由于","来","要求","该","c","|","begin","l","hat","器","right",".","的","新","能","数据分布","仿射","w","-","简单","仍然",")","均方",">","中","我们",",","boldsymbol","其","负","误差"," ","limits","问题","min","2","更","数据","保留","cdots","mathbb","让","=","有","&","和","结果","分布","aligned","mathcal","a","预测","：","，","描述","d","使用","t","现在","。","一节","并且","关乎","模型","bmatrix","时候","想象","对应","n","}","为","rvert","推断出","varepsilon","学习","函数"],"title":"线性回归","title_tokens":["线性","回归"]},{"location":"book-1-x/chapter-1/linear-regression/#_5","text":"作为线性问题，该问题实际上可以写出其解析解。未免读者感到过于突兀，我们先从一个简单的问题开始入手： 例子：一次函数的线性回归 如果我们的矩阵 \\mathbf{A} \\mathbf{A} 退化为标量 a a ，向量 \\mathbf{c} \\mathbf{c} 退化为标量c，那么 (3) (3) 可以重新写为： \\begin{align} y = a x + c + \\varepsilon. \\end{align} 考虑我们拥有N个样本点 (x_k,~y_k) (x_k,~y_k) ，上述问题实际上可以求得解析解。设由这N个点构成了样本向量 \\mathbf{x}_d,~\\mathbf{y}_d \\mathbf{x}_d,~\\mathbf{y}_d (注意与前述的向量区分开来)，则问题可以写成 \\begin{align} \\arg \\min_\\limits{a,~c} \\lVert \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} \\rVert^2_2. \\end{align} 这就是附图所示的，拟合到直线的一次函数回归问题。将该损失函数展开，有 \\begin{equation} \\begin{aligned} \\mathcal{L}(a,~c) &= ( \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} )^T ( \\mathbf{y}_d - a \\mathbf{x}_d - c \\mathbf{1} )\\\\ &= \\mathbf{y}_d^T\\mathbf{y}_d + a^2 \\mathbf{x}_d^T \\mathbf{x}_d + c^2 + 2ac \\mathbf{1}^T \\mathbf{x}_d - 2 a \\mathbf{y}_d^T \\mathbf{x}_d - 2c \\mathbf{1}^T \\mathbf{y}_d. \\end{aligned} \\end{equation} 令 \\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial a}=0,~\\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial c}=0 \\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial a}=0,~\\dfrac{\\partial \\mathcal{L}(a,~c)}{\\partial c}=0 ，则我们得到一组二元一次方程组 \\begin{equation} \\left\\{ \\begin{aligned} a \\mathbf{x}_d^T \\mathbf{x}_d + c \\mathbf{1}^T \\mathbf{x}_d &= \\mathbf{y}_d^T \\mathbf{x}_d. \\\\ c + a \\mathbf{1}^T \\mathbf{x}_d &= \\mathbf{1}^T \\mathbf{y}_d. \\end{aligned} \\right. \\end{equation} 解之，得 \\begin{equation} \\left\\{ \\begin{aligned} a &= \\frac{ \\mathbf{y}_d^T \\mathbf{x}_d - ( \\mathbf{1}^T \\mathbf{y}_d ) ( \\mathbf{1}^T \\mathbf{x}_d ) }{ \\mathbf{x}_d^T \\mathbf{x}_d - (\\mathbf{1}^T \\mathbf{x}_d)^2 } = \\frac{ \\sum_k x_k y_k - \\sum_k y_k \\sum_k x_k }{ \\sum_k (x_k)^2 - \\left(\\sum_k x_k\\right)^2 }. \\\\ c &= \\mathbf{1}^T \\mathbf{y}_d - a ( \\mathbf{1}^T \\mathbf{x}_d ) = \\sum_k y_k - a \\left( \\sum_k x_k \\right). \\end{aligned} \\right. \\end{equation} 这个式子在诸多教材上都会出现，作为学生解回归问题的入门话题。可见，我们在本节讨论的问题并不是一个陌生的问题，相反，我们过去非常熟悉的一个问题，是这个问题的退化到标量下的特殊情况。另，计算该问题的相关系数，我们常使用 \\begin{align} \\rho = \\frac{ \\sum_k \\left(x_k - \\overline{x}\\right) \\left(y_k - \\overline{y}\\right) }{ \\sqrt{ \\sum_k \\left(x_k - \\overline{x}\\right)^2 \\sum_k \\left(y_k - \\overline{y}\\right)^2 } }, \\end{align} 其中 \\overline{x} = \\sum_k x_k ,~ \\overline{y} = \\sum_k y_k \\overline{x} = \\sum_k x_k ,~ \\overline{y} = \\sum_k y_k 。 有了解上述例子的基础，我们自然可以写出， \\begin{equation} \\begin{aligned} \\mathcal{L}(\\mathbf{A},~\\mathbf{c}) &= \\sum_k ( \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k - \\mathbf{c} )^T ( \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k - \\mathbf{c} )\\\\ &= \\sum_k \\left[ \\mathbf{y}_k^T\\mathbf{y}_k + \\mathbf{x}_k^T \\mathbf{A}^T\\mathbf{A} \\mathbf{x}_k + \\mathbf{c}^T \\mathbf{c} + 2 \\mathbf{c}^T \\mathbf{A} \\mathbf{x}_k - 2 \\mathbf{y}_k^T \\mathbf{A} \\mathbf{x}_k - 2 \\mathbf{y}_k^T \\mathbf{c} \\right]. \\end{aligned} \\end{equation} 提示 接下来的求导主要涉及单值对矩阵求导（导数仍是矩阵），单值对向量求导（导数仍是向量）。可以参考 The Matrix Cookbook 查到对应情况下的求导结果。 同理，令 \\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{A}}=0,~\\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{c}}=0 \\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{A}}=0,~\\dfrac{\\partial \\mathcal{L}(\\mathbf{A},~\\mathbf{c})}{\\partial \\mathbf{c}}=0 ，则我们得到一组二元一次方程组 \\begin{equation} \\left\\{ \\begin{aligned} \\sum_k \\left[ \\mathbf{A} \\mathbf{x}_k \\mathbf{x}_k^T + \\mathbf{c} \\mathbf{x}_k^T \\right] &= \\sum_k \\left[ \\mathbf{y}_k \\mathbf{x}_k^T \\right]. \\\\ \\sum_k \\left[ \\mathbf{c} + \\mathbf{A} \\mathbf{x}_k \\right] &= \\sum_k \\left[ \\mathbf{y}_k \\right]. \\end{aligned} \\right. \\end{equation} 解之，得 \\begin{equation} \\left\\{ \\begin{aligned} \\mathbf{A} &= \\left[ N \\sum_k \\left[ \\mathbf{y}_k \\mathbf{x}_k^T \\right] - \\sum_k \\left[ \\mathbf{y}_k \\right] \\sum_k \\left[ \\mathbf{x}_k^T \\right] \\right] \\left[ N \\sum_k \\left[ \\mathbf{x}_k \\mathbf{x}_k^T \\right] - \\sum_k \\left[ \\mathbf{x}_k \\right] \\sum_k \\left[ \\mathbf{x}_k^T \\right] \\right]^{-1} \\\\ \\mathbf{c} &= \\frac{1}{N} \\sum_k \\left[ \\mathbf{y}_k - \\mathbf{A} \\mathbf{x}_k \\right]. \\end{aligned} \\right. \\end{equation} 可见，当上式中的逆不存在时（即低秩的情况），该方程还是有可能解不唯一。 同时，相关系数的计算可以表示为 \\begin{align} \\rho = \\mathrm{mean} \\left[ \\frac{ \\sum_k \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\cdot \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) }{ \\sqrt{ \\sum_k \\left[ \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\cdot \\left(\\mathbf{x}_k - \\overline{\\mathbf{x}}\\right) \\right] \\sum_k \\left[ \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) \\cdot \\left(\\mathbf{y}_k - \\overline{\\mathbf{y}}\\right) \\right] } } \\right]. \\end{align} 这就是 皮尔森相关系数 (Pearson's correlation) 。其中 \\overline{\\mathbf{x}} = \\sum_k \\mathbf{x}_k ,~ \\overline{\\mathbf{y}} = \\sum_k \\mathbf{y}_k \\overline{\\mathbf{x}} = \\sum_k \\mathbf{x}_k ,~ \\overline{\\mathbf{y}} = \\sum_k \\mathbf{y}_k ， \\cdot \\cdot 表示的是两个向量按元素各自相乘。它是式 (11) (11) 在多变量问题上的推广。相当于对向量的每一个元素，分别从统计上求取皮尔森相关系数，然后对向量每个元素对应的皮尔森相关系数求取平均值。","text_tokens":["诸多","上述","方程组","自然","k","令","解析","接下","在","均值","3","上","仍","导数","推广","\\","是","存在","回归","s","考虑","教材","即","矩阵","求导","y","开来","那么","mean","向量","解","下","可能","+","得到","常","~","入手","得","不","多","可以","本节","特殊","sum","基础","附图","逆","0","arg","cookbook","一次","rho","overline","2ac","还是","式","相乘","align","了解","求得","变量","left","（","11","将","lvert","matrix","一个","元素","当于","correlation","解不","了","例子","过于","时","一次函数","^","读者","都","各自","标量","开始","参考","退化","这个","equation","写成","x","(","解之","系数","低","损失","秩","主要","样本","{","the","它","1","实际上","重新","_","构成","到","相关","同时","直线","作为","线性","实际","就是","非常","情况","个点","区分","关系","mathbf","每个","end","则","其中","另","partial","该","过去","接下来","c","begin","'","l","写出","下来","right","写为",".","拥有","的","感到","查","-","简单","出现",")","唯一","设由","未免","中","会","前述","我们",",","单值","其","话题"," ","然后","limits","问题","min","dfrac","相当于","2c","每","求取","2","并","同理","平均","sqrt","点","注意","统计","熟悉","）","这","可见","突兀","=","有","方程","&","aligned","涉及","结果","mathrm","mathcal","按","pearson","所示","与","：","，","[","d","计算","相反","t","使用","讨论","式子","不是","相关系数","]","分别","学生","。","拟合","当上","frac","对","函数","入门","相当","平均值","陌生","表示","cdot","个","先","提示","两个","一组","皮尔森","对应","从","n","}","为","rvert","展开","varepsilon","a","二元","如果"],"title":"求解问题","title_tokens":["求解","问题"]},{"location":"book-1-x/chapter-1/linear-regression/#_6","text":"接下来，我们要介绍几种最常见的优化算法。关于更多这方面的内容，可以查考Google团队编写的在线电子书 Deep Learning 。笔者打算在未来为此开辟专题写文，因此这里只是介绍几种常见的 一阶梯度下降 算法。传统优化领域里，单靠一阶梯度下降往往难以满足对准确度的需求，但深度学习(Deep learning)往往必须使用这些简单的一阶梯度下降算法，就连使用一阶梯度近似二阶梯度的算法 共轭梯度下降 ，在很多情况下都被认为是费用(cost)过高。这是由于一个深度网络，往往具有大量的参数需要训练，因此一个Model的参数少则数十MB，多则上GB。一阶梯度下降算法所需的计算量小，能确保我们一次迭代的过程能迅速完成，因而备受青睐。为了提升其性能，深度学习领域内也对其进行了诸多改进。 注意 其实，论到优化算法，往往不得不提到 反向传播 。不过实际上，一个Tensorflow的入门者，其实完全不需要学习如何推导反向传播的过程。下面我们的叙述也完全不会提及反向传播相关的内容。关于为何我们不需要了解反向传播，在下一节我们会论到。但是，在本教程后期，介绍高级技巧的时候，我们会详细展开。事实上，笔者认为，一个Tensorflow的用户，如果只是为了编写代码，反向传播与ta其实无关痛痒；但只有真正掌握反向传播，我们才算是真正入门了神经网络的理论。 我们在这里说到优化算法，是用在训练网络上的。事实上，只有几种个别的机器学习应用，需要我们在测试阶段执行 迭代算法 (iterative algorithm) 。一般来说，深度学习的训练过程可以被普遍地描述为：已知一个带可调参数 \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} 的模型 \\mathcal{D}_{\\boldsymbol{\\Theta}} \\mathcal{D}_{\\boldsymbol{\\Theta}} ，已知一组数据集 (\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D} (\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D} ，则我们的训练目标为 \\begin{equation} \\begin{aligned} \\arg \\min_\\limits{\\boldsymbol{\\Theta}} \\mathbb{E}_{(\\mathbf{x}_i,~\\mathbf{y}_i) \\in \\mathbb{D}} \\left[ \\mathcal{L} \\left( \\mathbf{y}_i,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_i) \\right) \\right]. \\end{aligned} \\end{equation} 实际情况下，一般用均值估计来代替上式的期望函数。联系我们上一节的优化问题 (1) (1) 和本节的优化问题 (5) (5) ，都可以描述成上式的形式。也就是说，线性分类/回归器，是神经网络在解线性问题时的特例。","text_tokens":["诸多","传统","但是","但","神经网络","接下","教程","训练","在","真正","已知","反向","性能","为何","均值","上","内","是","\\","提及","备受","回归","测试阶段","用户","参数","过高","青睐","/","电子书","单靠","如何","上式","二阶","也就是说","y","地","5","笔者","算是","解","下","大量","机器","理论","一般","难以","多","往往","不","阶段","~","这方","gb","特例","可以","执行","本节","团队","开辟","tensorflow","arg","几种","一次","这方面","里","本","这些","迅速","确保","测试","共轭","式","费用","应用","了解","mb","查考","无关","left","所","不得不","为此","在线","就","这是","一个","推导","in","了","被","时","都","分类","叙述","算法","量","目标","equation","网络","就是说","提升","x","(","常见","少则","形式","用","集","最","需","度","打算","准确度","{","cost","iterative","可调","1","实际上","因此","不会","_","多则","到","相关","普遍","介绍","learning","神经网","就是","实际","情况","线性","来说","；","领域","高级","估计","mathbf","只是","end","i","则","必须","不过","由于","连","才","痛痒","也","来","期望","algorithm","接下来","begin","很多","写文","迭代","子书","传播","l","器","准确","完全","下来","right",".","事实上","进行","无关痛痒","theta","的","小","deep","需求","能","详细","简单","未来",")","内容","电子","model","具有","满足","代码","需要","会","我们","boldsymbol",",","其"," ","limits","问题","会论","min","带","近似","更","数据","一","优化","方面","梯度","为了","代替","注意","个别","深度","mathbb","认为","要","e","后期","只有","专题","关于","数十","ta","和","aligned","mathcal","阶梯","成上","改进","与","联系","：","，","描述","下面","[","因而","计算","d","事实","google","使用","一般来说","过程","下降","]","提到","编写","论","。","入门者","这里","对","一节","说","技巧","入门","模型","时候","不得","一组","完成","掌握","}","其实","为","展开","神经","学习","函数","如果"],"title":"优化算法","title_tokens":["优化","算法"]},{"location":"book-1-x/chapter-1/linear-regression/#_7","text":"接下来，让我们看看第一个算法， 随机梯度下降 (stochastic gradient descent, SGD) 。 随机梯度下降 记学习率为 \\epsilon \\epsilon ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\mathbf{g} 。 注意学习率一般需要设为一个较小的值，视情况而定。 由于梯度的期望满足 \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{g} \\right] &= \\frac{1}{m} \\sum\\limits_{k=1}^m \\mathbb{E} \\left[ \\nabla_{\\boldsymbol{\\Theta}} \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\right] \\\\ &= \\mathbb{E} \\left[ \\nabla_{\\boldsymbol{\\Theta}} \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}) \\right) \\right] = \\nabla_{\\boldsymbol{\\Theta}} \\mathbb{E} \\left[ \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}) \\right) \\right]. \\end{aligned} \\end{equation} 可知随机抽取m个样本计算的梯度，在统计学上的期望等于全局梯度的期望。因此，这是一个有效的算法。 随机梯度下降存在明显的弊端，就是在收敛到（全局或局部）最优解的前提下，全局梯度为0，但通过随机选取batch得到的梯度（一般）可能不为0；并且，迭代受到个别极端样本梯度的影响较大，因此，我们有了第一个改进，即 带动量的随机梯度下降 (SGD with momentum) 。 带动量的随机梯度下降 参考文献 提出该算法的文章，可以在这里参考： On the momentum term in gradient descent learning algorithms. Neural Networks 记学习率为 \\epsilon \\epsilon ，惯性常数为 \\alpha \\alpha ，初始化动量 \\mathbf{v}=\\mathbf{v}_0 \\mathbf{v}=\\mathbf{v}_0 （不考虑继续训练的情况下 \\mathbf{v}_0 = \\mathbf{0} \\mathbf{v}_0 = \\mathbf{0} ），则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 计算带动量的更新值 \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} + \\mathbf{v} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} + \\mathbf{v} 。 显然，我们不难计算出， \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{v} \\right] &= \\alpha \\mathbb{E} \\left[ \\mathbf{v} \\right] - \\epsilon \\mathbb{E} \\left[ \\mathbf{g} \\right]. \\\\ \\mathbb{E} \\left[ \\mathbf{v} \\right] &= - \\frac{\\epsilon}{1 - \\alpha} \\mathbb{E} \\left[ \\mathbf{g} \\right]. \\end{aligned} \\end{equation} 注意惯性通常需要设为 \\alpha \\in (0,~1) \\alpha \\in (0,~1) 。 这种改进的带来的好处是， 每次更新梯度时，上一次的梯度都会以指数衰减的形式残留在本次迭代中，从而确保新的梯度会被旧的梯度部分中和，避免极端梯度对更新参数影响过大； 当求解得到的梯度陷入局部最优时，如果该局部最优处的曲率较小，可以依靠动量的惯性，越过该局部最优解。 附图说明了使用这种算法的好处。黑色路径为SGD的更新轨迹，而红色路径为本算法的更新轨迹，可以看出随着迭代次数的增加，算法收敛的效果强于SGD。 有人从Nesterov在1983年的论文得到启发，提出了一个修正后的带动量随机梯度下降法，即 带Nesterov动量的随机梯度下降 (SGD with Nesterov momentum) 。 带Nesterov动量的随机梯度下降 参考文献 提出该算法的文章，可以在这里参考： A method for unconstrained convex minimization problem with the rate of convergence o\\left( \\frac{1}{k_2} \\right) o\\left( \\frac{1}{k_2} \\right) 记学习率为 \\epsilon \\epsilon ，惯性常数为 \\alpha \\alpha ，初始化动量 \\mathbf{v}=\\mathbf{v}_0 \\mathbf{v}=\\mathbf{v}_0 （不考虑继续训练的情况下 \\mathbf{v}_0 = \\mathbf{0} \\mathbf{v}_0 = \\mathbf{0} ），则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算惯性目标点的位置： \\boldsymbol{\\Theta}^{\\dagger} \\leftarrow \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\boldsymbol{\\Theta}^{\\dagger} \\leftarrow \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} ； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}^{\\dagger}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}^{\\dagger}} (\\mathbf{x}_k) \\right) ； 计算带动量的更新值 \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} \\mathbf{v} \\rightarrow \\alpha \\mathbf{v} - \\epsilon \\mathbf{g} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta}^{\\dagger} - \\epsilon \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta}^{\\dagger} - \\epsilon \\mathbf{g} 。 其实，该方法的更新量期望与前一种方法一样， 显然，我们不难计算出， \\begin{equation} \\begin{aligned} \\mathbb{E} \\left[ \\mathbf{v} \\right] &= - \\frac{\\epsilon}{1 - \\alpha} \\mathbb{E} \\left[ \\mathbf{g} \\right]\\\\ &= \\frac{\\epsilon}{1 - \\alpha} \\nabla_{\\boldsymbol{\\Theta}} \\mathbb{E} \\left[ \\mathcal{L} \\left( \\mathbf{y},~ \\mathcal{D}_{\\boldsymbol{\\Theta} + \\alpha \\mathbf{v}} (\\mathbf{x}) \\right) \\right]. \\end{aligned} \\end{equation} 当收敛到最优解时， \\mathbf{v} \\rightarrow 0 \\mathbf{v} \\rightarrow 0 ，同时有 \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\rightarrow \\boldsymbol{\\Theta} \\boldsymbol{\\Theta} + \\alpha \\mathbf{v} \\rightarrow \\boldsymbol{\\Theta} 。我们在此不展开证明这个算法时能收敛的。但Nesterov的文献表明，它能将上面提到的带动量梯度下降算法的误差从 O\\left(\\frac{1}{K}\\right) O\\left(\\frac{1}{K}\\right) 下降到 O\\left(\\frac{1}{K^2}\\right) O\\left(\\frac{1}{K^2}\\right) 。其中 K K 为迭代次数。下图展示了这种方法的改进原理。它的梯度是在更新动量的惯性部分之后才计算出来的，因此新的梯度和之前的惯性是首尾相接的。实际实现时，按照上面的算法，每次迭代需要更新两次参数，计算一次梯度。合理调整算法的计算次序，可以改进为每次迭代更新一次参数，计算一次梯度。","text_tokens":["原理","但","k","最优","增加","接下","文章","训练","在","stochastic","上","过大","\\","是","处","for","存在","明显","收敛","时能","带动","前提","参数","考虑","通常","problem","而","它","即","选取","epsilon","衰减","y","全局","初始","首尾","前","解","下","称","可能","算出","+","一般","得到","文献","合理","~","不","依靠","调整","较大","可以","sum","附图","好处","0","显然","一次","效果","率","convex","解时","确保","之前","设","以","下图","通过","残留","年","等于","left","nesterov","（","将","gradient","上面","一个","这是","in","了","unconstrained","提出","leftarrow","时","被","为本","^","第一","都","不为","参考","算法","rate","method","量","抽取","equation","每次","出","黑色","目标","一种","这个","法","求解","x","(","rightarrow","部分","形式","convergence","batch","后","带来","当","样本","{","on","the","轨迹","descent","集中","受到","algorithms","一样","之后","1","_","因此","影响","到","同时","统计学","sgd","值","就是","learning","情况","说明","计算出来","实际","证明","minimization","；","展示","mathbf","end","惯性","则","g","路径","其中","由于","曲率","才","with","期望","参考文献","该","本次","接下来","begin","迭代","l","1983","弊端","下来","right",".","theta","实现","的","小","新","能","-","看出","首尾相接","看看","随机",")","neural","dagger","两次","满足","中","需要","alpha","我们",",","boldsymbol","或","继续","会","位置"," ","误差","排列","limits","率为","动量","带","极端","这种","2","有人","修正","数据","更新","梯度","点","注意","统计","）","较","顺序","个别","networks","这","指数","启发","mathbb","e","从而","记","让","=","常数","有","&","aligned","和","不难","按","mathcal","局部","改进","红色","而定","与","相接","：","，","[","计学","出来","d","计算","使用","次序","越过","下降","此","]","次数","提到","m","。","强于","旧","frac","term","这里","对","并且","陷入","个","避免","第一个","按照","方法","表明","momentum","nabla","初始化","从","视","}","论文","为","可知","v","有效","of","o","其实","随着","学习","展开","a","如果"],"title":"引入动量的优化算法","title_tokens":["引入","优化","的","算法","动量"]},{"location":"book-1-x/chapter-1/linear-regression/#_8","text":"上述几种算法共同的特点是，具有一个“学习率”。实际上，这个学习率非常不好处理，值过小时，收敛速度很慢；值过大时，在最优解附近又难以收敛。为了解决这一思路，我们可以令学习率可变。最简单的思路是，将学习率设为指数衰减的（当然也可以设置下界），这样当开始学习的时候，学习率较大；而即将收敛时，学习率又会较小。 但是，以上做法不过是一些小小的花招(trick)罢了，接下来介绍的几种算法，是根据当前计算出的梯度来自适应调整学习率的。理论上，使用这种算法，用户不再需要特别关注学习率对训练的影响，我们尽可以设置一个偏大的学习率，在训练过程中，它能被自适应调整到一个合适的区间上。 首先，我们来介绍一种初步的改进， Adagrad (Adaptive Subgradient) ， Adgrad 参考文献 提出该算法的文章，可以在这里参考： Adaptive Subgradient Methods for Online Learning and Stochastic Optimization 记学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，初始化学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新学习率为： \\mathbf{r} \\leftarrow \\mathbf{r} + \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\mathbf{r} + \\mathrm{diag}(\\mathbf{g})^2 ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} 。 注意文献中常用向量点积 \\odot \\odot 来表示学习率，这样学习率就不是对角矩阵而是向量了。我们这里不定义额外的符号，以便不熟悉相关定义的读者理解。 这一方法的思想是，学习率随着梯度的累计增大而逐渐减小，类似我们使用指数衰减的策略。所不同的是，在梯度小的地方，我们认为梯度平缓，所以学习率减小得慢，以便算法迅速地通过这一片区域；在梯度大地地方，由于梯度陡峭，为了防止我们因为学习率过大漏过该区域，学习率减小得快，以适应梯度的大小。 这个方法没有从根本上解决迭代次数过多时，梯度过小的问题。不难看出该算法学习率以 O\\left(\\frac{1}{\\mathbf{g}^T\\mathbf{g}}\\right) O\\left(\\frac{1}{\\mathbf{g}^T\\mathbf{g}}\\right) 的比率衰减，经验指出，这个算法在很多情况下是不好用的，只能解决一些比较特定的模型。 在这里，我们依然不给出收敛性的证明（或许在未来我们会在专题中讨论这一问题）。读者不必为这些算法的原理感到压力，我们只需要对其有一个直观的了解就好。 考虑到Adagrad学习率减小的速度未免太快了，我们可以考虑它的改进， RMSprop (root mean square proportion) ，注意它是另一个算法Adadelta的特例，不过在本节我们不会讨论Adadelta，有兴趣的读者可以自己去寻找参考资料。 RMSprop 参考文献 提出该算法的文章，可以在这里参考： Overview of mini-batch gradient descent 记学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，衰减参数 \\rho \\rho ，初始化学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新学习率为： \\mathbf{r} \\leftarrow \\rho \\mathbf{r} + (1 - \\rho) \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\rho \\mathbf{r} + (1 - \\rho) \\mathrm{diag}(\\mathbf{g})^2 ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\dfrac{\\epsilon}{\\delta + \\sqrt{\\mathbf{r}}} \\mathbf{g} 。 和上一个算法相比，它唯一的改变就是引入了一个衰减参数 \\rho \\rho ，以指数衰减将之前收集的学习率遗忘。如此就可以控制指数过大的问题，这个trick真是令人一言难尽。但是有趣的是，实际经验中，这个方法真的是卓有成效，是现在常用的神经网络优化算法之一。 最后让我们来介绍当前最实用的算法（之一）， Adam (adaptive momentum estimation) 。顾名思义，它的基本原理是基于对动量的可变估计。实际上，在上一节的Project中，我们选用的优化器就是Adam，Tensorflow的官方教程中，也将Adam作为默认推荐的优化器。 Adam 参考文献 提出该算法的文章，可以在这里参考： Adam: a Method for Stochastic Optimization 特别需要注意的是，Adam的收敛性证明已经被后来者推翻，指出其中存在一个错误。改正后的版本称为AMSGrad，Tensorflow的Keras API支持我们在设置Adam的时候开启AMSGrad模式。关于AMSGrad，我们不在此展开讨论，有兴趣的读者可以参考： On the Convergence of Adam and Beyond 记 k k 为迭代次数，学习率为 \\epsilon \\epsilon ，小量 \\delta \\delta ，衰减参数 \\rho_1,~\\rho_2 \\rho_1,~\\rho_2 ，初始化动量为 \\mathbf{s} = \\mathbf{0} \\mathbf{s} = \\mathbf{0} ，学习率参数对角矩阵为 \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) \\mathbf{r} = \\mathrm{diag}(\\mathbf{0}) ，则在每次迭代中 随机抽取（或从随机排列的数据集中按顺序抽取）m个样本 (\\mathbf{x}_k,~\\mathbf{y}_k) (\\mathbf{x}_k,~\\mathbf{y}_k) ，称这m个样本为一个batch； 计算梯度 \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) \\mathbf{g} = \\frac{1}{m} \\nabla_{\\boldsymbol{\\Theta}} \\sum\\limits_{k=1}^m \\mathcal{L} \\left( \\mathbf{y}_k,~ \\mathcal{D}_{\\boldsymbol{\\Theta}} (\\mathbf{x}_k) \\right) ； 更新动量为： \\mathbf{s} \\leftarrow \\rho_1 \\mathbf{s} + (1 - \\rho_1) \\mathbf{g} \\mathbf{s} \\leftarrow \\rho_1 \\mathbf{s} + (1 - \\rho_1) \\mathbf{g} ； 更新学习率为： \\mathbf{r} \\leftarrow \\rho_2 \\mathbf{r} + (1 - \\rho_2) \\mathrm{diag}(\\mathbf{g})^2 \\mathbf{r} \\leftarrow \\rho_2 \\mathbf{r} + (1 - \\rho_2) \\mathrm{diag}(\\mathbf{g})^2 ； 调整参数大小： \\hat{\\mathbf{s}} \\leftarrow \\dfrac{\\mathbf{s}}{1 - \\rho_1^k} \\hat{\\mathbf{s}} \\leftarrow \\dfrac{\\mathbf{s}}{1 - \\rho_1^k} , \\hat{\\mathbf{r}} \\leftarrow \\dfrac{\\mathbf{r}}{1 - \\rho_2^k} \\hat{\\mathbf{r}} \\leftarrow \\dfrac{\\mathbf{r}}{1 - \\rho_2^k} ； 更新参数 \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\dfrac{ \\hat{\\mathbf{s}} }{\\delta + \\sqrt{\\hat{\\mathbf{r}}}} \\boldsymbol{\\Theta} \\leftarrow \\boldsymbol{\\Theta} - \\epsilon \\dfrac{ \\hat{\\mathbf{s}} }{\\delta + \\sqrt{\\hat{\\mathbf{r}}}} 。 Adam不仅估计了学习率的可变性，还引入了可变的动量。这是迄今为止，我们见到的第一个将动量和可变学习率结合起来的算法。我们当然期望它能带来双份的 快乐 好处，可是…… 为什么会这样呢？ ，已经有文献指出，Adam存在原理上的失误，并提出了改正的算法AMSGrad，这正是我们未来将要在专题中讨论的内容。现在读者只需要知道，Adam的思路其实就是结合动量和可变学习率就行了。 注意 无论是我们没提到的Adadelta还是提到的Adam，其实都引入了动量的概念。那么一个自然而然的idea就是，使用Nesterov动量代替普通的动量。当然，毫无意外的是，已经有人做过了。例如，Adam的Nesterov动量版本叫Nadam，有兴趣的读者不妨去了解一下。","text_tokens":["当然","上述","神经网络","接下","文章","教程","不仅","来者","上","好","过大","\\","存在","s","起来","改变","初始","寻找","那么","特点","解","收集","错误","sum","知道","rho","之前","之一","推翻","定义","罢了","了解","逐渐","增大","一个","版本","被","提出","leftarrow","读者","类似","这个","method","一种","可是","on","the","因为","实际上","花招","影响","adaptive","相关","神经网","就是","作为","常用","解决","square","；","”","然而","慢","以便","迭代","特定","下来",")","具有","未免","diag","什么","率为","动量","依然","毫无","sqrt","大时","优化","真是","顺序","指出","专题","让","正是","可变性","不难","mathrm","小小的","改进","proportion","控制","速度","计算","使用","引入","现在","提到","m","区域","root","大地","模型","自","可变","普通","方法","momentum","nabla","还","随着","从根本上","自然","但是","一下","最优","令","实用","没有","trick","得慢","是","称为","对角","考虑","基本","epsilon","矩阵","y","mean","卓有成效","称","+","双份","文献","大漏","累计","得","不","最后","特例","可以","模式","迅速","经验","成效","来自","叫","adam","nesterov","将","关注","就","online","时","一言难尽","第一","有成","开始","beyond","每次","convergence","(","用","带来","rmsprop","为什么","1","防止","介绍","情况","做法","变性","估计","mathbf","则","g","由于","额外","来","参考文献","支持","有趣","keras","没","小","简单","内容","需要","或","比率","排列","问题","比较","有人","注意","自然而然","共同","和","后来者","又","：","选用","默认","t","不好","过程","基本原理","个","}","其实","为","of","思想","o","optimization","附近","本原","学习","k","在","快乐","stochastic","overview","for","率以","理解","不难看出","参数","而","首先","api","符号","小小","地","理论","~","地方","调整","较大","一片","mini","根据","自己","好处","tensorflow","见到","或许","而是","率","这些","还是","兴趣","以",":","率设","平缓","（","gradient","开启","卓有","例如","amsgrad","^","都","给出","出","x","迄今为止","它","当","样本","{","只能","直观","estimation","descent","不妨","只","_","不会","顾名","非常","很","实际","adagrad","率过","不过","另","nadam","也","project","尽","methods","很多","当前","l","器","hat","right","theta","的","基于","后来","感到","-","随机","adgrad","无论是","会","我们","boldsymbol","适应"," ","dfrac","一言","这种","2","r","并","意外","idea","代替","为了","较","）","指数","这","资料","小时","记","=","有","以上","按","mathcal","去","“","点积","初步","此","。","为止","frac","失误","特别","对","如此","第一个","展开","陡峭","策略","adadelta","a","原理","训练","真的","即将","未免太","收敛","做过","用户","设置","迄今","衰减","遗忘","压力","相比","向量","下","这样","快","就行了","呢","难以","根本","本节","大小","值过","0","几种","区间","官方","通过","小量","改正","left","所","这是","了","已经","参考","算法","令人","抽取","网络","无论","这一","一些","batch","最","subgradient","后","顾名思义","集中","处理","参考资料","到","learning","证明","概念","其中","期望","该","接下来","结合","合适","能","看出","未来","唯一","odot","推荐","中",",","…","其","limits","数据","更新","梯度","熟悉","认为","过多时","关于","思路","and","过","下界","，","delta","不再","减小","d","展开讨论","？","讨论","不是","次数","这里","将要","一节","表示","所以","时候","不必","初始化","不同","从","神经","偏大","收敛性","难看"],"title":"引入可变学习率的优化算法","title_tokens":["可变","引入","率","优化","的","学习","算法"]},{"location":"book-1-x/chapter-1/linear-regression/#_9","text":"","text_tokens":[],"title":"解线性回归问题","title_tokens":["线性","回归","问题","解"]},{"location":"book-1-x/chapter-1/linear-regression/#_10","text":"重申我们之前提到的，我们建议一个完整的工程应当包括 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 在上一节中，我们没有定义 tool.py 和 extension.py ，这是因为我们的工程还很简单，不需要扩展Tensoflow模型，也不需要专门的数据处理代码。相应地，我们把数据的后处理代码直接集成在了主模块 lin-cls.py 里。在这一节，我们要开始构造一个真正严格按照这四部分分离的工程，并且在接下来的各个例子实现里，都会遵照这个模式，读者应当熟悉类似我们所推荐的、这样一个高度分离的模块化设计的思路。","text_tokens":["但","接下","真正","在","没有","有关","跟","把","扩展","上","tool","py","for","构造","结构","main","理器","通常","/","our","lin","自定","预处理","地","用来","分离","这样","不","调整","可以","...","外围","tensorflow","里","模式","工程","处理器","之前","各个","定义","严格","cls",":","无关","件夹","三个","将","所","集成","一个","应当","dparser","主","自定义","了","例子","例如","文件夹","引用","都","读者","类似","开始","建议","子","tensoflow","这个","重申","其他","网络","部分","post","保存","├","the","因为","相应","analyzing","只","处理","数据处理","tools","很","情况","extending","；","分析","送入","其中","遵照","codes","操作符","也","store","接下来","是因为","下来","调整结构",".","实现","的","模块","│","-","专门","简单","内容","model","代码","推荐","放在","需要","中","我们","会","生成"," ","高度","网络层","─","完整","、","extension","并","define","数据","data","└","熟悉","where","除了","这","操作","要","包括","有","思路","and","和","与","，","records","we","module","单独","后处理","提到","。","parser","这里","一节","并且","这四","读取","模块化","模型","按照","processing","文件","还","设计","视","灵活","直接","#"],"title":"代码规范","title_tokens":["代码","规范"]},{"location":"book-1-x/chapter-1/linear-regression/#_11","text":"此次是我们第一次写扩展模块，编写扩展模块的目的是，提供一个更复杂的支持库，以便我们能轻松地使用Tensorflow。因此，扩展模块编写地原则应当包括： 可适用性 : 它应当与我们某一个Project完全无关，就像我们自己基于Tensorflow编写一个扩展库一样，以后我们在任何项目都应该可以使用同一个扩展模块文件； 低依赖性 : 它应当最低限度地需要依赖库。 tensorflow 库本身当然是需要的，而 numpy ， matplotlib 甚或是读写数据的模块，都不宜出现在这里，以确保我们的扩展模块被其他任何模块调用时，依赖关系都是树状的； 强一致性 : 它的使用风格，应当尽可能和Tensorflow本身的API一致，使得一个之前不怎么接触它的人，也能快速上手。 在这个工程里，我们扩展的内容其实很简单，就是允许模型调用一个指定的优化器。让我们直接看以下代码： extension.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class AdvNetworkBase : ''' Base object of the advanced network APIs. ''' @staticmethod def optimizer ( name = 'adam' , l_rate = 0.01 , decay = 0.0 ): ''' Define the optimizer by default parameters except learning rate. Note that most of optimizers do not suggest users to modify their speically designed parameters. name: the name of optimizer (default='adam') (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') l_rate: learning rate (default=0.01) decay: decay ratio ('adadeltaDA' do not support this option) ''' name = name . casefold () if name == 'adam' : return tf . keras . optimizers . Adam ( l_rate , decay = decay ) elif name == 'amsgrad' : return tf . keras . optimizers . Adam ( l_rate , decay = decay , amsgrad = True ) elif name == 'adamax' : return tf . keras . optimizers . Adamax ( l_rate , decay = decay ) elif name == 'nadam' : return tf . keras . optimizers . Nadam ( l_rate , schedule_decay = decay ) elif name == 'adadelta' : return tf . keras . optimizers . Adadelta ( l_rate , decay = decay ) elif name == 'rms' : return tf . keras . optimizers . RMSprop ( l_rate , decay = decay ) elif name == 'adagrad' : return tf . keras . optimizers . Adagrad ( l_rate , decay = decay ) elif name == 'nmoment' : return tf . keras . optimizers . SGD ( lr = l_rate , momentum = 0.6 , decay = decay , nesterov = True ) else : return tf . keras . optimizers . SGD ( l_rate , decay = decay ) 我们在这里几乎罗列了所有可能使用的优化器，全部来自Keras API。但我们也可以使用Tensorflow旧版API定义的优化器。目前Tensorflow允许使用两种API中的任意一种来定义，但是实验发现，旧版API系列的优化器要么已经在Keras中能找到对应的版本，要么就水土不服，无法正常调用。因此，上文提到的几种优化器，我们基本上全部在这里用Keras API定义出来。 优化器的参数尽可能应当选择默认参数，并且应当封装起来，不宜让用户自行操作。尤其是Adadelta，Adam这些优化器的 \\rho \\rho 变量，在 Keras文档 中，建议我们遵从默认值。 任何继承该类的子类，都可以通过 self . optimizer ( self . optimizerName , self . learning_rate ) 来将封装好的优化器API调用到主模块中。","text_tokens":["当然","旧版","任意","系列","但是","但","self","水土不服","全部","不服","在","0.6","以后","3","optimizers","扩展","上","py","好","是","34","\\","怎么","起来","adamax","甚或","手","参数","用户","9","35","基本","而","15","support","目前","nmoment","29","api","选择","正常","地","5","可能","matplotlib","罗列","项目","提供","所有","中能","继承","可以","28","不怎么","自己","依赖性","12","两种","tensorflow","一次","几种","里","rho","这些","工程","确保","optimizername","之前","允许","name","来自","most","以","发现","定义","apis","adam","通过","numpy",":","无关","同一","遵从","变量","可","nesterov","11","将","默认值","以下","一个","应当","就","not","suggest","版本","主","轻松","适用","了","已经","被","时","人","amsgrad","第一","都","尽可能","原则","建议","目的","快速","rate","这个","一致性","其他","adadeltada","一种","designed","rms","(","speically","users","ratio","低","一致","水土","应该","用","此次","适用性","@","except","文档","子类","它","22","the","一样","同一个","强","使得","object","第一次","1","decay","casefold","23","因此","指定","_","要么","到","26","32","就是","很","10","learning","sgd","关系","adagrad","19","；","7","自行","8","else","以便","尽可","nadam","33","来","project","支持","也","18","'","读写","advanced","复杂","器","l","完全","default","keras",".","找到","27","的","基于","模块","能","by","最低","简单","出现","任何",")","内容","代码","rmsprop","中","需要","我们",",","tf","schedule","36"," ","30","available","风格","像","上文","extension","本身","2","某","define","to","更","调用","数据","4","优化","6","return","option","17","16","依赖","do","操作","20","包括","接触","21","25","让","写","24","def","=","0.01","this","13","和","lr","31","advnetworkbase","与","：","true","，","if","出来","限度","默认","0.0","使用","optimizer","提到","该类","编写","库","。","不宜","class","that","几乎","这里","staticmethod","尤其","树状","并且","their","elif","无法","基本上","modify","network","模型","parameters","看","封装","文件","momentum","对应","实验","其实","14","of","base","adadelta","直接","note"],"title":"扩展模块","title_tokens":["扩展","模块"]},{"location":"book-1-x/chapter-1/linear-regression/#argparse","text":"本节将第一次引入 argparse 模块。该模块是python本身继承的原生模块，用来给代码提供启动选项。作为一个完整的Project，我们不希望为了调整参数而频繁地修改代码，因此 argparse 对我们是不可或缺的。在后面所有的Project中，我们都会通过 argparse 模块支持项目选项。 argparse 的官方文档可以在此查阅： argparse — Parser for command-line options, arguments and sub-commands 调用 argparse 的一开始，我们需要定义如下内容： Codes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import argparse def str2bool ( v ): if v . casefold () in ( 'yes' , 'true' , 't' , 'y' , '1' ): return True elif v . casefold () in ( 'no' , 'false' , 'f' , 'n' , '0' ): return False else : raise argparse . ArgumentTypeError ( 'Unsupported value encountered.' ) parser = argparse . ArgumentParser ( description = 'A demo for linear regression.' , formatter_class = argparse . ArgumentDefaultsHelpFormatter ) Output usage: tools.py [ -h ] A demo for linear regression. optional arguments: -h, --help show this help message and exit 我们首先定义了 str2bool 函数，用来支持用户提供布尔类型的选项；之后，我们初始化了 parser ，一般地初始化 parser 时，我们主要定义三个参数： description : 项目描述，展示在参数用法之前的一段字符串； formatter_class : 格式化器 ，我们一般调用的都是 ArgumentDefaultsHelpFormatter ，因为它能支持自动换行，并在每个参数用法后展示该参数的默认值； epilog : 后记 ，这一段说明文字出现在所有参数用法之后。我们一般不太需要这个功能，但是有时候我们可以使用该功能提供一些用法范例给用户。 现在，我们来介绍几种典型的 argparse 可以提供的参数类型。 字符串选项 1 2 3 4 5 6 7 parser . add_argument ( '-o' , '--optimizer' , default = 'adam' , metavar = 'str' , help = ''' \\ The optimizer we use to train the model (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') ''' ) 在这里我们定义了一个字符串选项，这是最常用的一类选项。用户可以像 python codes.py -o amsgrad 或者 python codes.py --optimizer amsgrad 一样，通过添加参数来覆盖默认值(定义在 default 字段下)。 数值选项 1 2 3 4 5 6 parser . add_argument ( '-lr' , '--learningRate' , default = 0.001 , type = float , metavar = 'float' , help = ''' \\ The learning rate for training the model. ''' ) 这里添加的参数类型是一个浮点数，虽然用户在输入参数的时候输入的是一个字符串，但 metavar 字段告诉了用户应该输入浮点数， type 决定了用户输入的字符串会被自动转换为浮点数。类似地，将两个字段的 float 改为 int ，我们就能提供一个整数作为参数选项 布尔选项 1 2 3 4 5 6 parser . add_argument ( '-if' , '--importFlag' , type = str2bool , nargs = '?' , const = True , default = False , metavar = 'bool' , help = ''' \\ The flag of importing pre-trained model. ''' ) 这里添加的是一个二值选项，它的默认值是 False ，用户可以通过输入 ( 'yes' , 'true' , 't' , 'y' , '1' ) 中的任何一个来指定该选项为真，或通过 ( 'no' , 'false' , 'f' , 'n' , '0' ) 中的任何一个指定该选项为假，不区分大小写。该功能由我们之前定义的 str2bool 函数提供。 特别值得注意的是，这个布尔选项还可以有这样的用法，例如： python codes.py -if -o amsgrad 我们如果指派了 -if ，在不指定它任何值的情况下，该选项就会被开启（值为真）了；如果我们去掉这一行的 -if ，则该选项关闭（值为假）。 多值选项 1 2 3 4 5 6 parser . add_argument ( '-ml' , '--mergedLabel' , default = None , type = int , nargs = '+' , metavar = 'int' , help = ''' \\ The merged label settings. ''' ) 上面的设置提供了一个可以输入任意多个 int 型值的选项，用法如下： python codes.py -ml 1 3 4 0 2 -o amsgrad 上述的输入会被解析成一个值为 [ 1 , 3 , 4 , 0 , 2 ] 的列表。当然，我们也可以输入任意多的值，但是特别值得注意的是，由于在 nargs 字段指定了 + ，一旦我们指派该选项，就要至少输入一个值方可。 上面的几种范例，并不是每一种都需要用在Project中。实际设置选项的时候，应当参照实际情况来处理。例如，本例中，就只使用 字符串选项 和 数值选项 两种。更多关于 add_argument 的用法，请参阅官方文档： argparse — add_argument() 在所有参数都设置好后，调用 args = parser . parse_args () 即可使参数选项生效。用户输入的参数选项将返回到 args 中，例如，如果用户制定了 -o ( --optimizer )，那么我们可以调用 args.optimizer 来取出该字段的值。","text_tokens":["当然","上述","原生","3","\\","一段","adamax","false","初始","那么","参照","输入","yes","label","之前","定义","就要","argumentparser","默认值","一个","应当","被","类似","rate","这个","trained","一种","段","pre","主要","the","因为","好后","第一次","指定","自动","作为","10","常用","；","8","每个","else","merged","频繁","formatter","help","二值","nargs","模块","python","出现",")","使","options","optional","str2bool","本身","请参阅","no","文字","import","this","argumenttypeerror","典型","lr","取出","train","true","if","描述","we","command","虽然","使用","引入","现在","optimizer","范例","返回","class","字","不可","多值","型值","还","查阅","epilog","但是","但","是","linear","usage","y","5","用来","?","+","use","none","项目","不","可以","12","一次","数值","有时候","adam","小写","将","后记","就","时","第一","开始","rms","(","description","文档","用","1","一行","介绍","情况","展示","关闭","则","codes","由于","type","后面","来","支持","'","training","任何","内容","model","需要","argparse","或","line","available","to","args","更","不可或缺","调用","6","return","注意","和","列表","bool","int","：","默认","t","]","parser","有时","大小写","或者","转换","即可","字符","为","of","v","o","函数","如果","任意","argumentdefaultshelpformatter","importing","解析","value","在","不太","真","生效","py","for","argument","参数","而","nmoment","首先","类型","地","该字","message","调整","importflag","两种","如下","flag",":","（","三个","raise","in","开启","选项","本例","给","例如","amsgrad","都","格式化","告诉","它","parse","决定","之后","只","因此","_","值","sgd","说明","实际","adagrad","区分","字符串","nadam","project","也","换行","用法","器","default","的","-","代码","会","我们"," ","指派","像","完整","每","2","并","4","一","为了","output","）","str","这","一类","def","=","覆盖","13","有","格式","整数","启动","去掉","metavar","此","。","特别","对","假","elif","浮点数","const","方可","—","n","adadelta","值得注意","settings","a","希望","改为","制定","成","unsupported","commands","h","点数","多个","用户","sub","9","设置","浮点","下","exit","这样","一般","提供","多","所有","mergedlabel","继承","本节","show","大小","0","arguments","几种","功能","官方","通过","11","上面","了","一些","应该","最","后","至少","一样","casefold","处理","到","布尔","tools","learning","7","一旦","ml","字段","该","demo",".","能","值为","修改","值得","中",",","添加","float","参阅","关于","and","或缺","，","[","不是","f","0.001","这里","add","encountered","regression","时候","两个","初始化","learningrate","由","14"],"title":"项目选项：argparse","title_tokens":["选项","argparse","项目","："]},{"location":"book-1-x/chapter-1/linear-regression/#_12","text":"本节的数据也是自动生成出来的。参考上一节的数据生成器，重新定义数据生成类的迭代器： dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class TestDataRegSet ( TestDataSet ): ''' A generator of the data set for testing the linear regression model. ''' def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) else : np . random . normal ( 0 , self . noise , size = y . shape ) return x , y 提示 这里我们在没有噪声的情况下，仍然调用随机噪声函数，这是为了确保噪声函数被调用，使得随机数无论开关噪声，都能保持一致性。 该生成器同样是输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。与上一节不同的是，我们在本节可以尝试更进一步，令 \\mathbf{A} \\mathbf{A} 的 SVD分解 写作如下形式 \\begin{align} \\mathbf{A} = \\mathbf{U} \\boldsymbol{\\Sigma} \\mathbf{V}^T. \\end{align} 其中， \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 是一个对角矩阵，对角线上的元素顺次排列，对应为矩阵 \\mathbf{A} \\mathbf{A} 的各个特征值。Numpy的库已经集成了 SVD分解 。我们知道，一个 M \\times N M \\times N 的矩阵经过SVD分解后，应当有 \\mathbf{U}_{M \\times M} \\mathbf{U}_{M \\times M} 和 \\mathbf{V}^T_{N \\times N} \\mathbf{V}^T_{N \\times N} 两个方阵。故而，矩阵 \\boldsymbol{\\Sigma}_{M \\times N} \\boldsymbol{\\Sigma}_{M \\times N} 并非方阵。由于它只有对角线上有元素，所以必定有多出来的空行或空列。因此，若我们设 K = \\min(M,~N) K = \\min(M,~N) ，则我们可以知道，SVD分解其实不需要矩阵 \\mathbf{U} \\mathbf{U} 和 \\mathbf{V}^T \\mathbf{V}^T 两个方阵都是方阵，因为当我们取矩阵 \\boldsymbol{\\Sigma}_{K \\times K} \\boldsymbol{\\Sigma}_{K \\times K} 这一对角部分后，可以只取部分行/列构成的矩阵 \\mathbf{U}_{M \\times K} \\mathbf{U}_{M \\times K} 和 \\mathbf{V}^T_{K \\times N} \\mathbf{V}^T_{K \\times N} 。这相当于我们略去了 \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 上的空行/空列，但是SVD分解仍然能保证恢复出原矩阵来。 在本例中，我们保留 \\boldsymbol{\\Sigma} \\boldsymbol{\\Sigma} 中的前 r r 个特征值，其后的特征值都丢弃，我们把这样的做法称为矩阵的低秩近似，于是有 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 def gen_lowrank ( A , r ): ''' Generate a low rank approximation to matrix A. A: input matrix. r: output rank. ''' sze = A . shape r_min = np . amin ( sze ) assert r <= r_min and r > 0 , 'r should in the range of [1, {0}]' . format ( r_min ) u , s , v = np . linalg . svd ( A , full_matrices = False ) s = np . diag ( s [: r ]) return np . matmul ( np . matmul ( u [:,: r ], s ), v [: r ,:]) 一个低秩近似的矩阵，其定义的仿射变换 (3) (3) 满足不同的 \\mathbf{x} \\mathbf{x} 对应同一个值 \\mathbf{y} \\mathbf{y} ；反之， \\mathbf{y} \\mathbf{y} 将会对应多个不同的解 \\mathbf{x} \\mathbf{x} 。如果我们训练的线性分类器模拟的是 (3) (3) 的逆过程，可能我们会无法模拟出合适的解来；但是，由于我们定义的 (4) (4) 仍是在拟合正过程，故而我们仍然可以把这个问题看成是有解的。在后续的内容中，我们会适当地讨论当问题 解不唯一 时，我们可以进行哪些工作来处理这类问题。 接下来，我们即可测试低秩近似的效果， dparser.py 1 2 3 4 5 6 7 8 9 def test_lowrank (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) for r in range ( 1 , 7 ): A_ = gen_lowrank ( A , r ) RMS = np . sqrt ( np . mean ( np . square ( A - A_ ))) R = np . linalg . matrix_rank ( A_ ) print ( 'Rank = {0}, RMS={1}' . format ( R , RMS )) test_lowrank () Output Rank = 1 , RMS = 6.8600432267325955 Rank = 2 , RMS = 4.677152938185369 Rank = 3 , RMS = 3.216810970685858 Rank = 4 , RMS = 1.8380598782932136 Rank = 5 , RMS = 0.9348520972791058 Rank = 6 , RMS = 9.736224609164252e-15 可见，对于一个标准差为10的矩阵，低秩近似的残差仍然是不超过随机高斯矩阵本身的标准差的。这里的秩是我们在调用低秩近似函数后，使用 np.linalg.matrix_rank 测量的结果。","text_tokens":["3.216810970685858","接下","将会","3","上","\\","print","s","同样","保持","false","写作","进一步","只取","解","必定","输入","知道","空列","format","定义","丢弃","iterator","集成","dparser","一个","元素","应当","正","matmul","被","于是","linalg","分类","method","这个","残差","形式","其后","the","秩是","因为","同一个","重新","相关","自动","空行","10","略去","机数","故而","square","；","8","else","end","迭代","下来","进行",")","仍然",">","assert","diag","近似","本身","解来","sqrt","0.9348520972791058","generator","6.8600432267325955","生成器","testdataregset","train","if","next","使用","m","class","超过","test","无法","相当","full","generate","方法","对应","sigma","matrices","顺次","但是","self","令","4.677152938185369","random","amin","没有","更进一步","是","linear","称为","对角","len","rank","矩阵","y","5","mean","前","+","不","9.736224609164252","可以","12","效果","确保","设","numpy","特征","同一","行","<","set","matrix","就","出原","时","对角线","高斯","一致性","rms","(","部分","一致","使得","1","噪声","构成","工作","input","情况","做法","*","mathbf","则","由于","来","'","内容","size","model","满足","需要","0.5","或","排列","问题","相当于","to","调用","6","return","data","u","sze","e","和","：","t","过程","]","库","对于","即可","gen","个","提示","随机噪声","}","其实","为","of","v","函数","如果","k","在","仍","py","for","保证","一对","地","可能","1e","定义数据","~","svd","testing","如下","测试","恢复",":","当于","in","本例","模拟出","^","都","should","分类器","x","秩","它","当","{","角","之后","_","因此","值","经过","尝试","也","normal","类","c","器","的","-","成器","随机","以及","会","我们","boldsymbol","生成"," ","2","r","4","为了","output","并非","这","只有","def","=","模拟","有","13","出来","开关","。","times","有解","一组","n","a","lowrank","训练","np","把","noise","testdataset","多个","get","9","/","列","15","标准差","下","这样","多","range","仿射变换","本节","逆","1.8380598782932136","0","方阵","shape","取","各个","拟出","后续","通过","align","11","这是","测量","解不","了","已经","配置","参考","无论","低","batch","后","变换","处理","线性","一步","7","分解","其中","low","该","接下来","begin",".","合适","能","仿射","唯一","中",",","其","min","反之","数据","保留","标准","可见","and","结果","与","，","[","讨论","拟合","适当","approximation","哪些","这里","若","一节","随机数","regression","所以","看成","两个","不同","14","特征值"],"title":"数据生成","title_tokens":["生成","数据"]},{"location":"book-1-x/chapter-1/linear-regression/#_13","text":"类模型 (Model class) ，在官方文档中也称为函数式API，是Tensorflow-Keras的用户大多数情况下应当使用的模型。它支持一些灵活的操作，使得我们可以 多输入多输出 : 类模型的输入和输出层，都是通过函数定义的。类模型在构建的时候，只需要给定输入和输出即可； 跨层短接 : 由于类模型的各层都由函数定义，可以轻松将不同的层连接起来，通常通过 融合层 完成这一工作； 多优化器 : 可以通过复用同一层对应的对象，构建多个不同的类模型，并分别对它们使用不同的训练数据、损失函数、优化器，以实现多优化目标。 一个顺序模型大致可以描述为下图的模式： graph LR st1(输<br/>入<br/>1) --> l11[层<br/>1-1] l11 --> l21[层<br/>1-2] l21 --> l31[层<br/>1-3] l31 --> ldots1[层<br/>...] st2(输<br/>入<br/>2) --> l12[层<br/>2-1] l12 --> l22[层<br/>2-2] l22 --> l32[层<br/>2-3] l32 --> ldots2[层<br/>...] ldots1 --> l3[层<br/>3] ldots2 --> l3 l3 --> l4[层<br/>4] l4 --> ed1(输<br/>出<br/>1) l4 --> ed2(输<br/>出<br/>2) l22 --> ed3(输出3) l21 --> l3 classDef styStart fill:#FAE6A9,stroke:#BA9132; class st1,ed1,st2,ed2,ed3 styStart 在本节中，尽管我们开始使用类模型，但我们定义的仍然是一个单线路的线性回归模型，换言之，这样的模型完全可以通过 顺序模型 实现出来。我们从这一节开始，不再使用顺序模型，其一，是因为顺序模型都可以写成类模型的形式，其二，是希望读者能够熟悉、灵活运用类模型的优势。 我们定义一个继承自 extension.py 的类， class LinRegHandle ( ext . AdvNetworkBase ): 。与上一节的情况相若，这里我们不再赘述需要定义哪些方法。并且，我们也不会介绍一些改动不大、或者不重要的方法，详情请读者参阅源码。","text_tokens":["希望","但","训练","在","连接","st1","3","相若","上","py","是","称为","多个","融合","回归","起来","用户","通常","/","其一","各层","api","下","大多数","线路","这样","输入","优势","多","不","l22","继承","其二","可以","br","...","本节","tensorflow","尽管","ldots1","模式","官方","l3","改动","以","式","定义","通过","下图",":","构建","将","<","一个","应当","轻松","ba9132","都","读者","开始","graph","目标","出","写成","ed3","这一","(","接起","classdef","形式","文档","一些","l32","损失","它","一层","l12","使得","因为","灵活运用","只","1","短接","入","不会","工作","介绍","给定","线性","情况","层","；","ldots2","跨层","运用","由于","它们","也","支持","类","是因为","器","完全","keras",".","fill","连接起来","实现","的","赘述","输","能够","-","源码","l21","详情请",")","仍然","model","中","需要",">","我们",",",";","stystart","单"," ","详情","复用","大多","、","2","并","st2","extension","l4","4","数据","优化","熟悉","顺序","这","stroke","操作","ext","参阅","大","l11","linreghandle","ed2","和","l31","换言之","lr","多数","advnetworkbase","与","：","，","描述","[","大致","出来","不再","使用","]","分别","。","对象","class","哪些","对","这里","一节","并且","或者","即可","模型","ed1","自","fae6a9","输出","时候","完成","方法","对应","由","不同","从","重要","为","同","灵活","函数","#"],"title":"定义类模型","title_tokens":["定义","类","模型"]},{"location":"book-1-x/chapter-1/linear-regression/#_14","text":"首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 , optimizerName = 'adam' ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch optimizerName: the name of optimizer (available: 'adam', 'amsgrad', 'adamax', 'nadam', 'adadelta', 'rms', 'adagrad', 'nmoment', 'sgd') ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe self . optimizerName = optimizerName 与上一节相比，这里我们增加了一个参数， opmizerName ，用来指定我们选用的优化器名称，默认值为 adam 。","text_tokens":["self","增加","3","上","py","for","linclshandle","adamax","参数","9","nmoment","首先","lin","初始","5","steps","相比","用来","__","12","optimizername","name","定义","adam","cls",":","11","默认值","一个","opmizername","了","amsgrad","epochs","rate","rms","(","per","initialization","the","1","_","指定","learning","sgd","10","adagrad","7","8","epoch","nadam","'","training","器",".","init","名称","的","-",")","fixed",",","我们"," ","30","available","2","4","6","优化","def","=","0.01","steppe","13","and","lr","与","：","，","选用","默认","optimizer","。","class","这里","一节","parameters","方法","初始化","14","为","of","adadelta","pass"],"title":"初始化方法","title_tokens":["初始","方法","初始化"]},{"location":"book-1-x/chapter-1/linear-regression/#_15","text":"接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction input = tf . keras . Input ( shape = ( INPUT_SHAPE ,), dtype = tf . float32 ) dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = None , name = 'dense1' )( input ) self . model = tf . keras . Model ( inputs = input , outputs = dense1 ) # Set optimizer self . model . compile ( optimizer = self . optimizer ( self . optimizerName , self . lr ), loss = tf . keras . losses . MeanSquaredError (), metrics = [ self . relation ] ) @staticmethod def relation ( y_true , y_pred ): m_y_true = tf . keras . backend . mean ( y_true , axis = 0 ) m_y_pred = tf . keras . backend . mean ( y_pred , axis = 0 ) s_y_true = tf . keras . backend . sqrt ( tf . keras . backend . mean ( tf . keras . backend . square ( y_true ), axis = 0 ) - tf . keras . backend . square ( m_y_true )) s_y_pred = tf . keras . backend . sqrt ( tf . keras . backend . mean ( tf . keras . backend . square ( y_pred ), axis = 0 ) - tf . keras . backend . square ( m_y_pred )) return tf . keras . backend . mean (( tf . keras . backend . mean ( y_true * y_pred , axis = 0 ) - m_y_true * m_y_pred ) / ( s_y_true * s_y_pred )) 使用类模型时，我们每定义一层，都调用对应的网络层函数，并返回层的输出结果。这就是为何它又叫“函数式API”。我们直接使用均方误差作为我们的损失函数，同时，我们还自行定义了一个评价函数， 皮尔森相关系数 ，该系数专门用来反映两组数据之间是否线性相关，上文我们已经叙述过它的定义。 注意 理想情况下，相关系数应当使用整个数据集来求取。但实际情况下做不到这一点，因此我们求取的相关系数只能看作是一个通过batch得到的估计。故此，我们可以发现，求相关系数要求我们每次输入的样本至少有2个。样本数目越多，相关系数的估计越准确。 注意 从式中可以发现，我们定义的皮尔森相关系数时，完全使用的时Tensorflow-Keras API，因此它当然可以用作我们的训练损失函数。但实际情况下，我们并不使用它。考虑一个反例，当两组数据的分布之间唯一的不同只是均值时，亦即 \\mathbf{y}_2 = \\mathbf{y}_1 + C \\mathbf{y}_2 = \\mathbf{y}_1 + C ，这种情况下皮尔森相关系数仍然为1。虽然我们可以考虑用 余弦相似度函数 (Cosine similarity) 来代替它，但经验显示，余弦相似度最大化到一定程度以后，其对应的均方误差反而上升。考虑另一个反例， \\mathbf{y}_2 = \\alpha \\mathbf{y}_1 \\mathbf{y}_2 = \\alpha \\mathbf{y}_1 ，显然 \\mathbf{y}_1 \\mathbf{y}_1 和 \\mathbf{y}_2 \\mathbf{y}_2 的余弦相似度是1。因此，实际应用中，无论是皮尔森相关系数还是余弦相似度，都适合用作评价函数而不是损失函数。 与上一节不同的是，由于这是一个线性回归器，我们不给它提供激活函数。","text_tokens":["当然","bias","constant","self","as","但","接下","训练","以后","为何","均值","3","上","py","构造","linear","之间","是","\\","均","linclshandle","整个","回归","s","看作","考虑","9","/","直接","而","15","kernel","即","api","不到","lin","y","5","mean","用来","10.0","理想","下","+","use","输入","得到","none","程度","多","提供","不","label","可以","是否","dense","12","0","tensorflow","outputs","显然","经验","optimizername","shape","name","还是","式","定义","叫","adam","通过","cls","发现",":","应用","11","set","一个","应当","相似","construction","relation","线性相关","性相","这是","越","了","给","已经","时","loss","求","都","losses","最大","做","叙述","一点","randomnormal","每次","网络","无论","(","系数","construct","反而","用","batch","@","用作","损失","一层","它","只能","22","the","axis","样本","至少","当","{","度","metrics","1","23","_","因此","同时","相关","到","input","26","initializer","10","就是","作为","线性","情况","关系","实际","19","层","square","7","余弦","*","自行","估计","8","”","mathbf","只是","适合","由于","另","来","要求","该","18","集来","接下来","类","c","'","最大化","initializers","meansquarederror","backend","准确","完全","下来","keras",".","activation","float32","器","的","-","专门","cosine",")","inputs","唯一","仍然","model","无论是","均方","中","alpha",",","我们","tf","误差","其","评价"," ","方","亦","网络层","每","上文","2","并","求取","这种","4","调用","6","stddev","layers","sqrt","return","数据","代替","17","注意","16","两组","这","20","故此","similarity","25","21","上升","24","def","=","有","13","and","结果","过","分布","和","lr","“","又","与","dtype","true","，","[","pred","反映","激活","虽然","0.0","compile","使用","optimizer","一定","]","相关系数","返回","m","不是","。","class","staticmethod","从式","一节","函数","显示","dense1","模型","个","输出","数目","皮尔森","对应","还","反例","不同","大化","}","14","为","a","#"],"title":"构造方法","title_tokens":["方法","构造方法","构造"]},{"location":"book-1-x/chapter-1/linear-regression/#_16","text":"类模型的 compile 、 fit 、 evaluate 、 predict 等API与顺序模型完全相同，详情请查看 Keras中文文档 - Model类 (函数式API) 。","text_tokens":["式","中文","查看","相同","evaluate","类","与","，","完全","keras","compile","的","predict","api","。","-","详情请",")","fit","model","(","文档","等"," ","详情","模型","完全相同","、","函数","顺序"],"title":"训练和测试方法","title_tokens":["测试方法","方法","训练","和","测试"]},{"location":"book-1-x/chapter-1/linear-regression/#_17","text":"上一节中，我们每次训练后，就当场显示分析结果。在本节中，我们会“再进一步”。即使用 tools.py 专门进行实验结果分析（后处理）。相对地，训练后，我们会讲 原始输出 (raw output) 保存到文件里。这是一种编写代码的思想，是为了便于我们批量分析测试数据。在后面的Project中，我们会看到，我们既会编写当场显示分析结果的测试代码，也会编写保存输出后使用 tools.py 分析的代码。究竟使用哪种方式分析数据，视具体情况而定。一般地，测试少量数据时，我们当场分析；批量测试大量数据时，或者需要比较不同选项（例如不同噪声）对结果的影响时，我们在 tools.py 中分析。本实验的情况属于后者。","text_tokens":["具体情况","后者","讲","训练","在","上","py","是","看到","少量","批量","即","进一步","地","大量","一般","相对","哪","本节","本","里","测试","具体","（","就","这是","选项","便于","时","例如","既会","每次","一种","(","保存","后","噪声","处理","影响","到","tools","情况","一步","；","”","分析","属于","raw","后面","project","也",".","进行","的","专门",")","代码","中","会","需要","我们"," ","究竟","比较","数据","为了","output","）","当场","结果","“","而定","，","再进一步","使用","测试代码","后处理","编写","。","对","一节","原始","方式","显示","或者","种","输出","文件","不同","实验","视","思想","测试数据"],"title":"调试","title_tokens":["调试"]},{"location":"book-1-x/chapter-1/linear-regression/#_18","text":"由于我们本次实验需要对比不同设置下的回归器性能，我们希望随机生成的矩阵 \\mathbf{A} \\mathbf{A} ，向量 \\mathbf{c} \\mathbf{c} 应当可复现；换言之，我们希望我们的结果是可复现的。 关于这一问题，Keras的文档给出的建议可以在这里查阅： 如何在 Keras 开发过程中获取可复现的结果？ 我们只需要使 argparse 添加一个选项 -sd ( --seed )，并通过该选项控制： 1 2 3 4 5 6 def setSeed ( seed ): np . random . seed ( seed ) random . seed ( seed + 12345 ) tf . set_random_seed ( seed + 1234 ) if args . seed is not None : # Set seed for reproductable results setSeed ( args . seed ) 其中， np.random.seed ， random.seed ， tf.set_random_seed 分别来自Numpy，python原生的random库，以及Tensorflow。将这三个库的 随机种子 (seed) 设为三个不同的值，即可保证我们每次指定 -sd 后，从程序运行开始，得到的所有随机数都是固定的随机序列。当然， Keras文档 指出，即使如此，我们还不能保证我们的结果完完全全是可复现的。因为多线程算法并发的先后顺序随机性、GPU运算带来的先后顺序随机性等干扰因素，均会导致我们每次得到的结果有细微的偏差。但这些因素对于本实验验证可复现数据的要求几乎没有什么影响。","text_tokens":["希望","查阅","开发","当然","原生","但","即使如此","对比","在","random","没有","性能","3","np","干扰","for","\\","是","保证","因素","多线程","回归","导致","完完全全","设置","如何","矩阵","5","先后","序列","向量","下","复现","+","得到","none","所有","可以","运算","tensorflow","本","这些","setseed","运行","获取","来自","设","通过","1234","numpy",":","可","程序运行","三个","将","set","一个","应当","not","选项","都","开始","建议","均会","is","算法","给出","每次","这一","(","并发","文档","后","程序","带来","{","因为","12345","只","1","不能","_","指定","影响","值","机数","；","gpu","mathbf","其中","由于","seed","要求","本次","该","c","器","完全","keras",".","的","-","python","随机",")","固定","使","中","需要","以及","我们","生成","argparse","添加","tf"," ","什么","问题","、","2","并","args","4","线程","6","数据","sd","顺序","这","即使","指出","def","关于","有","换言之","结果","细微","验证","results","控制","多线","：","，","if","？","偏差","过程","分别","。","库","reproductable","对于","几乎","这里","随机数","等","种子","即可","如此","不同","还","从","实验","}","为","随机性","先后顺序","a","#"],"title":"使实验结果可复现","title_tokens":["复现","使","可","实验","结果"]},{"location":"book-1-x/chapter-1/linear-regression/#_19","text":"首先，训练网络。我们同样随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的仿射变换，将该变换中的线性变换矩阵采用秩为4的低秩近似，并且设置好数据集，给定噪声扰动由用户决定。默认值下，噪声为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,10)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,10)^6 ，epoch为20个，每个epoch迭代500次，每次馈入32个样本构成的batch。我们将上一节的主函数输出部分修改成如下形式，并进行不加参数的调试： lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # Initialization A = dp . gen_lowrank ( np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]), RANK ) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataRegSet ( 10 , A , c ) dataSet . config ( noise = args . noise ) # Generate a group of testing samples. if args . seed is not None : setSeed ( args . seed + 1000 ) dataSet . config ( batch = args . testBatchNum ) x , y = next ( dataSet ) # Set the data set for training. dataSet . config ( batch = args . trainBatchNum ) # Construct the model and train it. h = LinRegHandle ( learning_rate = args . learningRate , epoch = args . epoch , steppe = args . steppe , optimizerName = args . optimizer ) h . construct () print ( 'Begin to train:' ) print ( '---------------' ) record = h . train ( iter ( dataSet )) # Check the testing results print ( 'Begin to test:' ) print ( '---------------' ) yp , loss_p , corr_p = h . test ( x , y ) # Check the regressed values W , b = h . model . get_layer ( name = 'dense1' ) . get_weights () # Save if args . outputData is not None : np . savez_compressed ( args . outputData , epoch = record . epoch , loss = record . history [ 'loss' ], corr = record . history [ 'relation' ], test_x = x , test_y = y , pred_y = yp , pred_loss = loss_p , pred_corr = corr_p , W = W , b = b , A = A , c = c ) Output Begin to train: --------------- Epoch 1 /20 500 /500 [==============================] - 1s 2ms/step - loss: 29084 .6994 - relation: 0 .3472 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 15669 .9579 - relation: 0 .5597 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 8145 .8705 - relation: 0 .7134 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4000 .0838 - relation: 0 .8130 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1856 .1477 - relation: 0 .8801 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 799 .4556 - relation: 0 .9354 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 336 .8600 - relation: 0 .9700 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 166 .5899 - relation: 0 .9813 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 113 .2465 - relation: 0 .9831 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 102 .0431 - relation: 0 .9834 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .6678 - relation: 0 .9838 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .8547 - relation: 0 .9833 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .1278 - relation: 0 .9834 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 99 .6048 - relation: 0 .9835 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .1930 - relation: 0 .9832 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .6636 - relation: 0 .9835 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .6665 - relation: 0 .9834 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 101 .2459 - relation: 0 .9832 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .9701 - relation: 0 .9836 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 100 .7719 - relation: 0 .9836 Begin to test: --------------- 10 /10 [==============================] - 0s 5ms/sample - loss: 94 .8883 - relation: 0 .9897 Evaluated loss ( losses.MeanSquaredError ) = 94 .88829040527344 Evaluated metric ( Pearson ' s correlation ) = 0 .9897396 以上结果是不加任何参数的前提下，直接以默认参数运行程序得到的。结果显明，MSE最后收敛在100左右，因为我们馈入的label添加了标准差为10的白噪声，对应的方差为100。可知，实验结果与预期一致。另一方面，我们可以看到，相关系数在这里可以充当类似准确度的作用，考虑到我们默认的噪声为10，这一相关系数的收敛结果是符合我们的预期的。 我们还可以注意到，这段代码中，生成测试集的代码被提前了，这是为了确保每次运行程序，只要指定了种子，生成的测试集总是一致的。 现在，我们可以导出生成数据了，首先，我们改变不同的优化器，其他参数全部一致，例如，学习率均为0.01（Adadelta除外，其初始参数一般推荐为1.0）。调用代码时的参数设置如下 python lin-reg.py -e 25 -sd 1 -do test/algorithm/ { optimizer } -o { optimizer } 其中我们用 {optimizer} 来指代我们选用的优化算法。同时，我们固定测试的epoch数量为25，这是因为有些算法的收敛速度不足以保证20个epoch收敛。 接下来，我们固定优化器为Adam，改变不同的噪声，分别令标准差为0, 1, 5, 10, 50, 100，产生多组结果。 python lin-reg.py -sd 1 -do test/noise/ { noise } -is { noise }","text_tokens":["全部","接下","3","上","好","\\","print","8547","s","同样","另一方","35","5597","改变","9700","初始","label","5899","102","不足以","6636","mapsto","默认值","主","500","outputdata","被","器为","losses","类似","rate","trainbatchnum","段","系数","形式","94","100","113","50","initialization","the","因为","yp","指定","相关","26","10","参数设置","it","8","每个","corr","9838","epoch","9836","迭代","准确","下来","进行","27","python",")","近似","方面","优化","充当","调试","mathbb","799","25","21","白","testdataregset","train","if","速度","next","9834","现在","optimizer","test","并且","9832","种子","generate","输出","37","5ms","不加","对应","还","9897396","可知","step","令","1.0","random","是","看到","前提","足以","考虑","rank","矩阵","y","101","5","4556","+","none","符合","8705","不","最后","p","可以","uniform","12","9897","除外","确保","运行","adam","cls","将","set","metric","时","loss","9579","一方面","总是","每次","values","(","部分","一致","方差","用","集","22","save","噪声","1","构成","input","4000","19","扰动","mathbf","2459","33","来","不足","18","algorithm","'","training","任何","model","8130","30","29084","to","args","调用","6","data","weights","注意","线性变换","88829040527344","20","e","9831","0431","：","选用","默认","sample","]","9701","dense1","gen","个","}","为","of","o","varepsilon","学习","函数","7719","在","py","for","保证","regressed","参数","config","左右","首先","29","1477","2465","9833","~","0838","8145","28","layer","如下","testing","iter","测试","以",":","mse","9354","（","group","例如","^","samples","8600","x","秩","样本","{","决定","准确度","次","23","_","采用","给定","馈入","关系","166","normal","c","器","的","-","随机","savez","代码","我们","boldsymbol","生成","36","另一方面"," ","testbatchnum","0s","reg","2","r","并","只要","4","为了","17","output","）","1856","这","do","=","dataset","0.01","13","8883","以上","mathcal","3472","pearson","results","9813","2ms","相关系数","分别","秩为","。","一方","record","n","adadelta","compressed","a","#","lowrank","成","训练","加","np","noise","h","34","收敛","get","用户","9","b","/","6678","15","设置","标准差","lin","下","7134","一般","得到","仿射变换","9835","0","optimizername","shape","setseed","name","1278","evaluated","导出","1s","1000","8801","作用","11","sim","not","这是","relation","correlation","了","数量","率均","dp","is","算法","其他","网络","这一","construct","低","336","99","batch","程序","变换","到","同时","32","learning","线性","7","预期","多组","其中","seed","该","接下来","6048","begin","指代","meansquarederror","是因为",".","6665","仿射","w","修改","固定","推荐","中",",","添加","其","1930","数据","history","sd","16","标准","24","linreghandle","steppe","and","结果","31","提前","与","，","[","pred","显明","产生","6994","有些","15669","这里","一节","learningrate","由","check","不同","实验","14","直接"],"title":"使实验代码保存输出","title_tokens":["输出","代码","使","实验","保存"]},{"location":"book-1-x/chapter-1/linear-regression/#toolspy","text":"首先，在 tools.py 中定义数据解析函数 tools.py 1 2 3 4 5 6 7 8 9 10 11 12 def parseData ( path , keys ): keys_list = dict (( k , []) for k in keys ) name_list = [] for f in os . scandir ( path ): if f . is_file (): name , _ = os . path . splitext ( f . name ) name_list . append ( name . replace ( '_' , ' ' )) data = np . load ( os . path . join ( path , f . name )) for key in keys : keys_list [ key ] . append ( data [ key ]) epoch = data [ 'epoch' ] return name_list , epoch , keys_list 该函数的作用是，给定保存输出文件的文件夹路径，能够自动读取文件夹下所有数据文件，并将不同文件的结果列在列表的不同元素中。 keys 关键字能帮助我们指派我们关心的数据字段。 接下来，我们通过如下代码，对比不同优化器条件下的损失函数和测度函数，对比不同噪声条件下的损失函数和测度函数，输出的曲线反映了对训练过程的跟踪。 tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def showCurves ( path , prefix = '{0}' , converter = str ): ''' Show curves from different tests in a same folder. ''' name_list , epoch , keys_list = parseData ( path , [ 'loss' , 'corr' ]) loss_list = keys_list [ 'loss' ] corr_list = keys_list [ 'corr' ] if ( not loss_list ) or ( not corr_list ): raise FileExistsError ( 'No data found, could not draw curves.' ) for i in range ( len ( loss_list )): plt . semilogy ( loss_list [ i ], label = prefix . format ( converter ( name_list [ i ])), marker = MARKERS [ i % 9 ], markevery = 3 ) plt . legend () plt . xlabel ( 'epoch' ), plt . ylabel ( 'MSE' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . tight_layout (), plt . show () for i in range ( len ( corr_list )): plt . plot ( corr_list [ i ], label = prefix . format ( converter ( name_list [ i ])), marker = MARKERS [ i % 9 ], markevery = 3 ) plt . legend () plt . xlabel ( 'epoch' ), plt . ylabel ( 'Pearson \\' s correlation' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . tight_layout (), plt . show () showCurves ( './test/algorithm' ) showCurves ( './test/noise' , prefix = 'ε=N(0,{0})' , converter = int ) Output (优化器) 损失函数 (MSE) 测度函数 (相关系数) Output (噪声) 损失函数 (MSE) 测度函数 (相关系数) 可见，损失曲线反映了训练的进度，而测度曲线反映了当前的准确度。我们可以得到如下结论： 令人意外的是，SGD和Nesterov动量法收敛速度最快。这是由于这两种方法没有引入对学习率的调整。我们使用的损失函数初始点梯度非常大，这使得简单的方法，形如SGD和动量法在一开头就取得了非常迅速的下降；而对那些需要调整学习率的算法而言，初始梯度在很大的情况下，会导致初始学习率被降到较小的水准。这就是为何Adagrad几乎不收敛的原因，因为一开始这一算法的学习率就被大梯度抑制到将近0的水平了，导致训练无法为继； 在调整学习率的算法里，收敛速度有 RMSprop > Adam = NAdam > Adamax = AMSgrad > Adadelta。从AMSgrad以上的这些算法都可资利用，Adadelta的原理和RMSprop几乎相同但效果相差甚巨，这是由于参数不同引起的，我们虽然将Adadelta的学习率特地设为 1.0 ，仍然远远不如RMSprop，可见一个合适的参数对算法的重要性。 噪声的输出结果并不令人意外，所有噪声条件下的MSE最后都收敛到对应的噪声方差上。 为了检查测试集的情况，我们通过以下函数来绘制比较不同样本在不同优化器、不同噪声条件下的RMSE（均方根误差）， tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def showBars ( path , prefix = '{0}' , converter = str , ylim = None ): ''' Show bar graphs for RMSE for each result ''' name_list , epoch , keys_list = parseData ( path , [ 'test_y' , 'pred_y' ]) #print(keys_list) ytrue_list = keys_list [ 'test_y' ] ypred_list = keys_list [ 'pred_y' ] def RMSE ( y_true , y_pred ): return np . sqrt ( np . mean ( np . square ( y_true - y_pred ), axis = 1 )) N = ytrue_list [ 0 ] . shape [ 0 ] NG = len ( ytrue_list ) for i in range ( NG ): plt . bar ([ 0.6 + j + 0.8 * i / NG + 0.4 / NG for j in range ( - 1 , 9 , 1 )], RMSE ( ytrue_list [ i ], ypred_list [ i ]), width = 0.8 / NG , label = prefix . format ( converter ( name_list [ i ]))) plt . legend ( ncol = 5 ) plt . xlabel ( 'sample' ), plt . ylabel ( 'RMSE' ) if ylim is not None : plt . ylim ([ 0 , ylim ]) plt . gcf () . set_size_inches ( 12 , 5 ), plt . tight_layout (), plt . show () showBars ( './test/algorithm' , ylim = 70 ) showBars ( './test/noise' , prefix = 'ε=N(0,{0})' , converter = int ) Output (优化器) Output (噪声) 上述结果反映了 测试结果和训练情况相仿，这是由于我们的训练集和测试机完全独立同分布； Adadelta和Adagrad还没有训练好，它们的误差明显大于其他算法。且Adagrad已经无法收敛，可见这种算法不实用。 再接下来，我们要分别展示不同测试下的输出。下面列举的所有输出由该函数所产生： tools.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def saveResults ( path , opath , oprefix , datakeys , title = '' , xlabel = None , ylabel = None , onlyFirst = False , plot = False , prefix = ' ({0})' , converter = str ): ''' Save result graphs to a folder. ''' name_list , _ , data_list = parseData ( path , datakeys ) if plot : # show curves c_list = data_list [ 'c' ] b_list = data_list [ 'b' ] NG = len ( b_list ) for i in range ( NG ): plt . plot ( c_list [ i ] . T , label = 'c' ) plt . plot ( b_list [ i ] . T , label = 'b' ) plt . legend () plt . gca () . set_title ( title + prefix . format ( converter ( name_list [ i ]))) if xlabel is not None : plt . xlabel ( xlabel ) if ylabel is not None : plt . ylabel ( ylabel ) plt . gcf () . set_size_inches ( 5 , 5 ) if onlyFirst : formatName = '' else : formatName = name_list [ i ] . replace ( ' ' , '_' ) plt . savefig ( os . path . join ( opath , oprefix + '{0}.svg' . format ( formatName ))) plt . close ( plt . gcf ()) if onlyFirst : return else : # show images data_list = data_list [ datakeys [ 0 ]] NG = len ( data_list ) for i in range ( NG ): plt . imshow ( data_list [ i ], interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( title + prefix . format ( converter ( name_list [ i ]))) if xlabel is not None : plt . xlabel ( xlabel ) if ylabel is not None : plt . ylabel ( ylabel ) plt . gcf () . set_size_inches ( 6 , 5 ) if onlyFirst : formatName = '' else : formatName = name_list [ i ] . replace ( ' ' , '_' ) plt . savefig ( os . path . join ( opath , oprefix + '{0}.png' . format ( formatName ))) plt . close ( plt . gcf ()) if onlyFirst : return 测试代码 1 2 3 4 5 6 7 8 9 10 11 12 13 def saveAllResults (): saveResults ( './test/algorithm' , './record/algorithm' , 'alg-A-' , [ 'A' ], title = 'A' , prefix = '' , onlyFirst = True ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-yt-' , [ 'test_y' ], title = 'True values' , prefix = '' , onlyFirst = True ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-y-' , [ 'pred_y' ], title = 'Predicted values' ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-W-' , [ 'W' ], title = 'W' ) saveResults ( './test/algorithm' , './record/algorithm' , 'alg-cb-' , [ 'c' , 'b' ], title = 'Biases' , plot = True ) saveResults ( './test/noise' , './record/noise' , 'noi-A-' , [ 'A' ], title = 'A' , prefix = '' , onlyFirst = True ) saveResults ( './test/noise' , './record/noise' , 'noi-yt-' , [ 'test_y' ], title = 'True values' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-y-' , [ 'pred_y' ], title = 'Predicted values' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-W-' , [ 'W' ], title = 'W' , prefix = ' (ε=N(0,{0}))' , converter = int ) saveResults ( './test/noise' , './record/noise' , 'noi-cb-' , [ 'c' , 'b' ], title = 'Biases' , plot = True , prefix = ' (ε=N(0,{0}))' , converter = int ) saveAllResults () 首先考虑不同优化器的测试，在这些测试里，我们确保 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 对所有测试相同，且产生的随机数据真值 \\mathbf{y}_{\\mathrm{true}} \\mathbf{y}_{\\mathrm{true}} 对所有测试也相同，亦即： \\mathbf{A} \\mathbf{A} \\mathbf{y} \\mathbf{y} 的真实值 于是我们可得到所有的数据 优化器 \\mathbf{y} \\mathbf{y} 的预测值 \\mathbf{W} \\mathbf{W} \\mathbf{b} \\mathbf{b} 与 \\mathbf{c} \\mathbf{c} Adadelta Adagrad Adam Adamax AMSgrad Nesterov Adam Nesterov Moment RMSprop SGD 接下来考虑不同噪声的测试，在这些测试里，我们确保 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 对所有测试相同，但由于噪声大小的不同，随机数据真值 \\mathbf{y}_{\\mathrm{true}} \\mathbf{y}_{\\mathrm{true}} 会有所偏差： \\mathbf{A} \\mathbf{A} 于是我们可得到所有的数据 \\boldsymbol{\\varepsilon} \\sim N(0,~?) \\boldsymbol{\\varepsilon} \\sim N(0,~?) \\mathbf{y} \\mathbf{y} 的真实值 \\mathbf{y} \\mathbf{y} 的预测值 \\mathbf{W} \\mathbf{W} \\mathbf{b} \\mathbf{b} 与 \\mathbf{c} \\mathbf{c} 0 1 5 10 50 100 我们最为看重的，其实是是否拟合出 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 。一系列实验表明， \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的拟合效果甚好。由于我们建立的仿射变换模型和原始仿射变换模型有着完全一致的结构，优化结果反映这一问题的解相当准确。至此，我们已经掌握了一个完整的Project应当具有的模块结构，以及对不同的优化器有了理论和实际的体验。在后续的章节里，除非有特别的应用，我们不再探讨不同的优化器对结果的影响，在绝大多数情况下，我们都将使用AMSgrad。","text_tokens":["上述","接下","对比","0.6","interpolation","3","上","好","检查","\\","大于","利用","甚巨","print","s","adamax","有所","相仿","测度","35","false","即","dict","46","初始","解","大多数","label","gcf","format","里","定义","以下","一个","元素","应当","aspect","被","文件夹","于是","关键","same","段","法","0.8","系数","保存","100","scandir","50","因为","biases","auto","原因","影响","相关","自动","26","10","就是","square","；","inches","8","corr","else","epoch","看重","不如","形如","甚","准确","下来","marker","27","markevery","模块","j",")","仍然","具有",">","svg","亦","条件","动量","大多","39","将近","优化","no","sqrt","graphs","42","特地","25","21","close","yt","mathrm","parsedata","多数","plot","ytrue","true","if","下面","速度","列举","虽然","使用","引入","测试代码","绝大多数","test","无法","至此","读取","相当","模型","输出","有着","37","方法","表明","对应","还","最快","开头","降到","抑制","nearest","plt","系列","水准","但","建立","1.0","实用","没有","为何","是","len","考虑","机","y","5","mean","?","+","none","不","最后","可以","could","绘制","12","效果","迅速","确保","设","images","adam","ylim","nesterov","将","set","就","loss","水平","or","开始","path","found","values","(","一致","方差","集","saveresults","损失","22","使得","rmsprop","save","最为","1","噪声","alg","file","情况","bar","ypred","19","真值","*","splitext","展示","mathbf","i","由于","44","33","来","18","algorithm","'","远不如","完全","different","那些","小","prefix","简单","size","需要","误差","绝大","30","问题","noi","40","、","比较","to","6","关键字","return","data","from","除非","远远不如","20","和","分布","列表","int","再","：","sample","t","过程","]","一系","原始","跟踪","远远","文件","掌握","}","其实","为","tests","varepsilon","学习","曲线","函数","k","解析","在","py","for","重要性","均","明显","导致","saveallresults","参数","一系列","而","首先","legend","29","理论","定义数据","~","opath","调整","showcurves","28","两种","引起","如下","率","这些","测试","xlabel","真实",":","mse","件夹","可","（","raise","in","png","amsgrad","都","70","converter","方根","43","出","而言","样本","{","准确度","axis","23","_","sgd","值","给定","非常","实际","关系","adagrad","探讨","draw","nadam","它们","也","project","相同","gca","savefig","c","当前","器","的","list","能够","-","随机","代码","以及","会","我们","boldsymbol","36"," ","指派","showbars","相差","ng","完整","这种","2","并","意外","数据字","4","一","点","为了","17","output","较","）","layout","str","这","oprefix","0.4","大","predicted","def","=","有","13","进度","以上","pearson","title","colorbar","fileexistserror","datakeys","相关系数","分别","。","folder","%","几乎","独立","对","特别","ε","record","可资利用","结论","n","moment","体验","adadelta","a","#","由该","原理","45","训练","np","noise","formatname","34","收敛","append","结构","9","/","列","b","15","cb","onlyfirst","下","法在","得到","所有","range","仿射变换","是否","show","大小","0","shape","load","name","后续","完全一致","通过","应用","继","replace","作用","章节","11","sim","所","tight","not","这是","correlation","了","已经","imshow","keys","is","令人","算法","其他","这一","ylabel","变换","到","ncol","32","tools","7","路径","width","该","接下来","join",".","合适","41","能","semilogy","仿射","w","markers","中",",","关心","数据","且","梯度","key","16","38","可见","要","24","取得","结果","each","31","预测","与","，","[","pred","反映","不再","产生","预测值","偏差","下降","器有","很大","拟合","curves","f","rmse","数据文件","result","os","不同","从","重要","实验","14","同","帮助"],"title":"在tools.py中分析比较结果","title_tokens":["比较","分析","中","在",".","tools","结果","py"]}]}