{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"扉页 ¶ 摘要 Tensorflow总纲，写给初学者们。本页面将简述Tensorflow的基本原理，结构设计以及版本更新。读者亦可在本页找到本教程将提供给读者对Tensorflow怎样的认识。 注意 由于技术限制，现在中文搜索功能无法完善，请注意当搜索关键词的时候自行分词，例如： 开放源代码软件库 无法搜到任何内容。但可以搜索 开放 源代码 软件 库 即可确保索引到上述内容。 Tensorflow总说 ¶ Tensorflow官网 TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。 Tensorflow治学 ¶ 写在所有内容之前，读者不得不看以下几个页面，本教程所述内容大略来自于对这些资料的研读。 Tensorflow官网(中/英文) : https://www.tensorflow.org/ Keras中文文档 : https://keras-zh.readthedocs.io/ Tensorflow 2.0前瞻(英文) : https://medium.com/tensorflow/effective-tensorflow-2-0-best-practices-and-whats-changed-a0ca48767aff Tensorflow 2.0前瞻(中文) : https://zhuanlan.zhihu.com/p/50049041 提示 特别值得注意的是，现在官方文档至少在教程部分， 已经支持中英双语 。相比官方文档，我们的教程更侧重于以搭建工程为导向的设计。然而现在官方文档的翔实可读程度，确实不可错过。另一方面，Keras的 官方中文文档 似乎已不再更新，上面提供的原官方中文文档译者现在正在更新、维护的版本。 大略来说，学习Tensorflow主要应当依赖于官方文档的介绍。敝人自r1.4版开始入门Tensorflow，即是通过学习官方文档的教程来快速上手。相比四处蒐集资料，官方文档能提供一个完整、系统、完全贴合时下最新API的例子，帮助用户建立一个与Tensorflow各个功能合宜的使用习惯。若是通过在Github上检索他人的project，固然是一个很好的上手办法，但是往往就会遗漏某些重要的功能而不学。例如，Tensorflow自带的网络存取和Tensorboard API，在时兴的一些project中，经常会因方便之故，以numpy的IO来代替。笔者以为，如此培养起来的使用习惯，可谓走入偏门。当然，从这一点来说，本教程也亦复如是，即使笔者写下这些内容的时候，参照的乃是时下最新的API，时间一久，难免会过时。倘若笔者懒惰一些，不再时时更新本教程，那么本教程也就入不足取之流了。 虽然如此，教程也有并不合宜的地方。最大的问题莫过于Tensorflow本身，它有着日新月异的变化，此时能圆转如意地使用的API，到了彼时也许就成了废案。这就导致Tensorflow的官方教程也不断更新。r1.4时，教程还主要集中在如何使用“底层”API上，到了r1.9.0，就已经变成基本围绕着 tf.keras 设计的思路了。最新消息显示，即将上线的Tensorflow 2.0，将会彻底抛弃过去的“中层”API以下的全部方法， tf.layers , tf.contrib 都将被移除，倘若长期墨守成规，局限在入门时候的一套技术上，迟早会被官方库如此迅速的更新所弃。这也是无可奈何之事。毕竟Tensorflow仍然处于不断改进之中。倘若希望追求一个更加稳定、长期可用的库，keras或许是一个不错的选择。 故而，本教程将基本基于Tensorflow现在的版本(r1.13)展开介绍。本教程既可以看作一个入门教程，也可以看作是本人重新自学新版Tensorflow规范化API的一个手记，故而命名本教程为“手札”。读者不妨跟着笔者的思路，有如与笔者共学一般读下来本教程。 Tensorflow原理 ¶ 一个标准的Tensorflow工作流可以表示成这样： graph TD st(开始) --> Sess[启动Session] Sess --> ConNet[构建网络] subgraph 构造流程 ioNet>读取网络参数] --> ConNet end subgraph 执行流程 ioDat>导入数据] --> Run ConNet --> Run[执行网络] Run --> ioNetS>保存网络参数] Run --> ioRes>导出结果] end ioRes --> SessCl[关闭Session] SessCl --> ed(结束) classDef styStart fill:#FAE6A9,stroke:#BA9132; classDef styIO fill:#cde498,stroke:#13540c; class st,ed styStart class ioNet,ioNetS,ioDat,ioRes styIO 与一般的计算库不同，Tensorflow的执行流程大体可以分为两步： 构造流程 : 在这一步，Tensorflow根据用户代码构造一个 数据流图(dataflow graph) 。所谓数据流图，指的是由一系列 张量(Tensor) 构成的符号运算集合。就如同一张流程图一样，在这一阶段，尽管用户定义了每一步的运算（从简单的加减乘除到复杂的网络单元），但是没有任何运算被执行。就像一个程序员撰写代码一样，Tensorflow在这一步，将用户的代码转换成它的“机器语言”，但是网络还没有进入被使用的阶段。 执行流程 : 在这一步，Tensorflow将计算用户指定的某个 Tensor 的输出结果。要得到一个Tensor的输出，则必须得计算它一系列的依赖变量。例如，我们已知 y = x_1 + x_2 y = x_1 + x_2 , x_2 = z_1 \\times z_2 x_2 = z_1 \\times z_2 。那么，如果Tensorflow要得到 y y 的结果，它就必须先计算 x_2 x_2 。这个过程被完全地封装起来，从用户看来，我们只需要调用 y y 的输出即可，不需要关心Tensorflow是怎样按照流图完成计算的。 因此，典型的Tensorflow式的语言风格也可以这样划分： 构造流程 : 用户定义整个网络的符号运算，指定网络各个节点的属性、输入和输出。这些代码往往被写成一个函数（例如 def construct (): ） 执行流程 : 创建一个Session，在Session内调用构造函数，然后输入数据，得到并保存输出结果。必要情况下，还需要导入导出网络参数。 这里提到 会话(Session) 。Session如同一个Tensorflow虚拟机，在一个Session打开的时候，设备的计算资源（GPU, CPU, 带宽等）才被加载。Session又如同一个工人，用户撰写的网络构造代码如同车间，输入的数据如同商品，“工人（Session）”利用预定义好的“车间（流图）”将可以快速、批量地生产这些“商品（数据）”。这样地设计保证了一些外围的代码，例如指定网络参数的名称、函数的属性等操作，不需要重复进行，从而确保处理数据的时候，总是执行必要的代码，加快运算速度。 另一方面，构造-执行的结构还封装了许多提高运算效率的特性，例如多线程。尽管用户定义网络构造的时候，所写的代码是按照逻辑顺序的、线性的。但实际运行的时候，Tensorflow可以自行发现网络的哪些部分可以被同时运行，从而利用多核系统的计算资源。这些过程也是被完全封装起来的，用户并不需要花费心思去专门进行这些调整。 须知 在Tensorflow已经转变为Keras导向的现在，Session的调用被Keras API封装了起来，从用户的角度来看，现在已经不再需要手动调用Session。 Tensorflow API架构 ¶ 下图显示了当前Tensorflow-API的组织形式 Tensorflow在多个平台上均有部署，包括Python, C++, Java, Javascript, Go等，未来还可能支持更多的语言。然而，不同平台上，API的使用方式和代码风格是大不相同的。例如，Python的语言风格目前已经朝向Keras转变，而Javascript仍倾向于使用中层API；C++和Java偏向于使用底层API编写程序。本教程只针对时兴Python的API编写，除非涉及到特定的专题，不会讨论其他语言上Tensorflow的用法。 一般而言，Tensorflow将API面向划分为三个层次： 高层API (High level) : 包括Estimators和Keras； 中层API (Mid level) : 包括layers, datasets, loss和metrics等具有功能性的函数，例如网络层的定义，Loss Function，对结果的测量函数等； 底层API (Low level) : 包括具体的加减乘除、具有解析式的数学函数、卷积、对Tensor属性的测量等。 从r1.4入门的用户，所接受的训练往往是从底层API开始，使用自己的代码风格构建对应中层API的函数，然后再用自己定义好的中层API构建网络。在这种代码风格的驱使下，用户除了需要定义各个网络层具体的表达式，还需要设计输入输出的接口，用来调用 优化器(optimizer) 的接口等操作。 另一种使用方式，是从中层API开始，直接使用预定义好的网络层构建网络，这样的代码风格会节省一部分时间，相当于几乎不再需要接触底层API，但是在输入输出、网络训练和测试等更高层的模块设计上，和底层API用户的代码风格相似。 Estimators是从r1.4就已经存在的API了，它可以被看成是已经集成在Tensorflow里的完整的网络。因此，Estimators往往适合分发、需求不高的应用，但是并不适合使用Tensorflow的研究者。尽管至今为止，Tensorflow仍然对Estimators倍加推崇，但本教程将完全不涉及这方面的内容。 另一个高层API是 Eager Execution ，从r1.9起，Tensorflow就加入了这种新的使用模式，并且在Tensorflow 2.0中，它仍然将会被保留。Eager摈弃了上述的构造-执行流程，任何对Tensor的定义会被立时计算、并可得到结果。对于需要进行小规模的调试、检查API功能的用户而言更加方便。但是，据一些用户的反响，现在Eager还没有做到和之前API的完全兼容，本教程将基本不涉及Eager的用法。 因此，Keras API将是本教程的重中之重。使用本教程的用户，可以对照目前的官方文档，跟进本教程的思路，自己逐步实现各个project的设计。使用Keras风格的设计，代码量会明显少于前面提到的各种风格（Estimators除外）。事实上， tf.keras 和底层API之间具有一定的兼容，这样的编写风格能让我们在满足自己设计的派生功能的基础上，尽可能使用规范化、预定义的API单元，从而减少代码出错的可能性。通过对本教程TF 1.x版的学习，对未来2.0版的上手也会带来莫大帮助。 金宇琛( @cainmagi )，2019年3月2日 Yuchen Jin( @cainmagi ), Mar. 2, 2019 教程导读 ¶ 接下来，本教程将会涉及 从线性问题入门 : 如何使用Tensorflow完成一个简单的线性分类设计，我们将从Hello World开始，逐步过渡到一个具有核函数的非线性问题project。 Hello world: 第一个Tensorflow程序。 线性分类: 一个简单的二分类问题。 线性回归: 一个同样简单的，线性拟合问题。 非线性回归: 拟合一个简单的，可以表达出解析式的非线性函数。 非线性分类: 使用线性分类器对非线性分布的数据进行分类。 训练与测试分立 : 从这一章开始，并试图解决几个更加复杂的实际问题。这里涉及到的project相对更大、更完整，训练往往需要一定时间才能完成。因此，在本章，所有项目的训练、测试环节都会分开，我们将从这里开始，使用TensorBoard跟踪我们的训练情况，并介绍如何存取神经网络。 Super Resolution: 使用神经网络进行图像像素插值。 Sparse Coding: 使用线性的词典学习(dictionary learning)来进行图像像素插值。 Generitive Model: 使用时兴的生成模型(Generitive Model)来完成图像风格的转换。 原生的数据管理 : 从这一章开始，我们将纳入Tensorflow自带的数据管理API。实际上，很多用户并不习惯使用这些API，往往倾向于自己完成数据的导入导出。虽然这并非一个复杂的工作，但据Tensorflow的文档，原生的数据管理内部实现了多线程，本身更适合用于提高数据IO的效率。读者可以酌情选择是否需要阅读本章。 使用MINIST数据集: 使用原生的数据管理来IO一个现成的MINIST数据集，这一节改自 官方文档教程 。 使用RNN处理文章: 通过LSTM模型来进行文本分类，并使用原生的数据管理来IO一个现成的IMDB数据集，这一节改自 官方文档教程 。 使用RBM生成音频: 通过限制玻尔兹曼机(RBM)来编写一个简单的音乐生成器，这一节改自 llSourcell/Music_Generator_Demo 。 其他的高级技巧 : 本章将介绍一些特殊的、利用底层API技巧，使得用户能更灵活地定制Tensorflow-keras，从而实现一些仅依靠原生库不能实现的功能。","text_tokens":["并不需要","可能","当于","贴合","倍加","限制","车间","打开","月","彻底","4","也","都","运行","ai","存取","应用","更加","也许","广泛应用","换成","多核","值得","learning","哪些","/","符号","tensor","gpu","以下","p","奈何","地","长期","model","代码","更大","发现","定制","日新月异","变量","不合","不","不高","无可","保证","扉页",".","高性能","因此","文章","effective","整个","了","检索","所有","问题","被","集群","写成","-","自行","部署","任何","解析","导读","一部","resolution","llsourcell","新","tensorflow","改进","开始","学","参数","最大","抛弃","做到","keras","风格","即将","将","classdef","iores","从","调整","敝","音频","集","保存","写给","核心","规范化","进入","changed","标准"," ","结构","过渡","特性","模块","二","表示","变成","图像","拟合","培养","能圆转","并","（","机器","学者","蒐集","各种","莫过","一系","当然","久","移除","务器","原理","13","fill","网络层","驱使","通过","而言","计算资源","移动","成器","最新","转换","这里","是从","以及","rnn","和","手动","才","com","除外","出错","使得","用来","同样","注意","过时","本人","有着","过程","译者","来说","dataflow","可谓","其","+","看作","年","四处","双语","三个","构建","一系列","变化","封装","达式","试图","神经网络","1","google","分类","除了","量会","以为","用法","流程","兹曼","无法","构造","自带","虚拟机","轻松","错过","对","偏门","乃是","必须","需要","集成","工程","cde498","认识","输入输出","或许","模型","但","版本","并且","要","y","上","倾向","跟踪","包括","去","英双语","按照","目前","流程图","导向","金宇琛","平台","一方面","规范","practices","起来","笔者","走入","处理","几乎","可能性","cpu","局限","集合","mar","服务","学习","翔实","当前","成规","generitive","2","r1","本","式","这方面","快速","org","好","本页","彼时","中层","节省","minist","编写程序","日","神经网","datasets","实际上","大不相同","基本","许多","结束","单元","既","这种","至少","顺序","分类器","强力","似乎","阅读","一种","改","brain","搜","研究","end","第一","管理","酌情","tf","迅速","废案","逻辑","def","；","带宽","两步","构造函数","and","world","属性",")","得到","阶段","工人","相当于","利用","分为","项目","定义","尽可","开发","2.0","函数","很多","generator","深度","显示","仍然","入门教程","例如","明显","接下","ionet","操作","hello","之流","守成","loss","尽可能","一些","yuchen","一","下","c++","接下来","构设","接口","不合宜","构成","涉及","基于","足取","来自","optimizer","在","有","上面","写","借助","图","只","总纲","上线","]","纳入","更新","内部","内容","赖于","(","其他","特定","启动",",","完整","同时","花费","入","ba9132","数据流","才能","为止","rbm","zh","时","。","不错","基础","每","对应","java","13540c","卷积","遗漏","但本","程序员","针对","high","之前","开放","提示","服务器","多线","介绍","本原","特别","于","python","本身","值得注意","这","故而","须知","分发","即可","ionets","摈弃","懒惰","readthedocs","推崇","复杂","请","一个","numpy","不妨","本章","隶属","毕竟","均","session","办法","摘要","自","并非","时候","读取","人","graph","tpu","下来","使用","地方","：","名称","重新","库","就","#","依赖","写下","简单","的","到","转变","满足","维护","重于","跟进","乘除","具有","结果","而","检查","music","times","来看","3","跟着","读","一定","新月","测试","当","一方","不足","输出","讨论","加快","插值","需求","手","™","亦复如是","工作","这些","metrics","展开","之中","高级","construct","方式","迟早","之故","必要","领域","相当","迟早会","某个","表达式","搜索","教程","依赖于","线性","但是","方便","不再","为","侧重于","存在","源代码","治学","lstm","系统","一般","best","分立","这个","追求","保留","派生","机","往往","tensorboard","9","project","莫过于","jin","器","关心","指定","部分","zhuanlan","合宜","版","最初","过于","研读","可以","run","逐步","亦可","专门","手札","音乐","¶","eager","内","偏向","如是","多线程","让","此时","sesscl","生成","之","灵活","加载","以","非线性","50049041","入门","我们","相同","多个","正在","[","索引","分开","又","效率","api","所写","数据管理","墨守","外围","来","新版","墨守成规","测量","简述","中文","“","可","如意","反响","事实上","设计","输入","训练","function","即使","这样","应当","广泛","数据","导入","里","由于","提高","另","底层","立时","仍","再用","super","调用","大略","一点","不断更新","像","对本","然后","一张","资源","加入","确保","demo","确实","www","全部","另一方","墨守成","但据","倘若","计算","完善","组织","技巧","然而","页面","无可奈何","手记","专题","一套","资料","具体","部门","，","没有","流图","完成","stystart","whats","接受","已经","相对","前瞻","神经","现成","生成器","一样","速度","不能","先","规模","隶属于","提供","所","虚拟","解决","围绕","一部分","玻尔兹曼","subgraph","程序","相似","还","性能","加减乘除","过去","经常","难免","中","提到","张量","不断改进","据","分布","中文搜索","会因","@","流","将会","依靠","找到","商品","多种","execution","工程师",":","自己","共","基本原理","未来","不得","适合","选择","不足取","线程","原生","现在","estimators","莫大","环节","javascript","从这一点","少于","可用","命名","https","转换成","一节","”","主要","它","撰写","方法","a0ca48767aff","zhihu","创建","这方","另一方面","架构","go","大体","已知","层次","设备","styio","优化","方面","软件","更","希望","怎样","时间","节点","语言","典型","他人","不可","如果","看","总是","导出","）","团队","level","词典","面向","结构设计","一般而言","边缘","io","给","虽然","ed","medium","初学者","contrib","重复","_","则","low","那么","桌面","st","处于","\\","等","stroke","mid","进行","能","功能","不同","导致","读者","关键","几个","生产","朝向","起","例子","程度","完全","事","自学","直接","不学","核","搭建","是","义好","英文","除非","数学","执行","仅","侧重","若","各个","着","不得不","出","分词","如此","时兴","思路","尽管","得","小规模","重要","class","事实","兼容","imdb","支持","z","指","至今","connet","9.0","是否","科学","回归","像素","官方","github","消息","机器语言","文本","对于","fae6a9","模式","初学","iodat","划分","对照","已","最新消息","从而","加减","coding","运算","一章","批量","由","建立","、","网络","所述","如同","总说","x","多","习惯","特殊","时时","sparse","上述","有如","用于","不断",";","会话","形式","编写","代替","所谓","帮助","系列","接触","玻尔","sess","情况","用户","cainmagi","相比","之间","实际","第一个","如何","高性","0","td","固然","网络单元","义","调试","减少","关闭","很","官网","难免会","前面","心思","与","们","表达","实现","看来","高层","角度","看成",">","下图","layers","集中","功能性","2019","人员","范化","关键词","数值","一步","会","所弃","技术","某些","=","dictionary","参照","根据","不会","属于","文档","研究者","即","成","稳定","原","预定","重中之重","带来"],"title":"扉页","title_tokens":["扉页"]},{"location":"#_1","text":"摘要 Tensorflow总纲，写给初学者们。本页面将简述Tensorflow的基本原理，结构设计以及版本更新。读者亦可在本页找到本教程将提供给读者对Tensorflow怎样的认识。 注意 由于技术限制，现在中文搜索功能无法完善，请注意当搜索关键词的时候自行分词，例如： 开放源代码软件库 无法搜到任何内容。但可以搜索 开放 源代码 软件 库 即可确保索引到上述内容。","text_tokens":["现在","注意","开放","给","限制","到","基本","上述","本原","初学者","由于","构设","自行","可以","提供","当","任何","亦可","在","学者","搜","tensorflow","即可","总纲","请","将","更新","内容","软件","功能","确保","初学","们","读者","关键","原理","怎样","搜索","中文搜索","无法","摘要","教程","找到","完善","代码","时候","本","页面","关键词","索引","对","源代码","写给","。","本页","技术","：","以及","认识","基本原理","库","简述","中文","，","例如"," ","结构","版本","但","设计","的","结构设计","分词"],"title":"扉页","title_tokens":["扉页"]},{"location":"#tensorflow","text":"Tensorflow官网 TensorFlow™ 是一个开放源代码软件库，用于进行高性能数值计算。借助其灵活的架构，用户可以轻松地将计算工作部署到多种平台（CPU、GPU、TPU）和设备（桌面设备、服务器集群、移动设备、边缘设备等）。TensorFlow™ 最初是由 Google Brain 团队（隶属于 Google 的 AI 部门）中的研究人员和工程师开发的，可为机器学习和深度学习提供强力支持，并且其灵活的数值计算核心广泛应用于许多其他科学领域。","text_tokens":["ai","应用","平台","™","广泛应用","工作","架构","设备","cpu","软件","gpu","服务","学习","领域","地","代码","为","源代码","）","团队","高性能","边缘","许多","集群","强力","最初","可以","部署","brain","桌面","研究","tensorflow","等","进行","将","灵活","开发","核心","是","深度","可"," ","广泛","支持","科学","（","机器","借助","务器","其他","计算","移动","。","由","和","部门","，","、","开放","服务器","用于","于","其","用户","隶属于","提供","高性","性能","google","一个","中","官网","隶属","轻松","多种","人员","tpu","数值","工程师","工程","库","属于","并且","的","到"],"title":"Tensorflow总说","title_tokens":["tensorflow","总说"]},{"location":"#tensorflow_1","text":"写在所有内容之前，读者不得不看以下几个页面，本教程所述内容大略来自于对这些资料的研读。 Tensorflow官网(中/英文) : https://www.tensorflow.org/ Keras中文文档 : https://keras-zh.readthedocs.io/ Tensorflow 2.0前瞻(英文) : https://medium.com/tensorflow/effective-tensorflow-2-0-best-practices-and-whats-changed-a0ca48767aff Tensorflow 2.0前瞻(中文) : https://zhuanlan.zhihu.com/p/50049041 提示 特别值得注意的是，现在官方文档至少在教程部分， 已经支持中英双语 。相比官方文档，我们的教程更侧重于以搭建工程为导向的设计。然而现在官方文档的翔实可读程度，确实不可错过。另一方面，Keras的 官方中文文档 似乎已不再更新，上面提供的原官方中文文档译者现在正在更新、维护的版本。 大略来说，学习Tensorflow主要应当依赖于官方文档的介绍。敝人自r1.4版开始入门Tensorflow，即是通过学习官方文档的教程来快速上手。相比四处蒐集资料，官方文档能提供一个完整、系统、完全贴合时下最新API的例子，帮助用户建立一个与Tensorflow各个功能合宜的使用习惯。若是通过在Github上检索他人的project，固然是一个很好的上手办法，但是往往就会遗漏某些重要的功能而不学。例如，Tensorflow自带的网络存取和Tensorboard API，在时兴的一些project中，经常会因方便之故，以numpy的IO来代替。笔者以为，如此培养起来的使用习惯，可谓走入偏门。当然，从这一点来说，本教程也亦复如是，即使笔者写下这些内容的时候，参照的乃是时下最新的API，时间一久，难免会过时。倘若笔者懒惰一些，不再时时更新本教程，那么本教程也就入不足取之流了。 虽然如此，教程也有并不合宜的地方。最大的问题莫过于Tensorflow本身，它有着日新月异的变化，此时能圆转如意地使用的API，到了彼时也许就成了废案。这就导致Tensorflow的官方教程也不断更新。r1.4时，教程还主要集中在如何使用“底层”API上，到了r1.9.0，就已经变成基本围绕着 tf.keras 设计的思路了。最新消息显示，即将上线的Tensorflow 2.0，将会彻底抛弃过去的“中层”API以下的全部方法， tf.layers , tf.contrib 都将被移除，倘若长期墨守成规，局限在入门时候的一套技术上，迟早会被官方库如此迅速的更新所弃。这也是无可奈何之事。毕竟Tensorflow仍然处于不断改进之中。倘若希望追求一个更加稳定、长期可用的库，keras或许是一个不错的选择。 故而，本教程将基本基于Tensorflow现在的版本(r1.13)展开介绍。本教程既可以看作一个入门教程，也可以看作是本人重新自学新版Tensorflow规范化API的一个手记，故而命名本教程为“手札”。读者不妨跟着笔者的思路，有如与笔者共学一般读下来本教程。","text_tokens":["贴合","彻底","4","也","都","存取","更加","也许","值得","/","以下","p","奈何","地","长期","日新月异","不合","无可",".","effective","了","检索","所有","问题","被","-","tensorflow","改进","开始","学","最大","抛弃","keras","即将","将","敝","规范化","changed"," ","变成","培养","能圆转","并","蒐集","莫过","当然","久","移除","13","通过","最新","和","com","注意","过时","本人","有着","译者","来说","可谓","看作","四处","双语","变化","以为","自带","错过","对","偏门","乃是","工程","或许","版本","上","英双语","导向","一方面","规范","practices","起来","笔者","走入","局限","翔实","学习","成规","2","r1","本","快速","org","好","彼时","中层","基本","既","至少","似乎","tf","迅速","废案","and",")","2.0","显示","仍然","入门教程","例如","之流","守成","一些","一","下","不合宜","基于","足取","来自","在","有","上面","写","上线","更新","内容","赖于","(",",","完整","入","zh","时","。","不错","遗漏","之前","提示","介绍","特别","于","本身","值得注意","这","故而","懒惰","readthedocs","一个","numpy","不妨","毕竟","办法","自","时候","人","下来","使用","地方","重新","就","库","依赖","写下","的","到","维护","重于","而","跟着","读","新月","一方","不足","手","亦复如是","这些","展开","之中","迟早","之故","迟早会","教程","依赖于","但是","方便","不再","为","侧重于","系统","一般","best","追求","往往","tensorboard","project","莫过于","部分","zhuanlan","合宜","版","过于","研读","可以","手札","如是","此时","之","以","50049041","入门","我们","正在","api","墨守","来","新版","墨守成规","中文","“","可","如意","设计","即使","应当","底层","大略","一点","不断更新","确实","www","全部","另一方","墨守成","倘若","然而","页面","无可奈何","手记","一套","资料","，","whats","已经","前瞻","提供","围绕","还","过去","经常","难免","中","不断改进","会因","将会",":","共","不得","选择","不足取","现在","从这一点","可用","命名","https","”","主要","它","方法","a0ca48767aff","zhihu","另一方面","方面","更","希望","时间","他人","不可","看","io","虽然","medium","contrib","那么","处于","能","功能","导致","读者","几个","例子","程度","完全","事","自学","不学","搭建","是","英文","侧重","若","各个","着","不得不","如此","时兴","思路","重要","支持","9.0","官方","github","消息","已","最新消息","建立","、","网络","所述","习惯","时时","有如","不断","代替","帮助","用户","相比","如何","0","固然","很","官网","难免会","与","layers","集中","范化","会","所弃","技术","某些","参照","文档","即","成","稳定","原"],"title":"Tensorflow治学","title_tokens":["治学","tensorflow"]},{"location":"#tensorflow_2","text":"一个标准的Tensorflow工作流可以表示成这样： graph TD st(开始) --> Sess[启动Session] Sess --> ConNet[构建网络] subgraph 构造流程 ioNet>读取网络参数] --> ConNet end subgraph 执行流程 ioDat>导入数据] --> Run ConNet --> Run[执行网络] Run --> ioNetS>保存网络参数] Run --> ioRes>导出结果] end ioRes --> SessCl[关闭Session] SessCl --> ed(结束) classDef styStart fill:#FAE6A9,stroke:#BA9132; classDef styIO fill:#cde498,stroke:#13540c; class st,ed styStart class ioNet,ioNetS,ioDat,ioRes styIO 与一般的计算库不同，Tensorflow的执行流程大体可以分为两步： 构造流程 : 在这一步，Tensorflow根据用户代码构造一个 数据流图(dataflow graph) 。所谓数据流图，指的是由一系列 张量(Tensor) 构成的符号运算集合。就如同一张流程图一样，在这一阶段，尽管用户定义了每一步的运算（从简单的加减乘除到复杂的网络单元），但是没有任何运算被执行。就像一个程序员撰写代码一样，Tensorflow在这一步，将用户的代码转换成它的“机器语言”，但是网络还没有进入被使用的阶段。 执行流程 : 在这一步，Tensorflow将计算用户指定的某个 Tensor 的输出结果。要得到一个Tensor的输出，则必须得计算它一系列的依赖变量。例如，我们已知 y = x_1 + x_2 y = x_1 + x_2 , x_2 = z_1 \\times z_2 x_2 = z_1 \\times z_2 。那么，如果Tensorflow要得到 y y 的结果，它就必须先计算 x_2 x_2 。这个过程被完全地封装起来，从用户看来，我们只需要调用 y y 的输出即可，不需要关心Tensorflow是怎样按照流图完成计算的。 因此，典型的Tensorflow式的语言风格也可以这样划分： 构造流程 : 用户定义整个网络的符号运算，指定网络各个节点的属性、输入和输出。这些代码往往被写成一个函数（例如 def construct (): ） 执行流程 : 创建一个Session，在Session内调用构造函数，然后输入数据，得到并保存输出结果。必要情况下，还需要导入导出网络参数。 这里提到 会话(Session) 。Session如同一个Tensorflow虚拟机，在一个Session打开的时候，设备的计算资源（GPU, CPU, 带宽等）才被加载。Session又如同一个工人，用户撰写的网络构造代码如同车间，输入的数据如同商品，“工人（Session）”利用预定义好的“车间（流图）”将可以快速、批量地生产这些“商品（数据）”。这样地设计保证了一些外围的代码，例如指定网络参数的名称、函数的属性等操作，不需要重复进行，从而确保处理数据的时候，总是执行必要的代码，加快运算速度。 另一方面，构造-执行的结构还封装了许多提高运算效率的特性，例如多线程。尽管用户定义网络构造的时候，所写的代码是按照逻辑顺序的、线性的。但实际运行的时候，Tensorflow可以自行发现网络的哪些部分可以被同时运行，从而利用多核系统的计算资源。这些过程也是被完全封装起来的，用户并不需要花费心思去专门进行这些调整。 须知 在Tensorflow已经转变为Keras导向的现在，Session的调用被Keras API封装了起来，从用户的角度来看，现在已经不再需要手动调用Session。","text_tokens":["并不需要","现在","乘除","结果","车间","打开","times","去","来看","也","按照","运行","转换成","流程图","一方","”","导向","撰写","它","输出","加快","一方面","创建","换成","多核","工作","这些","另一方面","起来","哪些","大体","已知","处理","styio","符号","construct","tensor","设备","集合","必要","gpu","cpu","方面","某个","地","怎样","节点","2","线性","代码","但是","语言","典型","发现","式","不再","为","变量","快速","一般","系统","如果","不","这个","总是","导出","保证","）","因此","往往","整个","ed","许多","关心","结束","了","单元","被","写成","指定","重复","顺序","部分","_","-","run","则","自行","可以","任何","那么","st","专门","\\","tensorflow","end","开始","参数","stroke","等","内","进行","逻辑","风格","def","keras","classdef","两步","iores","将","sesscl","不同","构造函数","带宽","多线程","属性","加载",")","得到","生产","阶段","工人","利用","从","调整","我们","分为","完全","[","定义","保存","又","效率","函数","api","所写","是","进入","义好","标准","外围","执行","例如","“"," ","结构","ionet","各个","输入","设计","操作","特性","得","尽管","这样","class","表示","数据","一些","z","指","导入","一","connet","下","提高","构成","并","（","机器","在","调用","图","只","像","一系","]","然后","机器语言","一张","资源","确保","fae6a9","(","iodat","另一方","fill","启动",",","计算","同时","花费","划分","ba9132","数据流","从而","加减","计算资源","运算","转换","。","由","这里","批量","每","y","和","手动","没有","13540c","，","、","才","网络","流图","完成","stystart","如同","程序员","x","已经","会话","过程","多线",";","转变","系列","所谓","dataflow","+","一样","sess","速度","情况","先","用户","构建","这","虚拟","一系列","实际","须知","封装","ionets","subgraph","程序","即可","1","还","td","加减乘除","网络单元","复杂","一个","关闭","提到","张量","与","心思","看来","流程","session","角度","构造","流",">","虚拟机","商品","读取","时候","graph","一步","使用",":","：","必须","需要","cde498","名称","库","就","#","依赖","根据","=","但","要","成","简单","的","到","预定","线程"],"title":"Tensorflow原理","title_tokens":["原理","tensorflow"]},{"location":"#tensorflow-api","text":"下图显示了当前Tensorflow-API的组织形式 Tensorflow在多个平台上均有部署，包括Python, C++, Java, Javascript, Go等，未来还可能支持更多的语言。然而，不同平台上，API的使用方式和代码风格是大不相同的。例如，Python的语言风格目前已经朝向Keras转变，而Javascript仍倾向于使用中层API；C++和Java偏向于使用底层API编写程序。本教程只针对时兴Python的API编写，除非涉及到特定的专题，不会讨论其他语言上Tensorflow的用法。 一般而言，Tensorflow将API面向划分为三个层次： 高层API (High level) : 包括Estimators和Keras； 中层API (Mid level) : 包括layers, datasets, loss和metrics等具有功能性的函数，例如网络层的定义，Loss Function，对结果的测量函数等； 底层API (Low level) : 包括具体的加减乘除、具有解析式的数学函数、卷积、对Tensor属性的测量等。 从r1.4入门的用户，所接受的训练往往是从底层API开始，使用自己的代码风格构建对应中层API的函数，然后再用自己定义好的中层API构建网络。在这种代码风格的驱使下，用户除了需要定义各个网络层具体的表达式，还需要设计输入输出的接口，用来调用 优化器(optimizer) 的接口等操作。 另一种使用方式，是从中层API开始，直接使用预定义好的网络层构建网络，这样的代码风格会节省一部分时间，相当于几乎不再需要接触底层API，但是在输入输出、网络训练和测试等更高层的模块设计上，和底层API用户的代码风格相似。 Estimators是从r1.4就已经存在的API了，它可以被看成是已经集成在Tensorflow里的完整的网络。因此，Estimators往往适合分发、需求不高的应用，但是并不适合使用Tensorflow的研究者。尽管至今为止，Tensorflow仍然对Estimators倍加推崇，但本教程将完全不涉及这方面的内容。 另一个高层API是 Eager Execution ，从r1.9起，Tensorflow就加入了这种新的使用模式，并且在Tensorflow 2.0中，它仍然将会被保留。Eager摈弃了上述的构造-执行流程，任何对Tensor的定义会被立时计算、并可得到结果。对于需要进行小规模的调试、检查API功能的用户而言更加方便。但是，据一些用户的反响，现在Eager还没有做到和之前API的完全兼容，本教程将基本不涉及Eager的用法。 因此，Keras API将是本教程的重中之重。使用本教程的用户，可以对照目前的官方文档，跟进本教程的思路，自己逐步实现各个project的设计。使用Keras风格的设计，代码量会明显少于前面提到的各种风格（Estimators除外）。事实上， tf.keras 和底层API之间具有一定的兼容，这样的编写风格能让我们在满足自己设计的派生功能的基础上，尽可能使用规范化、预定义的API单元，从而减少代码出错的可能性。通过对本教程TF 1.x版的学习，对未来2.0版的上手也会带来莫大帮助。 金宇琛( @cainmagi )，2019年3月2日 Yuchen Jin( @cainmagi ), Mar. 2, 2019","text_tokens":["倍加","可能","当于","月","4","也","应用","更加","tensor","代码","不","不高",".","因此","了","被","-","部署","解析","任何","一部","新","tensorflow","开始","做到","风格","keras","将","从","规范化"," ","模块","并","（","各种","网络层","驱使","通过","而言","是从","和","出错","除外","用来","年","三个","构建","达式","1","除了","量会","用法","流程","构造","对","需要","集成","输入输出","并且","上","倾向","包括","目前","金宇琛","平台","规范","几乎","可能性","mar","学习","当前","2","r1","本","式","这方面","好","中层","节省","编写程序","日","datasets","大不相同","基本","单元","这种","一种","研究","tf","；","属性",")","得到","相当于","定义","尽可","2.0","函数","显示","仍然","明显","例如","操作","loss","尽可能","一些","yuchen","下","c++","接口","涉及","optimizer","在","有","只","内容","(","其他","特定",",","完整","为止","。","基础","对应","java","卷积","但本","针对","high","之前","python","于","分发","摈弃","推崇","一个","均","使用","：","就","的","到","满足","转变","跟进","乘除","具有","结果","而","检查","3","一定","测试","讨论","输出","需求","手","metrics","方式","相当","表达式","教程","但是","方便","不再","为","存在","一般","派生","保留","往往","9","project","jin","器","部分","版","可以","逐步","eager","偏向","让","相同","入门","我们","多个","api","反响","测量","带来","事实上","可","设计","输入","训练","function","这样","里","另","底层","立时","仍","再用","调用","对本","然后","加入","计算","组织","然而","专题","具体","没有","，","接受","已经","规模","所","一部分","程序","相似","还","加减乘除","中","提到","据","@","将会","execution",":","自己","未来","适合","现在","estimators","莫大","javascript","少于","它","这方","go","层次","优化","方面","更","时间","语言","）","level","面向","一般而言","low","等","mid","进行","能","功能","不同","朝向","起","直接","完全","是","义好","除非","数学","执行","各个","事实","时兴","尽管","小规模","思路","兼容","支持","至今","官方","对于","模式","划分","对照","从而","加减","、","网络","x","多","上述","形式","编写","接触","帮助","用户","cainmagi","之间","减少","义","调试","前面","表达","实现","高层","看成","下图","layers","功能性","2019","范化","会","不会","文档","研究者","预定","重中之重"],"title":"Tensorflow API架构","title_tokens":[" ","api","tensorflow","架构"]},{"location":"#_2","text":"接下来，本教程将会涉及 从线性问题入门 : 如何使用Tensorflow完成一个简单的线性分类设计，我们将从Hello World开始，逐步过渡到一个具有核函数的非线性问题project。 Hello world: 第一个Tensorflow程序。 线性分类: 一个简单的二分类问题。 线性回归: 一个同样简单的，线性拟合问题。 非线性回归: 拟合一个简单的，可以表达出解析式的非线性函数。 非线性分类: 使用线性分类器对非线性分布的数据进行分类。 训练与测试分立 : 从这一章开始，并试图解决几个更加复杂的实际问题。这里涉及到的project相对更大、更完整，训练往往需要一定时间才能完成。因此，在本章，所有项目的训练、测试环节都会分开，我们将从这里开始，使用TensorBoard跟踪我们的训练情况，并介绍如何存取神经网络。 Super Resolution: 使用神经网络进行图像像素插值。 Sparse Coding: 使用线性的词典学习(dictionary learning)来进行图像像素插值。 Generitive Model: 使用时兴的生成模型(Generitive Model)来完成图像风格的转换。 原生的数据管理 : 从这一章开始，我们将纳入Tensorflow自带的数据管理API。实际上，很多用户并不习惯使用这些API，往往倾向于自己完成数据的导入导出。虽然这并非一个复杂的工作，但据Tensorflow的文档，原生的数据管理内部实现了多线程，本身更适合用于提高数据IO的效率。读者可以酌情选择是否需要阅读本章。 使用MINIST数据集: 使用原生的数据管理来IO一个现成的MINIST数据集，这一节改自 官方文档教程 。 使用RNN处理文章: 通过LSTM模型来进行文本分类，并使用原生的数据管理来IO一个现成的IMDB数据集，这一节改自 官方文档教程 。 使用RBM生成音频: 通过限制玻尔兹曼机(RBM)来编写一个简单的音乐生成器，这一节改自 llSourcell/Music_Generator_Demo 。 其他的高级技巧 : 本章将介绍一些特殊的、利用底层API技巧，使得用户能更灵活地定制Tensorflow-keras，从而实现一些仅依靠原生库不能实现的功能。","text_tokens":["环节","具有","限制","跟踪","music","都","一定","一节","测试","存取","插值","更加","工作","这些","learning","/","处理","高级","学习","更","地","generitive","时间","教程","线性","model","定制","更大","本","式","lstm","不","分立","导出","minist","词典","因此","机","神经网","往往","文章","tensorboard","project","实际上","io","虽然","问题","了","所有","分类器","阅读","_","-","可以","改","逐步","解析","resolution","音乐","llsourcell","第一","tensorflow","管理","开始","酌情","进行","能","风格","keras","将","生成","多线程","功能","world","读者","几个","灵活",")","非线性","利用","从","入门","我们","项目","音频","分开","集","效率","核","函数","api","数据管理","很多","来","generator","仅","接下"," ","过渡","设计","训练","hello","出","时兴","二","数据","imdb","一些","图像","拟合","导入","接下来","提高","是否","并","涉及","底层","回归","在","super","像素","官方","文本","纳入","内部","demo","(","其他","但据","完整","技巧","通过","从而","才能","coding","一章","rbm","成器","转换","。","这里","rnn","，","、","网络","完成","使得","特殊","同样","习惯","sparse","多线","相对","介绍","用于","编写","神经","于","现成","玻尔","生成器","情况","本身","用户","不能","这","实际","第一个","解决","玻尔兹曼","程序","试图","神经网络","如何","分类","复杂","一个","本章","表达","与","实现","分布","兹曼","并非","依靠","自带","将会","自","下来","使用",":","对","自己","需要","会","库","dictionary","模型","文档","适合","选择","简单","的","到","线程","原生","倾向"],"title":"教程导读","title_tokens":["导读","教程"]},{"location":"licenses/","text":"协议 (Licenses) ¶ 本站协议 (中文版) ¶ MIT 开源许可协议 版权所有 © 2019, 金宇琛 (cainmagi) 特此向任何得到本软件副本或相关文档的人授权：被授权人有权使用、复制、修改、 合并、出版、发布、散布、再授权和/或贩售软件及软件的副本，及授予被供应人 同等权利，只需服从以下义务： 在软件和软件的所有副本中都必须包含以上版权声明和本许可声明。 该软件是\"按原样\"提供的，没有任何形式的明示或暗示，包括但不限于为特定目的和 不侵权的适销性和适用性的保证担保。在任何情况下，作者或版权持有人，都无权要求 任何索赔，或有关损害赔偿的其他责任。无论在本软件的使用上或其他买卖交易中， 是否涉及合同，侵权或其他行为。 License of this website (English version) ¶ MIT License Copyright © 2019 Yuchen Jin (cainmagi) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 本站相关项目的协议 ¶ 下面介绍的诸多协议，原则上并无必要列在本条目中（例如MIT License）。列在下侧，主要是为了向诸位支持本文档的开发者致以真诚的谢意。亦将荣耀与在下的感谢致以高天之上的上帝，愿你保守这份文档，成为众人的帮助。 License of Material ¶ MIT License Copyright © 2016 - 2019 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of MkDocs ¶ BSD 2-Clause \"Simplified\" License Copyright © 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. License of Jieba3K ¶ The MIT License (MIT) Copyright © 2013 Sun Junyi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of Simple Lightbox ¶ The MIT License (MIT) Copyright © 2018 Damir Brekalo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. License of MathJax ¶ Apache License 2.0 See the full license here: MathJax license License of mermaid ¶ The MIT License (MIT) Copyright © 2014 - 2018 Knut Sveidqvist Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["without","with","incidental","infringement","都","damage","website","无论","forms","/","需","notice","以下","obtaining","lightbox","out","sublicense","use","不","修改","however","保证",".","授予","permitted","责任","special","所有","被","-","为了","任何","version","to","if","as","copies","将","non","materials","on","particular","furnished","损害","致以","data","such"," ","do","合并","©","distribution","并","（","christie","这份","code","contributors","substitute","action","成为","theory","consequential","list","包含","和","an","你","买卖","above","版权所有","this","donath","众人","person","free","retain","in","permit","出版","之上","作者","is","必须","tom","但","持有","clause","上","warranty","implied","包括","交易","特此","诸位","限于","金宇琛","documentation","exemplary","\"","按","要求","本站","原样","services","damir","散布","following","2","strict","jieba3k","本","for","business","granted","substantial","deal","副本","contract","distribute","not","portions","purpose","and",")","得到","担保","direct","项目","reproduce","服从","开发","明示","mkdocs","2.0","适销","例如","disclaimer","向","software","该软件","loss","暗示","apache","yuchen","下","procurement","涉及","by","在","even","只","sun","(","其他","特定","limitation","行为",",","索赔","advised","。","licenses","event","声明","中文版","有权","2018","subject","redistribution","介绍","negligence","associated","that","are","disclaimed","connection","mermaid","caused","发布","source","有关","条目","人","使用","：","material","binary","的","侵权","授权人","modify","mathjax","noninfringement","whom","holders","junyi","holder","必要","mit","profits","为","express","2014","复制","the","dealings","无","jin","shall","¶","供应","义务","2013","荣耀","中文","授权","including","reserved","合同","charge","must","版权","authors","other","下侧","真诚","开源","liability","merge","适用性","met","及","愿","arising","目的","没有","，","bsd","or","kind","persons","see","感谢","提供","possibility","以上","无权","no","中","fitness","any","included","文版",":","高天","provided","诸多","goods","merchantability","赔偿","再","of","或","rights","亦","主要","knut","权利","软件","tort","下面","许可","协议","原则上","damages","but","原则","permission","）","here","hereby","interruption","持有人","form","publish","贩售","files","full","whether","martin","开发者","列在","redistributions","modification","copy","谢意","sell","是","性","all","copyright","支持","a","so","是否","同等","restriction","conditions","列","损害赔偿","way","liable","sveidqvist","warranties","2016","brekalo","limited","、","适用","上帝","claim","形式",";","帮助","情况","cainmagi","simplified","有人","相关","indirect","与","simple","license","2019","otherwise","be","english","保守","from","文档"],"title":"协议","title_tokens":["协议"]},{"location":"licenses/#licenses","text":"","text_tokens":[],"title":"协议 (Licenses)","title_tokens":["(",")","licenses"," ","协议"]},{"location":"licenses/#_1","text":"MIT 开源许可协议 版权所有 © 2019, 金宇琛 (cainmagi) 特此向任何得到本软件副本或相关文档的人授权：被授权人有权使用、复制、修改、 合并、出版、发布、散布、再授权和/或贩售软件及软件的副本，及授予被供应人 同等权利，只需服从以下义务： 在软件和软件的所有副本中都必须包含以上版权声明和本许可声明。 该软件是\"按原样\"提供的，没有任何形式的明示或暗示，包括但不限于为特定目的和 不侵权的适销性和适用性的保证担保。在任何情况下，作者或版权持有人，都无权要求 任何索赔，或有关损害赔偿的其他责任。无论在本软件的使用上或其他买卖交易中， 是否涉及合同，侵权或其他行为。","text_tokens":["包括","交易","特此","再","侵权","赔偿","都","限于","授权人","或","金宇琛","\"","按","要求","无论","/","需","权利","软件","以下","原样","mit","散布","许可","协议","本","为","不","修改","复制","保证","授予","责任","所有","副本","被","持有人","贩售","任何","供应","义务",")","得到","担保","损害","服从","明示","是","适销","性"," ","向","该软件","合并","©","暗示","授权","下","是否","同等","涉及","合同","版权","在","损害赔偿","只","开源","(","其他","特定","行为",",","索赔","适用性","及","。","包含","和","目的","没有","，","、","声明","适用","有权","买卖","形式","版权所有","情况","cainmagi","提供","以上","无权","有人","相关","中","出版","发布","有关","2019","人","使用","作者","：","必须","文档","但","持有","的","上"],"title":"本站协议 (中文版)","title_tokens":["本站","文版","中文版","(",")","中文"," ","协议"]},{"location":"licenses/#license-of-this-website-english-version","text":"MIT License Copyright © 2019 Yuchen Jin (cainmagi) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["provided","warranty","without","implied","merchantability","with","of","modify","rights","documentation","\"","noninfringement","whom","holders","/","notice","tort","obtaining","mit","out","following","for","sublicense","express","use","damages","but","the","dealings","granted","permission",".","substantial","deal","jin","hereby","contract","distribute","publish","files","not","to","shall","whether","as","portions","copies","purpose","and",")","particular","copy","furnished","sell"," ","software","all","do","©","copyright","yuchen","including","a","so","restriction","conditions","charge","authors","other","action","(","liability","merge","limitation",",","liable","warranties","arising","limited","event","an","or","claim","subject","above","kind","persons","associated","this","cainmagi","no","person","connection","free","in","permit","fitness","license","any","included","2019","otherwise","be",":","is","from"],"title":"License of this website (English version)","title_tokens":["version","english","(",")"," ","license","website","this","of"]},{"location":"licenses/#_2","text":"下面介绍的诸多协议，原则上并无必要列在本条目中（例如MIT License）。列在下侧，主要是为了向诸位支持本文档的开发者致以真诚的谢意。亦将荣耀与在下的感谢致以高天之上的上帝，愿你保守这份文档，成为众人的帮助。","text_tokens":["诸多","无","介绍","支持","下","诸位","帮助","感谢","并","为了","（","上帝","亦","主要","在","列","这份","下侧","真诚","众人","将","中","必要","mit","开发者","与","成为","列在","license","条目","谢意","下面","之上","协议","本","致以","荣耀","原则上","高天","开发","。","原则","是","愿","保守","例如","，","文档"," ","）","向","的","你"],"title":"本站相关项目的协议","title_tokens":["本站","项目","的","协议","相关"]},{"location":"licenses/#license-of-material","text":"MIT License Copyright © 2016 - 2019 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["provided","warranty","without","implied","merchantability","with","infringement","of","modify","rights","documentation","\"","holders","whom","/","notice","tort","obtaining","mit","out","following","for","sublicense","express","use","damages","but","the","dealings","granted","permission",".","substantial","deal","hereby","contract","distribute","-","publish","files","not","to","shall","whether","martin","as","portions","copies","purpose","non","and",")","particular","copy","furnished","sell"," ","software","all","do","©","copyright","including","a","so","restriction","conditions","charge","authors","other","action","(","liability","merge","limitation",",","liable","warranties","2016","arising","limited","event","an","or","claim","subject","above","kind","persons","associated","this","donath","no","person","connection","free","in","permit","fitness","license","any","included","2019","otherwise","be",":","is","from"],"title":"License of Material","title_tokens":[" ","of","license","material"]},{"location":"licenses/#license-of-mkdocs","text":"BSD 2-Clause \"Simplified\" License Copyright © 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","text_tokens":["provided","without","implied","goods","merchantability","with","incidental","of","rights","documentation","exemplary","\"","damage","holders","forms","holder","/","notice","tort","out","services","following","2","strict","profits","for","express","2014","use","damages","but","business","the","however",".","permitted","interruption","special","contract","form","-","not","to","shall","whether","if","as","purpose","materials","and","on",")","redistributions","particular","modification","direct","reproduce","data","disclaimer","such"," ","all","software","loss","©","copyright","including","a","procurement","reserved","distribution","conditions","by","christie","must","even","way","other","code","contributors","substitute","theory","(","liability","consequential","list",",","liable","met","advised","warranties","arising","limited","bsd","event","or","redistribution","above","negligence",";","that","this","are","simplified","possibility","no","disclaimed","retain","indirect","in","caused","source","license","any","fitness","otherwise","be",":","is","binary","tom","clause"],"title":"License of MkDocs","title_tokens":[" ","of","license","mkdocs"]},{"location":"licenses/#license-of-jieba3k","text":"The MIT License (MIT) Copyright © 2013 Sun Junyi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["provided","warranty","without","implied","merchantability","with","of","modify","rights","documentation","\"","noninfringement","whom","holders","junyi","/","notice","tort","obtaining","mit","out","following","for","sublicense","express","use","damages","but","the","dealings","granted","permission",".","substantial","deal","hereby","contract","distribute","publish","files","not","to","shall","whether","as","portions","copies","purpose","and",")","2013","particular","copy","furnished","sell"," ","software","all","do","©","copyright","including","a","so","restriction","conditions","charge","authors","other","sun","action","(","liability","merge","limitation",",","liable","warranties","arising","limited","event","an","or","claim","subject","above","kind","persons","associated","this","no","person","connection","free","in","permit","fitness","license","any","included","otherwise","be",":","is","from"],"title":"License of Jieba3K","title_tokens":[" ","of","license","jieba3k"]},{"location":"licenses/#license-of-simple-lightbox","text":"The MIT License (MIT) Copyright © 2018 Damir Brekalo Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["provided","warranty","without","implied","merchantability","with","of","modify","rights","documentation","\"","noninfringement","whom","holders","/","notice","tort","obtaining","mit","out","damir","following","for","sublicense","express","use","damages","but","the","dealings","granted","permission",".","substantial","deal","hereby","contract","distribute","publish","files","not","to","shall","whether","as","portions","copies","purpose","and",")","particular","copy","furnished","sell"," ","software","all","do","©","copyright","including","a","so","restriction","conditions","charge","authors","other","action","(","liability","merge","limitation",",","liable","warranties","brekalo","arising","limited","event","an","or","claim","2018","subject","above","kind","persons","associated","this","no","person","connection","free","in","permit","fitness","license","any","included","otherwise","be",":","is","from"],"title":"License of Simple Lightbox","title_tokens":["lightbox","simple"," ","license","of"]},{"location":"licenses/#license-of-mathjax","text":"Apache License 2.0 See the full license here: MathJax license","text_tokens":[":","2.0","mathjax","apache","the","see"," ","full","license","here"],"title":"License of MathJax","title_tokens":[" ","of","license","mathjax"]},{"location":"licenses/#license-of-mermaid","text":"The MIT License (MIT) Copyright © 2014 - 2018 Knut Sveidqvist Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","text_tokens":["provided","warranty","without","implied","merchantability","with","of","modify","rights","documentation","\"","knut","noninfringement","whom","holders","/","notice","tort","obtaining","mit","out","following","for","sublicense","express","2014","use","damages","but","the","dealings","granted","permission",".","substantial","deal","hereby","contract","distribute","-","publish","files","not","to","shall","whether","as","portions","copies","purpose","and",")","particular","copy","furnished","sell"," ","software","all","do","©","copyright","including","a","so","restriction","conditions","charge","authors","other","action","(","liability","merge","limitation",",","liable","sveidqvist","warranties","arising","limited","event","an","or","claim","2018","subject","above","kind","persons","associated","this","no","person","connection","free","in","permit","fitness","license","any","included","otherwise","be",":","is","from"],"title":"License of mermaid","title_tokens":[" ","of","license","mermaid"]},{"location":"release-notes/","text":"更新记录 ¶ 大版本更新 ¶ 在此记录本文档的主要更新，读者可以在此确认经过更新后，本文档添加了哪些主要的内容、话题。 0.1 @ February 25, 2019 ¶ 正式立项，开始本文档的撰写工作。目前尚处于未完成状态，计划包括： Tensorflow 1.12 入门教程 从线性问题入门 40% 训练与测试分立 0% 原生的数据管理 0% 其他的高级技巧 0% Tensorflow 2.0 入门教程 0% Tensorflow 第三方扩展库 入门教程 0% 局部更新记录 ¶ 0.18-r1.13 @ March 9, 2019 ¶ 由于Tensorflow的新版 r1.13 发行版预编译包开始支持CUDA 10，本文的内容全部根据 r1.13 版进行调整。特别注意这个星期是Tensorflow 2.0-alpha 横空出世的日子，可喜可贺，可喜可贺。 0.18 @ March 6, 2019 ¶ 完善“从线性问题入门”专题下的 线性分类 ，补充了一些概念便于初学者理解。 0.17 @ March 5, 2019 ¶ 完成“从线性问题入门”专题下的 线性分类 ； 修正前文的一些笔误。 0.15 @ March 4, 2019 ¶ 完成“从线性问题入门”专题下的 本章总说 和 Hello world! ； 微调图片链接， MathJax 的显示特性。 0.12 @ March 3, 2019 ¶ 补完扉页。未来可能会调整 教程导读 ； 修复 Arithmatex 对 MathJax 的引入； 引入 mermaid 库，用于绘制示意图。 0.11 @ February 25, 2019 ¶ 提交 Google Analytics 和 Google Search Console 的账户关联资料； 提交 Disqus 关联资料。 0.10 @ February 25, 2019 ¶ 正式立项，并撰写扉页的一部分。","text_tokens":["可能","包括","状态","可喜可贺","4","3","目前","发行版","图片","测试","三方","”","主要","撰写","关联","mathjax","search","图片链接","工作","绘制","cuda","哪些","february","高级","横空","预","编译","0.1","教程","r1","线性","1.12","本","发行","提交","分立","这个","disqus",".","扉页","9","出世","补充","了","问题","示意图","初学者","部分","-","版","可以","6","导读","扩展","一部","未","0.18","处于","星期","管理","¶","tensorflow","开始","理解","补完","10","进行","计划","；","此","world","读者","前文","从","入门","立项","调整","2.0","数据管理","是","第三方","新版","显示","入门教程","“"," ","训练","hello","特性","引入","可喜","数据","一些","话题","修复","后","支持","下","0.15","由于","微调","5","%","并","链接","第三","在","学者","笔误","局部","记录本","0.17","更新","内容","alpha","意图","全部","初学","其他","!","0.10","13",",","账户","完善","技巧","40","正式","专题","。","示意","和","0.12","资料","，","、","完成","总说","注意","日子","用于","概念","经过","特别","analytics","添加","console","大","便于","本文","一部分","0","google","分类","横空出世","本章","与","mermaid","@","2019","包","空出","对","march","：","会","尚","可贺","arithmatex","库","修正","根据","文档","记录","未来","版本","0.11","确认","25","的","原生"],"title":"更新记录","title_tokens":["记录","更新"]},{"location":"release-notes/#_1","text":"","text_tokens":[],"title":"更新记录","title_tokens":["记录","更新"]},{"location":"release-notes/#_2","text":"在此记录本文档的主要更新，读者可以在此确认经过更新后，本文档添加了哪些主要的内容、话题。","text_tokens":["话题","了","后","经过","添加","可以","主要","在","记录本","哪些","更新","此","内容","读者","本","。","文档","记录","，","、","确认","的"],"title":"大版本更新","title_tokens":["大","版本","更新"]},{"location":"release-notes/#01-february-25-2019","text":"正式立项，开始本文档的撰写工作。目前尚处于未完成状态，计划包括： Tensorflow 1.12 入门教程 从线性问题入门 40% 训练与测试分立 0% 原生的数据管理 0% 其他的高级技巧 0% Tensorflow 2.0 入门教程 0% Tensorflow 第三方扩展库 入门教程 0%","text_tokens":["数据","包括","状态","问题","目前","%","测试","三方","撰写","扩展","第三","未","处于","管理","tensorflow","开始","工作","0","计划","高级","与","其他","训练","教程","从","入门","立项","1.12","线性","技巧","本","40","正式","2.0","。","：","尚","数据管理","第三方","库","分立","入门教程","，","文档"," ","完成","的","原生"],"title":"0.1 @ February 25, 2019","title_tokens":["0.1",",","@"," ","25","2019","february"]},{"location":"release-notes/#_3","text":"","text_tokens":[],"title":"局部更新记录","title_tokens":["记录","局部","更新"]},{"location":"release-notes/#018-r113-march-9-2019","text":"由于Tensorflow的新版 r1.13 发行版预编译包开始支持CUDA 10，本文的内容全部根据 r1.13 版进行调整。特别注意这个星期是Tensorflow 2.0-alpha 横空出世的日子，可喜可贺，可喜可贺。","text_tokens":["注意","出世","可喜","日子","可喜可贺","支持","特别","由于","版","-","发行版","星期","tensorflow","本文","开始","10","进行","cuda","横空出世","内容","横空","alpha","全部","预","13","编译","r1","调整","包","空出","发行","2.0","。","可贺","是","新版","根据","这个","，"," ",".","的"],"title":"0.18-r1.13 @ March 9, 2019","title_tokens":["9","march","0.18","13",",","@"," ","r1",".","-","2019"]},{"location":"release-notes/#018-march-6-2019","text":"完善“从线性问题入门”专题下的 线性分类 ，补充了一些概念便于初学者理解。","text_tokens":["补充","一些","问题","了","概念","下","初学者","”","便于","学者","理解","分类","初学","从","线性","完善","入门","专题","。","“","，"," ","的"],"title":"0.18 @ March 6, 2019","title_tokens":["6","march","0.18",",","@"," ","2019"]},{"location":"release-notes/#017-march-5-2019","text":"完成“从线性问题入门”专题下的 线性分类 ； 修正前文的一些笔误。","text_tokens":["分类","”","专题","。","一些","问题","修正","笔误","“","下"," ","前文","从","线性","入门","完成","的","；"],"title":"0.17 @ March 5, 2019","title_tokens":["2019","march",",","@"," ","5","0.17"]},{"location":"release-notes/#015-march-4-2019","text":"完成“从线性问题入门”专题下的 本章总说 和 Hello world! ； 微调图片链接， MathJax 的显示特性。","text_tokens":["问题","下","微调","图片","”","链接","mathjax","图片链接","；","本章","的","world","!","从","线性","入门","专题","。","显示","和","“","，"," ","完成","hello","特性","总说"],"title":"0.15 @ March 4, 2019","title_tokens":["march",",","4","@","0.15"," ","2019"]},{"location":"release-notes/#012-march-3-2019","text":"补完扉页。未来可能会调整 教程导读 ； 修复 Arithmatex 对 MathJax 的引入； 引入 mermaid 库，用于绘制示意图。","text_tokens":["引入","可能","修复","用于","示意图","导读","mathjax","补完","绘制","；","意图","mermaid","教程","调整","对","。","会","arithmatex","库","示意","，","未来"," ","扉页","的"],"title":"0.12 @ March 3, 2019","title_tokens":["march","0.12",",","3","@"," ","2019"]},{"location":"release-notes/#011-february-25-2019","text":"提交 Google Analytics 和 Google Search Console 的账户关联资料； 提交 Disqus 关联资料。","text_tokens":["关联","。","和","search","资料","disqus"," ","analytics","账户","google","的","；","console","提交"],"title":"0.11 @ February 25, 2019","title_tokens":[",","0.11","@"," ","25","2019","february"]},{"location":"release-notes/#010-february-25-2019","text":"正式立项，并撰写扉页的一部分。","text_tokens":["正式","撰写","一部","。","一部分","，","扉页","部分","立项","的","并"],"title":"0.10 @ February 25, 2019","title_tokens":["0.10",",","@"," ","25","2019","february"]},{"location":"book-1-x/chapter-1/","text":"从线性问题入门 ¶ 摘要 本章将从线性问题入手，讨论最简单的分类与回归问题。我们将随机生成指定分布的数据，通过理论值，检查实验效果。这些简单的、解析的问题，可以提供读者一个直观的感受，并帮助读者快速上手Tensorflow的基本概念与运用。本章中，我们不会涉及任何数据存取、跟踪测度方面的概念，也不会将训练和测试分开，旨在使读者能集中心思到代码规范和Tensorflow的基本功能上。 漫谈线性问题 ¶ 在机器学习领域，线性问题既简单也不简单。目前神经网络主要是指多层、非凸的网络结构，常常用来解复杂的、难以推导的问题。但这并不意味着线性问题容易解决。相反，在很多情况下，线性问题是解不唯一的(undetermined)，解不稳定的(ill-posed/ill-conditioned)，条件的(constrained)。同时，为了得到一个快速收敛的、高质量的解，即使对线性问题，人们也在不断提出、改进解法。例如ISTA, AMP, PGD, LISTA, vAMP等算法，都用来解线性问题。在此不作详细展开。 我们已经知道，一个线性函数具有可加性，和一次齐次性，亦即 \\begin{align} f(x_1 + x_2) &= f(x_1) + f(x_2), \\\\ f(\\alpha x) &= \\alpha f(x). \\end{align} 因此，求解一个线性问题，我们需要将问题纯粹以 线性函数 进行描述。例如， \\begin{align} \\mathbf{y} \\sim \\mathbf{A}\\mathbf{x}. \\end{align} 具体而言， \\mathbf{x} \\mathbf{x} 是我们的已知数据， \\mathbf{y} \\mathbf{y} 是我们的未知量，我们需要找到一个合适的 \\mathbf{A} \\mathbf{A} 来确保 \\mathbf{x} \\mathbf{x} 能拟合到 \\mathbf{y} \\mathbf{y} 。如果此处 \\mathbf{y} \\in \\{0,~1\\}^p \\mathbf{y} \\in \\{0,~1\\}^p 是一个代表p类-分类的向量，那么这就是一个线性分类问题；相反，如果此处 \\mathbf{y} \\in \\mathbb{R}^p \\mathbf{y} \\in \\mathbb{R}^p 在连续p维空间取值，那么这就是一个线性回归问题。 线性问题与凸问题 ¶ 请注意，虽然我们在此处提到“ 线性问题 (Linear problem) ”，但我们指的并非“ 线性规划 (Linear programming) ”。虽然严格意义上，线性规划才是真正的线性问题，但我们在此处尚不讨论线性规划相关的内容，而是着眼于机器学习应用最普遍的两个领域， 分类 和 回归 上。实际上，这两种问题虽然求解的是线性函数，但本质上是凸问题。 例如，如果我们要求解回归问题，通常可以表述成 \\begin{equation} \\begin{aligned} \\arg \\min_{\\mathbf{A}}~& \\sum_{i=1}^N \\mathcal{L}(\\mathbf{A},~\\mathbf{x}_i,~\\mathbf{y}_i), \\\\ \\mathcal{L}(\\mathbf{A},~\\mathbf{x},~\\mathbf{y}) &= \\lVert \\mathbf{y} - \\mathbf{A}\\mathbf{x} \\rVert^2_2. \\end{aligned} \\end{equation} 虽然我们求解的模型 \\mathbf{A} \\mathbf{A} 是线性的，但我们优化的函数对象 \\mathcal{L} \\mathcal{L} 是一个 凸函数 (convex function) 。在此，我们可以将这个标量函数(同时也是凸函数)表述为 \\begin{align} \\forall~\\alpha,~\\beta,~\\mathbf{x}_1,~\\mathbf{x}_2,~\\mathcal{L}(\\alpha\\mathbf{x}_1 + \\beta\\mathbf{x}_2) \\leqslant \\alpha\\mathcal{L}(\\mathbf{x}_1) + \\beta\\mathcal{L}(\\mathbf{x}_2). \\end{align} 我们将这个问题表述为 最小二乘问题(Least-square problem) 。正是由于 \\mathbf{A} \\mathbf{A} 是线性的， \\mathcal{L} \\mathcal{L} 才能被确保为一个凸函数，进而，我们才能确保上述问题能得到精确的全局最小值解。 知悉Tensorflow ¶ 在本章接下来的内容里，我们将探讨Tensorflow如何求解一些简单的问题。对于初次上手的读者而言，在安装Tensorflow，亲自开始写一些project之前，笔者推荐你到这个游乐场“抢鲜体验”一番， Tensorflow Playground 在这个在线页面里，用户不需要有任何编程知识，可以通过直观的操作界面，建立一个简单的 多层感知机网络(有时也叫做Artificial Neural Network, ANN) ，并且实时观测网络的性能和测度。它提供了几个简单的二维数据集，供用户体验不同的数据集下，各种分类、回归问题的合宜解法。如果读者已经对神经网络的基本原理有所了解，相信能通过这个小小的实验场达到心有灵犀。我们在本章所做的project和demo，大体不跳出这个试验场的范畴，只是会略微复杂一点而已。 本章要点 ¶ 下图展示了通过本章学习，能了解到的概念： graph LR st(Hello world!) --> linclas(线性分类) linclas --> linreg(线性回归) linreg --> nonlinreg(非线性回归) nonlinreg --> ed(非线性分类) lp[感知机] --> linclas sigma[Logsitc回归] --> linclas ce[交叉熵] --> linclas opt[优化器] --> linreg argpar[项目选项] --> linreg para[参数回归] --> nonlinreg kernel[核函数] --> ed classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,linclas,linreg,nonlinreg,ed styStart Hello world : 首先，在本节，读者将了解Tensorflow的安装方法，并编写通过第一个简单的Tensorflow程序。 线性分类 : 本节通过解一个简单的二分类问题，我们将引入单层感知机、Logistic回归和交叉熵的概念，并且实验结果进行可视化。 线性回归 : 本节通过解一个与上一节难度相仿的，简单的回归问题，另读者能对比不同优化器的性能、特点，并介绍如何在项目中进行arugument parsing(引入项目的可选项)。 非线性回归 : 本节将修改上一节回归问题的激活函数，将线性的回归问题推广到解析函数参数回归的范畴。 非线性分类 : 本节将通过上一节的参数回归，引入核函数的概念，将线性分类问题推广到非线性空间里。","text_tokens":["lr","基本功能","也","都","equation","存取","应用","精确","/","叫做","游乐","p","constrained","linclas","相反","未知量","代码","实时","不","修改",".","因此","质量","漫谈","问题","了","被","-","表述","取值","为了","解析","任何","线性规划","二乘","tensorflow","改进","开始","参数","parsing","将","classdef","有所","amp","着眼","从","集","安装","节","激活","可选项"," ","结构","二","neural","拟合","就是","并","机器","通常","各种","mathbb","收敛","原理","fill","探讨","全局","ill","通过","而言","容易","和","才","你","用来","注意","arugument","推导","+","而是","神经网络","1","分类","严格","in","入手","lvert","logistic","小小","min","试验","对","上手","空间","需要","可加","模型","但","并且","y","undetermined","上","f","跟踪","目前","理论值","特点","规范","要求","基本功","mathbf","笔者","对象","可视化","学习","2","游乐场","类","kernel","本","难度","快速","描述","提出","运用","神经网","知悉","实际上","problem","非凸","基本","既","条件","了解","第一","end","两个","推荐","；","解法","world","vamp",")","得到","rvert","opt","项目","齐次","函数","很多","接下","例如","单层","操作","hello","未知","连续","一些","可选","下","接下来","详细","两种","涉及","操作界面","解","在","conditioned","有","范畴","写","]","编程","linear","内容","(","logsitc","同时",",","正是","ann","ba9132","实验","只是","才能","。","此处","略微","算法","感受","维空间","之前","在线","常常","介绍","本原","实验场","多层","基本概念","这","灵犀","本节","复杂","一个","请","本章","并非","摘要","意味","初次","graph","下来","人们","：","#","简单","的","到","具有","结果","检查","测试","aligned","最小值","讨论","一番","高质量","这些","展开","领域","lp","感知","线性","mathcal","为","最","心有灵犀","sim","最小","这个","效果","project","器","指定","合宜","可以","交叉","¶","网络结构","感知机","生成","凸","以","非线性","入门","我们","[","分开","来","“","训练","function","即使","数据","合适","r","观测","里","由于","另","~","{","&","试验场","一点","代表","lista","确保","demo","!","network","而已","页面","旨在","linreg","测度","具体","，","意义","sigma","stystart","首先","已经","l","概念","使","理论","神经","跳出","提供","直观","所","选项","解决","有时","程序","推广","性能","普遍","arg","中","提到","分布","凸函数","知道","要点","posed","找到","i",":","高质","基本原理","可加性","一次","意味着","programming","可视","para","对比","begin","本质","leqslant","不作","知识","一节","亦","主要","”","它","二维","方法","nonlinreg","亲自","已知","大体","ce","优化","playground","方面","square","进而","函数参数","如果","forall","达到","着眼于","}","展示","虽然","sum","ed","体验","_","那么","st","\\","等","stroke","纯粹","能","进行","随机","唯一","此","功能","不同","读者","几个","熵","做","least","artificial","核","是","argpar","相仿","相信","性","引入","class","解不","指","真正","a","集下","抢鲜","回归","供","小小的","alpha","向量","对于","fae6a9","知机","建立","、","网络","convex","规划","x","align","求解","上述","不断","pgd",";","编写","帮助","情况","用户","实际","第一个","如何","0","n","相关","心思","与","ista",">","下图","beta","集中","界面","标量","会","尚","难以","=","不会","^","即","稳定","成"],"title":"本章总说","title_tokens":["本章","总说"]},{"location":"book-1-x/chapter-1/#_1","text":"摘要 本章将从线性问题入手，讨论最简单的分类与回归问题。我们将随机生成指定分布的数据，通过理论值，检查实验效果。这些简单的、解析的问题，可以提供读者一个直观的感受，并帮助读者快速上手Tensorflow的基本概念与运用。本章中，我们不会涉及任何数据存取、跟踪测度方面的概念，也不会将训练和测试分开，旨在使读者能集中心思到代码规范和Tensorflow的基本功能上。","text_tokens":["感受","数据","基本","跟踪","问题","检查","概念","指定","理论","也","帮助","使","基本功能","并","理论值","可以","提供","直观","解析","讨论","基本概念","涉及","任何","回归","存取","tensorflow","运用","规范","这些","能","基本功","分类","测试","随机","一个","将","生成","本章","中","方面","功能","心思","与","读者","训练","分布","摘要","入手","从","线性","我们","集中","代码","通过","实验","分开","最","快速","上手","。","旨在","测度","不会","和","，"," ","、","简单","的","到","效果","上"],"title":"从线性问题入门","title_tokens":["问题","从","线性","入门"]},{"location":"book-1-x/chapter-1/#_2","text":"在机器学习领域，线性问题既简单也不简单。目前神经网络主要是指多层、非凸的网络结构，常常用来解复杂的、难以推导的问题。但这并不意味着线性问题容易解决。相反，在很多情况下，线性问题是解不唯一的(undetermined)，解不稳定的(ill-posed/ill-conditioned)，条件的(constrained)。同时，为了得到一个快速收敛的、高质量的解，即使对线性问题，人们也在不断提出、改进解法。例如ISTA, AMP, PGD, LISTA, vAMP等算法，都用来解线性问题。在此不作详细展开。 我们已经知道，一个线性函数具有可加性，和一次齐次性，亦即 \\begin{align} f(x_1 + x_2) &= f(x_1) + f(x_2), \\\\ f(\\alpha x) &= \\alpha f(x). \\end{align} 因此，求解一个线性问题，我们需要将问题纯粹以 线性函数 进行描述。例如， \\begin{align} \\mathbf{y} \\sim \\mathbf{A}\\mathbf{x}. \\end{align} 具体而言， \\mathbf{x} \\mathbf{x} 是我们的已知数据， \\mathbf{y} \\mathbf{y} 是我们的未知量，我们需要找到一个合适的 \\mathbf{A} \\mathbf{A} 来确保 \\mathbf{x} \\mathbf{x} 能拟合到 \\mathbf{y} \\mathbf{y} 。如果此处 \\mathbf{y} \\in \\{0,~1\\}^p \\mathbf{y} \\in \\{0,~1\\}^p 是一个代表p类-分类的向量，那么这就是一个线性分类问题；相反，如果此处 \\mathbf{y} \\in \\mathbb{R}^p \\mathbf{y} \\in \\mathbb{R}^p 在连续p维空间取值，那么这就是一个线性回归问题。","text_tokens":["f","具有","也","不作","目前","都","亦","主要","高质量","mathbf","展开","/","已知","学习","领域","p","constrained","2","相反","线性","未知量","类","快速","sim","描述","如果","不","提出",".","}","因此","神经网","质量","非凸","问题","既","条件","_","-","取值","为了","那么","\\","改进","等","end","纯粹","进行","网络结构","能","；","唯一","此","将","的","解法","vamp",")","得到","amp","以","我们","齐次","函数","很多","是","来","例如","性"," ","结构","即使","未知","连续","数据","解不","合适","r","拟合","指","就是","下","a","详细","并","机器","解","~","回归","在","conditioned","mathbb","{","&","收敛","代表","lista","确保","alpha","向量","(","同时",",","ill","而言","。","容易","y","和","具体","此处","，","、","网络","用来","算法","x","align","维空间","求解","常常","已经","不断","pgd","神经","推导","+","情况","多层","这","解决","神经网络","1","0","分类","复杂","一个","in","ista","知道","posed","意味","找到","对","空间","人们","需要","高质","难以","=","可加","可加性","一次","^","但","即","稳定","意味着","简单","undetermined","到","begin"],"title":"漫谈线性问题","title_tokens":["漫谈","问题","线性"]},{"location":"book-1-x/chapter-1/#_3","text":"请注意，虽然我们在此处提到“ 线性问题 (Linear problem) ”，但我们指的并非“ 线性规划 (Linear programming) ”。虽然严格意义上，线性规划才是真正的线性问题，但我们在此处尚不讨论线性规划相关的内容，而是着眼于机器学习应用最普遍的两个领域， 分类 和 回归 上。实际上，这两种问题虽然求解的是线性函数，但本质上是凸问题。 例如，如果我们要求解回归问题，通常可以表述成 \\begin{equation} \\begin{aligned} \\arg \\min_{\\mathbf{A}}~& \\sum_{i=1}^N \\mathcal{L}(\\mathbf{A},~\\mathbf{x}_i,~\\mathbf{y}_i), \\\\ \\mathcal{L}(\\mathbf{A},~\\mathbf{x},~\\mathbf{y}) &= \\lVert \\mathbf{y} - \\mathbf{A}\\mathbf{x} \\rVert^2_2. \\end{aligned} \\end{equation} 虽然我们求解的模型 \\mathbf{A} \\mathbf{A} 是线性的，但我们优化的函数对象 \\mathcal{L} \\mathcal{L} 是一个 凸函数 (convex function) 。在此，我们可以将这个标量函数(同时也是凸函数)表述为 \\begin{align} \\forall~\\alpha,~\\beta,~\\mathbf{x}_1,~\\mathbf{x}_2,~\\mathcal{L}(\\alpha\\mathbf{x}_1 + \\beta\\mathbf{x}_2) \\leqslant \\alpha\\mathcal{L}(\\mathbf{x}_1) + \\beta\\mathcal{L}(\\mathbf{x}_2). \\end{align} 我们将这个问题表述为 最小二乘问题(Least-square problem) 。正是由于 \\mathbf{A} \\mathbf{A} 是线性的， \\mathcal{L} \\mathcal{L} 才能被确保为一个凸函数，进而，我们才能确保上述问题能得到精确的全局最小值解。","text_tokens":["本质","leqslant","也","equation","最小值","aligned","应用","”","讨论","要求","mathbf","精确","优化","对象","square","学习","领域","2","线性","进而","mathcal","为","最","最小","如果","不","forall","这个","着眼于",".","}","实际上","problem","虽然","sum","问题","被","_","表述","-","可以","线性规划","二乘","\\","end","两个","能","此","将","的","凸",")","得到","着眼","rvert","我们","least","函数","是","例如","“"," ","function","指","真正","由于","a","两种","机器","通常","解","~","回归","在","{","&","linear","确保","内容","alpha","(",",","同时","正是","全局","才能","。","和","此处","，","意义","才","convex","规划","x","注意","align","求解","l","上述","+","而是","这","实际","1","分类","普遍","严格","n","请","相关","arg","一个","提到","凸函数","并非","lvert","beta","i","标量","min","尚","=","^","模型","但","成","y","programming","begin","上"],"title":"线性问题与凸问题","title_tokens":["凸","问题","线性","与"]},{"location":"book-1-x/chapter-1/#tensorflow","text":"在本章接下来的内容里，我们将探讨Tensorflow如何求解一些简单的问题。对于初次上手的读者而言，在安装Tensorflow，亲自开始写一些project之前，笔者推荐你到这个游乐场“抢鲜体验”一番， Tensorflow Playground 在这个在线页面里，用户不需要有任何编程知识，可以通过直观的操作界面，建立一个简单的 多层感知机网络(有时也叫做Artificial Neural Network, ANN) ，并且实时观测网络的性能和测度。它提供了几个简单的二维数据集，供用户体验不同的数据集下，各种分类、回归问题的合宜解法。如果读者已经对神经网络的基本原理有所了解，相信能通过这个小小的实验场达到心有灵犀。我们在本章所做的project和demo，大体不跳出这个试验场的范畴，只是会略微复杂一点而已。","text_tokens":["也","知识","”","二维","它","一番","亲自","笔者","大体","叫做","playground","游乐","感知","游乐场","心有灵犀","实时","如果","不","这个","达到","神经网","project","基本","问题","了","体验","了解","合宜","可以","任何","tensorflow","开始","能","推荐","感知机","将","解法","不同","有所","读者","几个",")","做","我们","artificial","集","安装","相信","接下","“"," ","操作","neural","数据","一些","观测","里","接下来","集下","抢鲜","操作界面","回归","在","供","有","各种","范畴","写","一点","试验场","编程","小小的","内容","demo","对于","(","原理",",","network","探讨","而已","ann","通过","实验","只是","页面","而言","知机","。","和","建立","测度","，","略微","、","网络","你","求解","之前","在线","已经","本原","神经","实验场","跳出","用户","多层","提供","直观","所","灵犀","有时","神经网络","如何","性能","分类","复杂","一个","本章","界面","初次","小小","试验","下来","对","上手","需要","会","基本原理","并且","简单","的","到"],"title":"知悉Tensorflow","title_tokens":["知悉","tensorflow"]},{"location":"book-1-x/chapter-1/#_4","text":"下图展示了通过本章学习，能了解到的概念： graph LR st(Hello world!) --> linclas(线性分类) linclas --> linreg(线性回归) linreg --> nonlinreg(非线性回归) nonlinreg --> ed(非线性分类) lp[感知机] --> linclas sigma[Logsitc回归] --> linclas ce[交叉熵] --> linclas opt[优化器] --> linreg argpar[项目选项] --> linreg para[参数回归] --> nonlinreg kernel[核函数] --> ed classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,linclas,linreg,nonlinreg,ed styStart Hello world : 首先，在本节，读者将了解Tensorflow的安装方法，并编写通过第一个简单的Tensorflow程序。 线性分类 : 本节通过解一个简单的二分类问题，我们将引入单层感知机、Logistic回归和交叉熵的概念，并且实验结果进行可视化。 线性回归 : 本节通过解一个与上一节难度相仿的，简单的回归问题，另读者能对比不同优化器的性能、特点，并介绍如何在项目中进行arugument parsing(引入项目的可选项)。 非线性回归 : 本节将修改上一节回归问题的激活函数，将线性的回归问题推广到解析函数参数回归的范畴。 非线性分类 : 本节将通过上一节的参数回归，引入核函数的概念，将线性分类问题推广到非线性空间里。","text_tokens":["结果","lr","一节","特点","方法","nonlinreg","ce","优化","可视化","学习","lp","linclas","感知","可视","线性","函数参数","kernel","本","难度","修改","展示","器","ed","了","问题","了解","-","解析","st","交叉","第一","stroke","tensorflow","参数","parsing","进行","能","感知机","classdef","将","不同","world","读者",")","非线性","熵","opt","我们","项目","[","安装","节","核","函数","激活","argpar","相仿","可选项","单层"," ","hello","引入","二","class","可选","里","并","另","解","回归","在","范畴","]","fae6a9","(","!","logsitc","fill",",","通过","ba9132","实验","知机","。","linreg","和","，","sigma","、","stystart","首先","概念",";","编写","介绍","arugument","选项","第一个","本节","程序","如何","推广","性能","分类","一个","本章","中","与",">","下图","logistic","graph",":","空间","：","#","并且","简单","的","到","para","对比","上"],"title":"本章要点","title_tokens":["本章","要点"]},{"location":"book-1-x/chapter-1/hello-world/","text":"Hello world! ¶ 摘要 本节包含一个简易的安装指导，主要提供给Windows上的GPU用户。之后，用户可以按照本节指导编写第一个测试程序。 安装Tensorflow ¶ 本节针对Windows使用GPU的用户，提供一个安装最新版Tensorflow的方法。大致的步骤符合以下两个教程： 通过pip安装Tensorflow Tensorflow的GPU支持 但是，需要指出的是，官方教程里有些部分已经不符合当前用户的实际情况，笔者经过摸索，总结以下的安装过程。 总体而言，安装Tensorflow需要用户确保以下条件 NVIDIA驱动已经达到411.31及以上 CUDA 10.0 (10.1不确定能否正常使用) CUDNN已经达到7.3.1及以上 CUPTI版本与CUDA相配（不需要专门安装，在安装CUDA的同时已经自动集成） 除此之外，涉及多GPU支持的库(NCCL和TensorRT)，这里不考虑。因此，我们主要需要确保前三条正常安装。 提示 Tensorflow官方提供的安装包是基于CUDA 9.0，CUDNN >= 7.2的基础上编译的。然而现在NVIDIA已经不再提供CUDA 9.0了。Windows用户可以安装的版本包括过时的8.1和最新的10.1。在这种情况下，官方还提供一个令用户自行从源码编译Tensorflow库的方案，但是对于Windows用户而言过于繁琐，容易出错，这里不建议按照官方教程。 更新NVIDIA驱动 ¶ 首先，我们可以开始更新我们的NVIDIA驱动。任何载有NVIDIA-GPU显卡的电脑，都应当在系统里已经预装好了 GeForce Experience 。点击如下图标开启GeForce Experience（如果是低版本的GeForce Experience，图标可能会不同）， 如左图，在主界面上，可以观察到，当驱动版本不够高时，会自动出现更新提示，依照提示更新即可。建议在更新驱动时，关闭其他所有程序，以免造成干扰。 更新NVIDIA driver 检查更新结果 如果更新完成，如右图，可以在设置界面检查到当前的版本已经达到最新。在安装过程中，由于驱动更新，屏幕可能会闪烁数次。在看到更新提示完成后建议重启。 提示 如果GeForce Experience提示无法更新驱动，可以考虑将机器恢复出厂设置，可能可以解决这一问题。 安装CUDA ¶ 驱动更新并重启后，需要安装最新版的Visual Studio(VS)，这是因为CUDA库本身对VS具有一定的支持，如果先安装CUDA，则这部分支持无法安装到位。这对我们使用Tensorflow并不造成妨害，但是对CUDA的用户并不是一个推荐的做法，所以无论如何，建议在第一步，安装VS，下面提供VS社区版（免费）的链接： Visual Studio官网 接下来，可以开始安装CUDA。进入CUDA安装包的下载链接 下载最新版CUDA CUDA官方指南 提示 须知，并非最新版就是最适合的版本。实际能使用的CUDA版本取决于后续步骤中预编译包的支持版本。就笔者写到这里时，最新的CUDA 10.1已然不匹配最新版预编译包支持的CUDA 10.0，由于版本差距很小，不确定是否会由此引发问题，但读者可以自行尝试。 现在的安装包已经支持在线安装包和离线安装包两种模式，读者可以根据自己的实际情况选择对应的版本。注意，安装CUDA的时候，CUDA可能要求我们翻新驱动版本，但通过GeForce Experience安装的驱动一般应已达到最新，新于CUDA内部提供的驱动。因此，我们需要选择定制安装模式，根据我们需要对比版本号，将驱动更新的选项取消，如下图所示 安装CUDA后，建议重启。 危险 特别需要注意的是，如果你的机器无法通过GeForce Experience更新驱动，那么在这里选择安装驱动也是枉然。并且，这种强制更新驱动的行为很可能导致系统崩溃。因此特别建议在安装CUDA之前一定要解决驱动更新的问题，哪怕是通过恢复出厂设置。 安装CUDNN ¶ 安装CUDA的同时，已经自带安装上了CUPTI。但是CUDNN并没有包含在CUDA中，因此，我们需要到以下链接下载CUDNN并查看安装说明 下载最新版CUDNN CUDNN官方指南 不同的是，CUDNN没有安装包，是以压缩包的形式下载到本地。解压后，其中应当包含如下目录及文件 . └─ cuda/ ├─ bin/ # Binary library │ └─ cudnn64_7.dll ├─ include/ # C++ Include file │ └─ cudnn.h ├─ lib/ # C++ Lib file │ └─ x64/ │ └─ cudnn.lib └─ NVIDIA_SLA_cuDNN_Support.txt # Readme file 假设我们CUDA的安装目录在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，将上述解压的 bin , include 和 lib 三个文件夹，直接拷贝覆盖到该安装目录下，即可完成CUDNN的安装。 进行完上述步骤后，我们还需要确保几个环境变量正确设置： 存在 CUDA_PATH=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，是我们的安装目录。理论上在CUDA安装后，该目录已经自动设置好。 环境变量 PATH 中，存在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/bin , C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/extras/CUPTI/libx64 两个路径，由于CUDNN已经配置在CUDA安装目录下，我们不需要像官方文档那样，添加第三个CUDNN的安装路径。 安装Anaconda ¶ Windows用户建议使用Anaconda管理python环境。作为一个开源的项目，Anaconda发行版已经集成了我们所需要的大多数python包，其中有些包是我们自己难以安装上的，例如支持python3的PIL。我们选用python3版的Anaconda，下载路径如下： Anaconda 最新版下载链接 注意选择x64版的安装包。安装结束后，我们已经有python3.7的环境了。鉴于有些情况下我们可能需要使用更早的python版本，接下来我们可以安装python3.6的虚环境。 Anaconda可以安装在用户或系统目录下。注意，如果安装在系统目录下，如果不在虚环境下，安装任何包都需要管理员模式。不过这不影响本教程的示例，因为我们将安装虚环境。直接打开 Anaconda Prompt ，并键入以下命令： conda create -n py36 python = 3 .6 anaconda 按照引导流程安装，经过一段时间后，我们将得到python3.6版的Anaconda。以后我们可以直接从开始菜单 Anaconda Prompt (py36) 进入该虚环境，也可以在基环境中键入 activate py36 转换到虚环境中。 提示 如果用户愿意，还可以通过 conda install -c conda-forge opencv 安装 opencv 。opencv是一个强大的图像处理库，这里python版的opencv比C++版更容易上手。一般该命令安装的是conda库中最新版的opencv（截至笔者写到这里时是opencv3.4.4）。然而，这样安装的并非是支持GPU的版本。尽管conda还提供一个GPU的opencv版本，可以通过 conda install -c patricksnape opencv-gpu 安装 opencv2 ，但它的版本还停留在2.4.9，和opencv3的用法殊有不同，请读者注意这一点。 安装预编译好的Tensorflow ¶ 可以通过 pip install tensorflow-gpu == 查看Tensorflow是否有官方发行的新版。当然，使用GPU的用户要特别注意最新版是否和你预装的驱动匹配，尤其是CUDA是否匹配，否则Tensorflow可能无法正常工作。 在官方发行版不适合我们使用的时候，我们也可以查看如下第三方发行的项目： fo40225/tensorflow-windows-wheel 该项目的维护者在不断根据Tensorflow的更新，预编译出适合不同版本的Tensorflow安装包。截至笔者写到这里为止，最新支持到r1.12版。 原则上来讲，我们选择尽可能新的版本。有时候官方发行版对CUDA的支持滞后，因此我们可以选择第三方版。无论选择哪种发行方，要安装Tensorflow，我们需要选择对应的GPU版，并在虚环境下执行以下命令： 官方版 pip install --upgrade tensorflow-gpu 第三方版 pip install https://github.com/fo40225/tensorflow-windows-wheel/blob/master/1.12.0/py36/GPU/cuda100cudnn73sse2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 第三方版(CPU AVX2加强) curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 \"C:/Program Files/7-Zip/7z.exe\" x tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 # Note that you need to specify where your 7-zip gets installed. pip install tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 等待一段时间后，安装将会结束。 Hello world! 测试 ¶ 撰写如下代码，保存到 hello-world.py 文件， Python 1 2 3 4 5 6 7 8 9 if __name__ == '__main__' : import tensorflow as tf test_str = tf . constant ( 'Hello, world!' ) test_cal = tf . reduce_sum ( tf . random_normal ([ 1000 , 1000 ])) with tf . Session () as sess : print ( 'Current Tensorflow version is:' , tf . __version__ ) print ( 'Test string: ' , sess . run ( test_str )) print ( 'Test calculation:' , sess . run ( test_cal )) Output Current Tensorflow version is: 1 .12.0 Test string: b 'Hello, world!' Test calculation: -1948.6578 在保存目录下，执行 python hello-world.py 第一次运行可能需要等待较长的初始化时间（硬件配置）。如果能正常运行，我们将看到如下结果： 其中，显示结果之前的记录信息反映了GPU已经可以正常工作。而“Test calculation”显示的结果是 10^6 10^6 个服从 \\mathcal{N}(0,1) \\mathcal{N}(0,1) 分布的随机数之和。根据相互独立的随机正态分布互不相关的特性，我们可以推算出，该结果服从 \\mathcal{N}(0,10^3) \\mathcal{N}(0,10^3) 的正态分布。","text_tokens":["可能","比","打开","with","upgrade","4","也","危险","都","运行","恢复","到位","第三个","001","目录","段时间","cupti","无论","master","/","截至","gpu","以下","假设","raw","lib","编译","定制","代码","符合","变量","不",".","键入","'","因此","如","正态分布","了","问题","所有","除此","环境","相互","random","-","自行","考虑","导致系统","任何","whl","version","后续","新","to","tensorflow","建议","开始","if","as","将","第一步","reduce","7.3","早","正确","从","哪","cal","安装","节","示例","保存","进入","图像处理","note","下载"," ","随机数","三条","constant","特性","print","图像","低版本","就是","翻新","确定","并","（","机器","其中","影响","加强","cudnn","10.0","当然","屏幕","geforce","通过","而言","最新版","最新","转换","这里","包含","容易","文件","和","解压","your","path","开启","出错","com","你","2.4","注意","过时","└","zip","过程","件夹","除此之外","三个","cudnn64","1","显卡","b","崩溃","滞后","初始化","用法","这部","流程","引导","无法","自带","等待","对","is","需要","集成","anaconda","但","版本","并且","要","版本号","以后","上","初始","包括","opencv","exe","按照","h","pip","三方","正常","\"","cp36","要求","笔者","处理","令","cpu","较长","简易","411.31","当前","管理员","不是","8","2","r1","指南","本","好","dll","─","多数","如下","create","结束","条件","这种","预装","第一次","第一","管理","两个","curl","tf","菜单","推荐","独立","world",")","得到","自动","主","studio","枉然","│","项目","尽可","服从","第三方","显示","接下","例如","hello","这部分","源码","4.4","cuda100cudnn73sse2","尽可能","推算出","出厂","下","c++","接下来","两种","涉及","基于","数次","开始菜单","在","有","推算","写","图","]","配置","鉴于","内部","更新","观察","取消","(","其他","行为","同时",",","include","包都","环境变量","不够","为止","时","。","基础","对应","install","该项","gets","针对","应已","在线","之前","作为","提示","calculation","经过","特别","python","nccl","that","添加","driver","本身","str","图标","能否","这","须知","即可","社区","所以","一个","patricksnape","请","相配","need","愿意","7","session","并非","摘要","出现","时候","查看","下来","总体而言","使用","：","o","库","就","#","binary","系统目录","main","记录","强大","的","到","tensorrt","维护","具有","结果","而","互不","检查","右图","3","由此","一定","发行版","blob","总结","测试","当","环境变","手","工作","cuda","python3","虚","算出","大多","教程","但是","mathcal","不再","发行","最","存在","activate","依照","系统","高时","一般","9","左图","conda","部分","过于","版","run","可以","6","取决","专门","¶","txt","wheel","因为","avx2","点击","amd64","之","维护者","无论如何","以","我们","繁琐","[","新版","“","反映","大致","nvidia","12","方","这样","应当","大多数","那样","里","由于","基","第三","x64","测试程序","program","已然","opencv3","停留","像","一点","readme","{","current","确保","normal","开源","!","覆盖","个","然而","种","computing","及","bin","__","摸索","一段","殊有","强制","没有","，","目的","是因为","完成","有些","机数","首先","已经","方案","toolkit","指出","理论","先","提供","选项","所","路径","v10","匹配","解决","引发","程序","有时","以上","002","还","vs","低版","中","1000","本地","file","分布","将会","output","包","之后","一段时间","自己",":","├","fo40225","8.1","库中","visual","py36","一次","适合","选择","对比","步骤","现在","完","以免","12.0","https","说明","或","”","主要","它","撰写","cp36m","方法","forge","有时候","windows","载有","压缩包","哪怕","很小","更","预","test","时间","之外","pil","1.12","下面","免费","原则上","造成","原则","where","差距","如果","extras","githubusercontent","name","达到","）","尤其","}","中预","所示","官方版","给","sum","support","硬件","总体","_","则","files","那么","\\","压缩","能","进行","来讲","10","c","随机","指导","不同","导致","读者","几个","文件夹","直接","是","1948.6578","specify","安装包","执行","该","libx64","出","尽管","支持","后","闪烁","9.0","5","是否","7z","链接","py","import","官方","github","installed","尝试","对于","模式","妨害","重启","设置","sla","10.1","这一","you","不过","前","新于","x","多","cuda100cudnn73avx2","上述","形式","编写","不断","拷贝","win","sess","情况","7.2","用户","选用","干扰","信息","电脑","实际","第一个","离线","prompt","如何","0","命令","n","看到","关闭","opencv2","相关","很","官网","与","取决于",">","界面","否则","驱动","一步","experience","会","做法","=","难以","根据","string","^","文档","包是","library"],"title":"Hello world!","title_tokens":["hello"," ","world","!"]},{"location":"book-1-x/chapter-1/hello-world/#hello-world","text":"摘要 本节包含一个简易的安装指导，主要提供给Windows上的GPU用户。之后，用户可以按照本节指导编写第一个测试程序。","text_tokens":["给","编写","按照","用户","可以","提供","测试","主要","第一个","第一","程序","测试程序","windows","一个","指导","gpu","简易","摘要","本","之后","安装","节","。","包含","，"," ","的","上"],"title":"Hello world!","title_tokens":["hello"," ","world","!"]},{"location":"book-1-x/chapter-1/hello-world/#tensorflow","text":"本节针对Windows使用GPU的用户，提供一个安装最新版Tensorflow的方法。大致的步骤符合以下两个教程： 通过pip安装Tensorflow Tensorflow的GPU支持 但是，需要指出的是，官方教程里有些部分已经不符合当前用户的实际情况，笔者经过摸索，总结以下的安装过程。 总体而言，安装Tensorflow需要用户确保以下条件 NVIDIA驱动已经达到411.31及以上 CUDA 10.0 (10.1不确定能否正常使用) CUDNN已经达到7.3.1及以上 CUPTI版本与CUDA相配（不需要专门安装，在安装CUDA的同时已经自动集成） 除此之外，涉及多GPU支持的库(NCCL和TensorRT)，这里不考虑。因此，我们主要需要确保前三条正常安装。 提示 Tensorflow官方提供的安装包是基于CUDA 9.0，CUDNN >= 7.2的基础上编译的。然而现在NVIDIA已经不再提供CUDA 9.0了。Windows用户可以安装的版本包括过时的8.1和最新的10.1。在这种情况下，官方还提供一个令用户自行从源码编译Tensorflow库的方案，但是对于Windows用户而言过于繁琐，容易出错，这里不建议按照官方教程。","text_tokens":["现在","包括","按照","总结","pip","主要","正常","方法","cuda","windows","cupti","笔者","令","gpu","以下","411.31","当前","编译","之外","教程","tensorrt","但是","本","不再","符合","不","达到","）",".","因此","了","条件","除此","这种","总体","部分","过于","自行","考虑","可以","专门","tensorflow","两个","建议","7.3",")","自动","从","我们","繁琐","安装","节","是","新版","安装包"," ","三条","大致","源码","nvidia","支持","下","里","9.0","确定","（","涉及","基于","在","cudnn","官方","10.0","确保","对于","(","同时","通过","10.1","然而","而言","最新版","最新","。","及","这里","基础","摸索","容易","和","，","前","出错","有些","针对","多","过时","已经","提示","方案","指出","过程","经过","nccl","情况","7.2","用户","提供","除此之外","能否","实际","以上","1","还","一个","相配","与",">","驱动","总体而言","使用","：","需要","集成","库","=","8.1","版本","的","步骤","上"],"title":"安装Tensorflow","title_tokens":["安装","tensorflow"]},{"location":"book-1-x/chapter-1/hello-world/#nvidia","text":"首先，我们可以开始更新我们的NVIDIA驱动。任何载有NVIDIA-GPU显卡的电脑，都应当在系统里已经预装好了 GeForce Experience 。点击如下图标开启GeForce Experience（如果是低版本的GeForce Experience，图标可能会不同）， 如左图，在主界面上，可以观察到，当驱动版本不够高时，会自动出现更新提示，依照提示更新即可。建议在更新驱动时，关闭其他所有程序，以免造成干扰。 更新NVIDIA driver 检查更新结果 如果更新完成，如右图，可以在设置界面检查到当前的版本已经达到最新。在安装过程中，由于驱动更新，屏幕可能会闪烁数次。在看到更新提示完成后建议重启。 提示 如果GeForce Experience提示无法更新驱动，可以考虑将机器恢复出厂设置，可能可以解决这一问题。","text_tokens":["可能","结果","以免","检查","右图","都","恢复","当","载有","gpu","当前","好","依照","系统","高时","造成","如果","达到","）","如","如下","左图","了","问题","所有","预装","-","可以","考虑","任何","建议","开始","将","点击","不同","自动","主","我们","安装","是"," ","nvidia","应当","后","出厂","低版本","里","由于","闪烁","（","机器","数次","在","更新","屏幕","观察","geforce","其他","重启","设置","不够","时","最新","。","这一","，","开启","完成","首先","已经","提示","过程","driver","干扰","图标","电脑","解决","即可","程序","显卡","低版","看到","关闭","中","无法","出现","界面","驱动","experience","会","版本","的","到","上"],"title":"更新NVIDIA驱动","title_tokens":["驱动","nvidia","更新"]},{"location":"book-1-x/chapter-1/hello-world/#cuda","text":"驱动更新并重启后，需要安装最新版的Visual Studio(VS)，这是因为CUDA库本身对VS具有一定的支持，如果先安装CUDA，则这部分支持无法安装到位。这对我们使用Tensorflow并不造成妨害，但是对CUDA的用户并不是一个推荐的做法，所以无论如何，建议在第一步，安装VS，下面提供VS社区版（免费）的链接： Visual Studio官网 接下来，可以开始安装CUDA。进入CUDA安装包的下载链接 下载最新版CUDA CUDA官方指南 提示 须知，并非最新版就是最适合的版本。实际能使用的CUDA版本取决于后续步骤中预编译包的支持版本。就笔者写到这里时，最新的CUDA 10.1已然不匹配最新版预编译包支持的CUDA 10.0，由于版本差距很小，不确定是否会由此引发问题，但读者可以自行尝试。 现在的安装包已经支持在线安装包和离线安装包两种模式，读者可以根据自己的实际情况选择对应的版本。注意，安装CUDA的时候，CUDA可能要求我们翻新驱动版本，但通过GeForce Experience安装的驱动一般应已达到最新，新于CUDA内部提供的驱动。因此，我们需要选择定制安装模式，根据我们需要对比版本号，将驱动更新的选项取消，如下图所示 安装CUDA后，建议重启。 危险 特别需要注意的是，如果你的机器无法通过GeForce Experience更新驱动，那么在这里选择安装驱动也是枉然。并且，这种强制更新驱动的行为很可能导致系统崩溃。因此特别建议在安装CUDA之前一定要解决驱动更新的问题，哪怕是通过恢复出厂设置。","text_tokens":["现在","可能","具有","也","危险","由此","一定","恢复","到位","要求","cuda","无论","笔者","哪怕","很小","预","编译","不是","定制","下面","但是","免费","指南","最","造成","一般","系统","差距","如果","不","达到","）","因此","中预","如下","所示","问题","这种","部分","则","版","自行","可以","导致系统","那么","取决","后续","第一","tensorflow","建议","开始","能","因为","推荐","将","第一步","导致","读者","无论如何",")","studio","枉然","我们","安装","进入","是","新版","安装包","接下","下载"," ","这部分","后","支持","出厂","就是","翻新","接下来","由于","确定","是否","两种","并","（","机器","链接","在","官方","写","图","已然","10.0","尝试","更新","内部","取消","geforce","模式","(","妨害","重启","行为","设置","通过","10.1","最新版","时","最新","。","这里","对应","和","强制","，","是因为","你","新于","注意","应已","在线","之前","已经","提示","特别","情况","本身","先","用户","提供","选项","这","须知","实际","匹配","离线","解决","引发","如何","崩溃","社区","vs","所以","一个","很","官网","这部","无法","并非","取决于","驱动","时候","包","下来","一步","使用","对","自己","experience","需要","：","会","做法","库","就","根据","visual","但","版本","并且","适合","要","选择","版本号","的","到","对比","步骤"],"title":"安装CUDA","title_tokens":["安装","cuda"]},{"location":"book-1-x/chapter-1/hello-world/#cudnn","text":"安装CUDA的同时，已经自带安装上了CUPTI。但是CUDNN并没有包含在CUDA中，因此，我们需要到以下链接下载CUDNN并查看安装说明 下载最新版CUDNN CUDNN官方指南 不同的是，CUDNN没有安装包，是以压缩包的形式下载到本地。解压后，其中应当包含如下目录及文件 . └─ cuda/ ├─ bin/ # Binary library │ └─ cudnn64_7.dll ├─ include/ # C++ Include file │ └─ cudnn.h ├─ lib/ # C++ Lib file │ └─ x64/ │ └─ cudnn.lib └─ NVIDIA_SLA_cuDNN_Support.txt # Readme file 假设我们CUDA的安装目录在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，将上述解压的 bin , include 和 lib 三个文件夹，直接拷贝覆盖到该安装目录下，即可完成CUDNN的安装。 进行完上述步骤后，我们还需要确保几个环境变量正确设置： 存在 CUDA_PATH=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0 ，是我们的安装目录。理论上在CUDA安装后，该目录已经自动设置好。 环境变量 PATH 中，存在 C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/bin , C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v10.0/extras/CUPTI/libx64 两个路径，由于CUDNN已经配置在CUDA安装目录下，我们不需要像官方文档那样，添加第三个CUDNN的安装路径。","text_tokens":["完","h","说明","第三个","环境变","目录","cuda","cupti","压缩包","/","gpu","以下","假设","lib","但是","指南","存在","变量","好","extras","dll","不","─",".","因此","如下","了","support","环境","_","files","两个","压缩","txt","进行","c","将","不同","几个","文件夹","以","正确","自动","│","我们","直接","安装","是","新版","安装包","该","下载"," ","libx64","nvidia","应当","后","那样","下","c++","由于","并","其中","链接","第三","在","cudnn","官方","x64","program","像","readme","配置","确保","覆盖","同时",",","设置","include","sla","环境变量","最新版","computing","最新","。","及","包含","bin","文件","和","没有","，","解压","path","完成","已经","toolkit","└","上述","形式","拷贝","件夹","理论","添加","路径","三个","v10","cudnn64","即可","0","还","中","本地","file","7","自带","查看",":","├","需要","：","=","#","binary","文档","library","的","到","步骤","上"],"title":"安装CUDNN","title_tokens":["安装","cudnn"]},{"location":"book-1-x/chapter-1/hello-world/#anaconda","text":"Windows用户建议使用Anaconda管理python环境。作为一个开源的项目，Anaconda发行版已经集成了我们所需要的大多数python包，其中有些包是我们自己难以安装上的，例如支持python3的PIL。我们选用python3版的Anaconda，下载路径如下： Anaconda 最新版下载链接 注意选择x64版的安装包。安装结束后，我们已经有python3.7的环境了。鉴于有些情况下我们可能需要使用更早的python版本，接下来我们可以安装python3.6的虚环境。 Anaconda可以安装在用户或系统目录下。注意，如果安装在系统目录下，如果不在虚环境下，安装任何包都需要管理员模式。不过这不影响本教程的示例，因为我们将安装虚环境。直接打开 Anaconda Prompt ，并键入以下命令： conda create -n py36 python = 3 .6 anaconda 按照引导流程安装，经过一段时间后，我们将得到python3.6版的Anaconda。以后我们可以直接从开始菜单 Anaconda Prompt (py36) 进入该虚环境，也可以在基环境中键入 activate py36 转换到虚环境中。 提示 如果用户愿意，还可以通过 conda install -c conda-forge opencv 安装 opencv 。opencv是一个强大的图像处理库，这里python版的opencv比C++版更容易上手。一般该命令安装的是conda库中最新版的opencv（截至笔者写到这里时是opencv3.4.4）。然而，这样安装的并非是支持GPU的版本。尽管conda还提供一个GPU的opencv版本，可以通过 conda install -c patricksnape opencv-gpu 安装 opencv2 ，但它的版本还停留在2.4.9，和opencv3的用法殊有不同，请读者注意这一点。","text_tokens":["可能","opencv","比","打开","3","也","按照","发行版","或","它","目录","forge","手","段时间","windows","笔者","处理","截至","python3","虚","gpu","以下","更","管理员","时间","大多","pil","教程","本","发行","activate","系统","一般","如果","不","）","多数",".","键入","如下","9","create","conda","了","结束","环境","版","-","可以","任何","6","管理","建议","开始","因为","菜单","c","将","不同","读者","早","得到",")","从","我们","项目","直接","安装","示例","进入","是","新版","安装包","接下","该","例如","图像处理","下载"," ","4.4","尽管","这样","大多数","图像","支持","后","下","c++","接下来","并","基","（","其中","影响","链接","开始菜单","在","有","x64","写","停留","opencv3","一点","鉴于","开源","模式","(","包都","通过","然而","最新版","时","最新","。","转换","这里","一段","install","容易","殊有","和","不过","，","有些","2.4","注意","作为","已经","提示","经过","python","选用","情况","用户","提供","所","路径","这","prompt","还","命令","n","一个","patricksnape","opencv2","请","中","用法","愿意","7","流程","引导","并非","包","一段时间","下来","使用","自己","需要","：","集成","anaconda","难以","=","库","系统目录","库中","py36","包是","但","版本","强大","选择","的","到","以后","上"],"title":"安装Anaconda","title_tokens":["anaconda","安装"]},{"location":"book-1-x/chapter-1/hello-world/#tensorflow_1","text":"可以通过 pip install tensorflow-gpu == 查看Tensorflow是否有官方发行的新版。当然，使用GPU的用户要特别注意最新版是否和你预装的驱动匹配，尤其是CUDA是否匹配，否则Tensorflow可能无法正常工作。 在官方发行版不适合我们使用的时候，我们也可以查看如下第三方发行的项目： fo40225/tensorflow-windows-wheel 该项目的维护者在不断根据Tensorflow的更新，预编译出适合不同版本的Tensorflow安装包。截至笔者写到这里为止，最新支持到r1.12版。 原则上来讲，我们选择尽可能新的版本。有时候官方发行版对CUDA的支持滞后，因此我们可以选择第三方版。无论选择哪种发行方，要安装Tensorflow，我们需要选择对应的GPU版，并在虚环境下执行以下命令： 官方版 pip install --upgrade tensorflow-gpu 第三方版 pip install https://github.com/fo40225/tensorflow-windows-wheel/blob/master/1.12.0/py36/GPU/cuda100cudnn73sse2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 第三方版(CPU AVX2加强) curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 curl -o tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 https://raw.githubusercontent.com/fo40225/tensorflow-windows-wheel/master/1.12.0/py36/GPU/cuda100cudnn73avx2/tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.002 \"C:/Program Files/7-Zip/7z.exe\" x tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.7z.001 # Note that you need to specify where your 7-zip gets installed. pip install tensorflow_gpu-1.12.0-cp36-cp36m-win_amd64.whl 等待一段时间后，安装将会结束。","text_tokens":["维护","可能","exe","upgrade","也","https","发行版","blob","pip","三方","正常","cp36m","001","\"","cp36","段时间","工作","有时候","cuda","windows","无论","master","/","笔者","截至","虚","cpu","gpu","以下","预","raw","编译","时间","r1","1.12","发行","原则上","原则","where","不","githubusercontent",".","尤其","因此","如下","官方版","结束","环境","预装","_","-","版","可以","files","whl","新","to","tensorflow","curl","来讲","wheel","avx2","c","不同","amd64","维护者",")","我们","项目","尽可","哪","安装","是","第三方","specify","安装包","新版","执行","note"," ","出","12","方","cuda100cudnn73sse2","尽可能","支持","后","下","是否","并","7z","加强","第三","在","有","官方","写","github","program","installed","当然","更新","(","通过","种","为止","最新版","最新","。","这里","you","一段","install","对应","和","目的","，","your","该项","com","gets","你","x","注意","cuda100cudnn73avx2","zip","不断","win","特别","that","用户","匹配","有时","002","0","命令","滞后","need","7","无法","将会","否则","驱动","时候","查看","等待","一段时间","使用","对",":","：","需要","fo40225","=","o","#","根据","py36","版本","要","适合","选择","的","到"],"title":"安装预编译好的Tensorflow","title_tokens":["安装","好","预","tensorflow","编译","的"]},{"location":"book-1-x/chapter-1/hello-world/#hello-world_1","text":"撰写如下代码，保存到 hello-world.py 文件， Python 1 2 3 4 5 6 7 8 9 if __name__ == '__main__' : import tensorflow as tf test_str = tf . constant ( 'Hello, world!' ) test_cal = tf . reduce_sum ( tf . random_normal ([ 1000 , 1000 ])) with tf . Session () as sess : print ( 'Current Tensorflow version is:' , tf . __version__ ) print ( 'Test string: ' , sess . run ( test_str )) print ( 'Test calculation:' , sess . run ( test_cal )) Output Current Tensorflow version is: 1 .12.0 Test string: b 'Hello, world!' Test calculation: -1948.6578 在保存目录下，执行 python hello-world.py 第一次运行可能需要等待较长的初始化时间（硬件配置）。如果能正常运行，我们将看到如下结果： 其中，显示结果之前的记录信息反映了GPU已经可以正常工作。而“Test calculation”显示的结果是 10^6 10^6 个服从 \\mathcal{N}(0,1) \\mathcal{N}(0,1) 分布的随机数之和。根据相互独立的随机正态分布互不相关的特性，我们可以推算出，该结果服从 \\mathcal{N}(0,10^3) \\mathcal{N}(0,10^3) 的正态分布。","text_tokens":["可能","初始","结果","而","互不","with","3","4","运行","12.0","”","撰写","正常","目录","工作","gpu","较长","test","算出","8","时间","2","代码","mathcal","name","如果","）",".","'","}","如下","正态分布","9","sum","了","硬件","相互","random","_","-","run","可以","6","version","第一次","\\","第一","tensorflow","10","能","tf","if","as","随机","独立","将","world","reduce","之",")","我们","[","cal","保存","服从","1948.6578","是","显示","执行","该","“"," ","随机数","反映","hello","constant","特性","print","推算出","下","5","（","其中","py","在","import","推算","{","]","配置","current","normal","(","!",",","个","。","__","文件","和","，","机数","之前","已经","calculation","python","sess","str","信息","1","b","0","n","看到","相关","初始化","1000","7","session","分布","output","等待",":","is","需要","：","=","根据","string","一次","^","main","记录","的","到"],"title":"Hello world! 测试","title_tokens":["world","!"," ","hello","测试"]},{"location":"book-1-x/chapter-1/linear-classification/","text":"线性分类 ¶ 摘要 本节介绍如何使用顺序模型(sequential model)来编写一个线性分类器，使用sigmoid函数激活，并验证其效果。 理论 ¶ 问题描述 ¶ 考虑我们有如下的二分类数据集 (\\mathbf{x},~y_i) \\in \\mathbb{D}_i (\\mathbf{x},~y_i) \\in \\mathbb{D}_i ，并且有一个未知的常数向量 \\mathbf{a}_i \\mathbf{a}_i 和未知的常数标量 c_i c_i ，使得： \\begin{equation} y_i = \\left\\{ \\begin{aligned} 0, && \\mathbf{a}_i^T \\mathbf{x} + c_i \\leqslant 0, \\\\ 1, && \\mathbf{a}_i^T \\mathbf{x} + c_i > 0. \\end{aligned} \\right. \\end{equation} 其中， \\mathbf{a} \\mathbf{a} 可以看成是某超平面的（未标准化的）法向量，那么 \\mathbf{a}^T \\mathbf{x} + c = 0 \\mathbf{a}^T \\mathbf{x} + c = 0 是该超平面的截距式定义，亦即该平面与 x_i x_i 轴的交点可以显式表述为 x_i^{(0)} = - \\frac{c}{a_i} x_i^{(0)} = - \\frac{c}{a_i} 。由此可知，式 (1) (1) 显式定义了一个点在超平面的哪一侧。特别地，若 \\mathbf{x} \\mathbf{x} 是一个二维向量，则该超平面退化为一维平面；若 \\mathbf{x} \\mathbf{x} 是一个标量，则该超平面退化为一条直线。 若我们定义 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} ，有 \\begin{equation} \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix}, ~~ \\mathbf{A} = \\begin{bmatrix} \\mathbf{a}^T_1 \\\\ \\mathbf{a}^T_2 \\\\ \\vdots \\\\ \\mathbf{a}^T_n \\end{bmatrix}, ~~ \\mathbf{c} = \\begin{bmatrix} c_1 \\\\ c_2 \\\\ \\vdots \\\\ c_n \\end{bmatrix}. \\end{equation} 则我们可以认为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 其中 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 是一个定义噪声的向量。 我们可以把向量 \\mathbf{y} \\mathbf{y} 的元素看成是互不相关的多个超平面对向量 \\mathbf{x} \\mathbf{x} 各自独立的分类结果。即 y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} 。由于每个超平面构成一个二分类，如果把每个二分类看作是向量是否属于这个类的测度，那么 \\mathbf{y} \\mathbf{y} 可以被看作是一个多分类的结果，尽管向量 \\mathbf{x} \\mathbf{x} 可能被同时分入多个类中。 假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 来（亦即是否属于该分类）。 在这个问题里，我们虽然不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，但我们知道由 (3) (3) 确定的线性关系，因此，我们可以随机生成一组 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，构建线性模型： \\begin{align} \\tilde{\\mathbf{y}} = \\sigma ( \\mathbf{W} \\mathbf{x} + \\mathbf{b} ). \\end{align} 其中，可微函数 \\sigma \\sigma 是一个将实数空间 \\mathbb{R}^n \\mathbb{R}^n 映射到有限范围的实数空间 [0,~1]^n [0,~1]^n 内的函数。特别地， \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 。因此，可以将 \\sigma \\sigma 看作是二分类布尔函数的插值函数。理论上，只要我们找到 \\mathbf{W}=\\mathbf{A} \\mathbf{W}=\\mathbf{A} ， \\mathbf{b}=\\mathbf{c} \\mathbf{b}=\\mathbf{c} ，则该线性分类器可以直接拟合出原分布来。 感知机 ¶ 我们将 (4) (4) 定义的线性模型称为 单层感知机 (Single-layer perceptron) 模型。它包含一个权重矩阵 \\mathbf{W} \\mathbf{W} 和一个偏置矩阵 \\mathbf{b} \\mathbf{b} 。事实上，可以将 (4) (4) 改写成如下形式 \\begin{align} \\tilde{\\mathbf{y}} = \\sigma \\left( \\begin{bmatrix} \\mathbf{W} & \\mathbf{b} \\end{bmatrix} \\begin{bmatrix} \\mathbf{x} \\\\ 1 \\end{bmatrix} \\right). \\end{align} 可见偏置本身可以看成是输入向量多了一个常数元素的等价模型。 感知机是最早的神经网络形式，它非常孱弱，只能解线性问题，但却为神经网络后来的发展开了先河。在单层感知机里，我们视输入向量 \\mathbf{x} \\mathbf{x} 的每个元素为一个“神经元”，矩阵 \\mathbf{W} \\mathbf{W} 和偏置 \\mathbf{b} \\mathbf{b} 将我们的输入映射到输出层 \\mathbf{y} \\mathbf{y} ，输出层的每个元素也视为一个神经元。在这个过程中， W_{ij} W_{ij} 作为 i i 行 j j 列的元素，代表了连接两个神经元的权重。我们用红线代表正值，蓝线代表负值，感知机可以被图示为 线性感知机的输出也是输入的线性组合，但我们可以添加激活函数，即 \\sigma(\\cdot) \\sigma(\\cdot) 将其映射到非线性空间。这要求我们添加的激活函数是一个非线性函数。 事实上，将单层感知机层叠，前一层的输出作为后一层的输入，就构建出早期的神经网络。这种网络每一层都是全连接的（两个神经元之间总是有权重，尽管值可能为0），每一层都有激活函数。理论上，任意一个两层堆叠的感知机，只要神经元数目足够多，就可以拟合出任意一个非线性函数。然而，实际测试中，这一理论的效果并不尽如人意，因此又有陆续地改进，才有了后来的深度学习。饮水思源，鉴往知来，我们也将从这个简简单单的单层模型开始，走上学习“深度学习”之旅。 Sigmoid函数 ¶ 在上述介绍中，我们没有解决的两个问题是， 如何定义插值函数 \\sigma \\sigma ？ 如何找到合适的 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ？ 我们首先讨论第一个问题。一般地，多分类问题中，如果各个分类彼此并非相斥，且不一定要将结果分入任一类的话，我们可以用 Sigmoid 函数来定义 \\sigma \\sigma ，亦即 \\begin{align} \\sigma(\\mathbf{x}) = \\frac{1}{ 1 + e^{-\\mathbf{x}}}. \\end{align} 它同时满足 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 ，且是一个单调函数。以下代码向我们展示了这种函数的特性： Python 1 2 3 4 5 6 7 8 9 10 11 12 import numpy as np import matplotlib.pyplot as plt def test_sigmoid (): x = np . linspace ( - 5 , 5 , 100 ) y = 1 / ( 1 + np . exp ( - x ) ) plt . plot ( x , y ) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () if __name__ == '__main__' : test_sigmoid () Output 使用sigmoid函数的一大好处是，它的导数求解非常简单，很适合用来做神经网络这样一个复杂模型的激活函数。注意虽然 \\sigma(\\mathbf{x}) \\sigma(\\mathbf{x}) 和 \\mathbf{x} \\mathbf{x} 都是向量，这意味着导数是Jacobian矩阵，但由于 \\sigma \\sigma 是一个对 \\mathbf{x} \\mathbf{x} 各元素独立的解析函数，这个Jacobian矩阵实际上是一个对角矩阵，对角线上第j个元素的值为 \\begin{align} \\left. \\frac{ \\partial \\sigma(x) }{ \\partial x } \\right|_{x=x_j} = \\left. - e^{-x} \\left( - \\frac{1}{\\left( 1+e^{-x} \\right)^2} \\right) \\right|_{x=x_j} = - \\sigma(x_j) ( 1 - \\sigma(x_j) ). \\end{align} 可见，该函数的导数和计算函数本身的复杂度相若，可以做到快速求导。 求解问题 ¶ 接下来，我们需要解决第二个问题，亦即找到 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} 。这一问题通常可以写成反问题的形式： \\begin{align} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} \\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}^{(k)},~ \\sigma ( \\mathbf{W} \\mathbf{x}^{(k)} + \\mathbf{b} ) \\right). \\end{align} 最简单的情况下，我们可以把 损失函数(loss function) 定义为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{align} 我们称 (8) (8) 为 逻辑斯蒂回归(logistic regression) 。有趣的是，虽然这个术语叫“回归”，但它解的其实是个分类问题。但是，既然这是一个分类问题，我们可以不使用这个损失函数，而是从概率论的角度看待这个问题。由此，我们引出一个新的损失函数：“交叉熵”。 交叉熵 ¶ 我们视sigmoid函数输出的值为一个概率，表示分类器对预测结果的确信程度，记 \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} ，则 \\begin{equation} \\begin{aligned} \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}), \\\\ \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) &= 1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}). \\end{aligned} \\end{equation} 注意这里的概率向量的含义是，其中第i个元素表明第i个超平面分类结果的 确信程度 。 然而，这个概率只是分类器对分类结果的确信程度，却并非是分类准确度的概率，实际上，分类 准确度 的概率，应当表述为 \\begin{equation} \\begin{aligned} \\mathbf{p}(\\mathbf{y}|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta})^{1-\\mathbf{y}}\\\\ &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\left(1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}) \\right)^{1-\\mathbf{y}}. \\end{aligned} \\end{equation} 注意 这里 \\mathbf{x}^{\\mathbf{y}} \\mathbf{x}^{\\mathbf{y}} 表示的是对每个元素一一求取指数，即函数第i个元素的返回值应当为 {x_i}^{y_i} {x_i}^{y_i} 。 我们使用真实值 \\mathbf{y} \\mathbf{y} 作为指数给概率向量加权。当 \\mathbf{y}=1 \\mathbf{y}=1 时，乘积项的第二个因子消去，该函数退化为以预测值为1的可信度 \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) ；反之则第一个因子消去，退化为以预测值为0的可信度 \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) 。这就是最大似然估计方法。至此，我们可以写出似然估计函数 \\begin{align} L(\\boldsymbol{\\Theta}) = \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}). \\end{align} 对似然估计函数取对数，则有 \\begin{equation} \\begin{aligned} l(\\boldsymbol{\\Theta}) &= \\sum_{k=1}^N \\log \\left( \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}) \\right) \\\\ &= \\sum_{k=1}^N \\mathbf{y}^{(k)} \\cdot \\log\\left(\\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right) + \\left(1 - \\mathbf{y}^{(k)} \\right) \\cdot \\log\\left(1 - \\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right). \\end{aligned} \\end{equation} 我们最终的目的是要最大化似然函数，亦即 \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) ，这等价于最小化 -l(\\boldsymbol{\\Theta}) -l(\\boldsymbol{\\Theta}) 。对比 (8) (8) 和 (9) (9) ，于是我们可以定义交叉熵为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\mathrm{mean}\\left[ \\mathbf{y} \\cdot \\log\\left( \\tilde{\\mathbf{y}} \\right) + \\left(1 - \\mathbf{y} \\right) \\cdot \\log\\left(1 - \\tilde{\\mathbf{y}} \\right) \\right]. \\end{align} 注意这里我们使用 \\mathrm{mean}\\left[ \\cdot \\right] \\mathrm{mean}\\left[ \\cdot \\right] 表示求取一个向量所有元素的平均值。实际上，Tensorflow允许我们定义损失函数的输出为一个和输出向量维度相同的向量，Tensorflow自带的交叉熵也是这样定义的。实际应用时，Tensorflow会自动在向量维度上求均值，并压缩成上述 (14) (14) 的形式。 若我们记 \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) ，代入sigmoid函数，为了确保该损失函数的稳定性，我们可以将 (14) (14) 整理为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{x}} \\right) = \\mathrm{mean}\\left[ \\max(\\tilde{\\mathbf{x}}, \\mathbf{0}) - \\tilde{\\mathbf{x}} \\cdot \\mathbf{y} + \\log\\left(1 + e^{-|\\tilde{\\mathbf{x}}|} \\right) \\right]. \\end{align} 提示 这里交叉熵整理的推导过程参见 Tensorflow-API官方文档 。 实际情况下，我们使用 (15) (15) 来求取sigmoid函数激活下的交叉熵。 解线性多分类问题 ¶ 代码规范 ¶ 建立一个具有较强可读性的Tensorflow工程需要我们活用python的模块化设计。我们通常推荐以下的结构 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 撰写各个模块时，建议使用类封装各组功能相同的函数。具有良好使用习惯的coder应当注意给各个面向用户的类、函数撰写（哪怕简短的）说明文字，在一些较长的函数、方法的定义中，适当注释各部分的功能，以便读者能正确理解代码意义。 另外，在对象命名上，python有如下必须遵守或不成文的规定，和C/C++用户熟悉的蛇形命名法不同，它大致包括 类与函数多用驼峰命名法，变量可以采用驼峰或蛇形命名法。 驼峰命名法指的是用大小写区分每个单词块，例如 alphaBetaFunction () ； 蛇形命名法指的是用下划线区分每个单词块，例如 alpha_beta_function = 10 ； 宏变量使用全字大写+蛇形命名法 函数/方法，还有模块均是首字母小写，但类的首字母大写。 用单下划线 _ 表示临时存储器，或省略参数，例如一个函数 func () 有两个返回值时，可以用 _ , b = func () 表示我们只需要第二个返回值；单下划线还可以与星号连用省略多个返回值； 以单下划线开头的方法，表示模块级的私有方法，在模块以外使用 import 导入类时，不会导入这些方法，例如 def _alphaBeta ( self ): ； 以单下划线结尾的对象，用来和python的关键字区分，例如 func ( x , class_ ) ; 以双下划线开头的方法，如果不以双下划线结尾，则表示类级的私有方法，只有类内部的方法能调用这些方法，在类外部、包括继承的子类里都原则上不能调用（但其实也有办法调用），例如 def _alphaBeta ( self ): ； 以双下划线同时开头和结尾的方法，一般是用来 重写 (override) 特殊功能，例如 def __getattribute__ (): 将重写获得类属性的方法。 Tensorflow的数据概念 ¶ 在Tensorflow中，我们把变量都称为“ 张量 (Tensor) ”。这是因为我们有零维的标量，一维的向量，二维的矩阵，更高维的我们都称为张量。作为一个更大的概念，张量当然也可以用来包括标量、向量和矩阵了。在Tensorflow中，有的张量是 可以训练 (trainable) 的，有的则不是。比如一个张量的形状（指各维大小），当然可以是一个 < tf . Tensor 'Shape:0' shape = ( 1 ,) dtype = int32 > 类型的张量，但它不是变量，当然就不可训练。我们也可以人为控制某些张量可以训练或不可以训练，但本节、乃至本章所介绍的凡是我们接触到的张量，都是可以训练的。 特别地，对于神经网络而言，在网络内计算（或者说流动、传播）的一个n维数据，通常按照以下形式组织： tensor [ batch , dim1 , dim2 , ... , dimn , channel ] 其中，第一个维度 batch 一定存在，它表示的是单个batch中的某一个样本。如果一个batch只有一个样本，那么 batch 只能取0。 从 dim1 到 dimn 指的是实际的n维数据的各个维度； channel 指的是数据的通道，例如，一个二维RGB图像，每种颜色代表一个通道，因此有三个通道。 channel 通常用在卷积网络里，我们经常需要在深度卷积网络里不断增大通道数的同时，缩小数据尺寸。 在某些特殊情况下， channel 维度可以不存在，例如我们使用的是全连接层而不是卷积网络， tf.keras.layer.Flatten 可以用来将一个有通道的张量压缩成一个没有通道的一维向量（但是注意 batch 维度仍然存在，不会被压缩）。 因此，我们知道一个n维的数据，在神经网络中通常被描述为一个n+2维的矩阵，而一个一维向量，在卷积网络里是三维的： vector [ batch , length , channel ] 但是在全连接网络里，是二维的： vector [ batch , channel ] 在本节，乃至本章里，我们还不讨论卷积网络，因此我们都是使用二维张量（一维向量组）作为我们的数据。 数据生成 ¶ 在本项目里，我们不需要扩展Tensorflow。但是，我们需要以随机生成数据代替数据集。因此，首先，通过以下代码定义数据生成器 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class TestDataSet : ''' A generator of the data set for testing the linear model. ''' def __init__ ( self , scale_x , A , c ): ''' Initialize the data generator. scale_x: the scale of input vector. A, c: the linear transformation. ''' self . s_x = 2 * scale_x self . A = A self . c = c self . len_x = A . shape [ 0 ] self . config () def config ( self , train = True , batch = 100 , noise = 0.1 ): ''' Configuration train: a flag for controlling the iterator mode. batch: the number of samples in a batch noise: std. of the error added to the y. ''' self . train = bool ( train ) self . batch = batch self . noise = noise def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) y = np . greater ( y , 0.0 ) . astype ( np . float32 ) return x , y def next_test ( self ): ''' Get the next test batch x. ''' return self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) def __iter__ ( self ): while True : samp = self . __next__ () yield samp def __next__ ( self ): if self . train : return self . next_train () else : return self . next_test () 该生成器输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。这种数据集写法我们在后面还会用到， model . fit 允许我们不是馈入样本（或样本批次），而是馈入一个 生成器(generator) 。因此我们重写了 __iter__ 方法，并使其通过 yield 返回一个生成器。这样我们定义的数据集类就可以被Keras的训练函数 model . fit 使用。接下来，调用如下测试代码： dparser.py 1 2 3 4 5 6 7 8 9 10 def test_dataset (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) c = np . random . uniform ( 1 , 3 , [ 1 , 6 ]) dataSet = TestDataSet ( 10 , A , c ) dIter = iter ( dataSet ) for i in range ( 10 ): x , y = next ( dIter ) print ( np . sum ( y , axis = 0 ) / 100 ) test_dataset () Output [ 0.47 0.57 0.58 0.56 0.5 0.38 ] [ 0.6 0.61 0.47 0.48 0.38 0.52 ] [ 0.5 0.61 0.49 0.42 0.45 0.53 ] [ 0.59 0.52 0.44 0.44 0.49 0.51 ] [ 0.54 0.59 0.48 0.5 0.51 0.47 ] [ 0.49 0.57 0.56 0.49 0.53 0.4 ] [ 0.5 0.61 0.51 0.54 0.51 0.52 ] [ 0.5 0.51 0.61 0.5 0.44 0.5 ] [ 0.44 0.46 0.53 0.45 0.56 0.52 ] [ 0.52 0.46 0.51 0.52 0.49 0.44 ] 我们随机生成了 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的数据，每组数据100个，并且测试了10组。输出结果是各组测试中， \\mathbf{y} \\mathbf{y} 在对应维度上分类为1的概率估计。结果基本都在0.5左右，说明我们的这种数据生成模式产生的点能均匀分布在各个超平面两侧，适合进行后续测试。 定义线性顺序模型 ¶ 顺序(sequential) 模型是一个单输入单输出模型，网络结构较为简单，也不存在跨层短接（残差连接）。在大多数情况下，已经上手的Tensorflow用户不使用这个模型，故而作为我们入门的第一个project，我们姑且用之，但我们将不再使用顺序模型来实现后续的project。一个顺序模型大致可以描述为下图的模式： graph LR st(输<br/>入) --> l1[层<br/>1] l1 --> l2[层<br/>2] l2 --> l3[层<br/>3] l3 --> ldots[层<br/>...] ldots --> ed(输<br/>出) classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,ed styStart 由于我们完成的是一个线性分类器，故而我们使用单层的序列模型即可。 接下来，我们来定义一个类， class LinClsHandle : 。定义一个类的时候，我们通常需要定义的内容包括 在初始化方法 __init__ 里定义传入网络的固定参数，例如学习速率，存取路径等； 在方法 construct 里定义网络的构造和使用的优化器； 在方法 train 里定义训练网络的过程，主要需要调用 model . fit 。如果我们在数据集的定义非常完善，则这一环节不需要花费太多的功夫； 在方法 test 里定义测试网络的过程，主要需要调用 model . evaluate 。如果有必要，可以通过 model . predict 返回测试结果。 初始化方法 ¶ 首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe 由于目前我们的project还非常简单，这里只需要有学习速率( learning_rate )，轮次数( epoch )和每轮迭代次数( steppe )即可。 构造方法 ¶ 接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction self . model = tf . keras . Sequential () self . dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , input_shape = ( INPUT_SHAPE ,), kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = tf . nn . sigmoid ) self . model . add ( self . dense1 ) # Set optimizer self . model . compile ( optimizer = tf . train . AdamOptimizer ( self . lr ), loss = tf . keras . losses . BinaryCrossentropy (), metrics = [ self . accuracy , tf . keras . metrics . BinaryAccuracy ()] ) @staticmethod def accuracy ( y_true , y_pred ): return tf . keras . backend . mean ( tf . keras . backend . equal ( y_true , tf . keras . backend . round ( y_pred ))) 须知 这里 LABEL_SHAPE 和 INPUT_SHAPE 为两个宏变量，分别为输出和输入的向量维度。 我们使用 Dense 定义全连接层，它的用法请参照 这里 。由于我们已经知道 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 可能的取值范围，这里我们重定义了 \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的初始化方式。 信息: Dense API tf . keras . layers . Dense ( shape , ** kwargs ) 指全连接层，其输入一组已知形状的向量，输出一组形状为 shape 的向量。可用的API如下： shape : 正整数，输出空间维度。 activation : 激活函数。 若不指定，则不使用激活函数 (即，线性激活: a(\\mathbf{y}) = \\mathbf{y} a(\\mathbf{y}) = \\mathbf{y} )。该函数可以定义为任何元素级操作的Tensorflow函数。 use_bias : 布尔值，该层是否使用偏置向量。 True 则网络定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} ， False 则定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} \\mathbf{y} = \\mathbf{W}\\mathbf{x} 。 kernel_initializer : kernel 权值矩阵的初始化器，自定义的初始化器需要使用Keras后端API编写。 bias_initializer : 偏置向量的初始化器，同上。 kernel_regularizer : 运用到 kernel 权值矩阵的正则化函数，自定义的正则化函数需要使用Keras后端API编写。 bias_regularizer : 运用到偏置向的的正则化函数，同上。 activity_regularizer : 运用到层的输出的正则化函数，同上。 kernel_constraint : 运用到 kernel 权值矩阵的约束函数，只能使用Keras备选的几种方案，不能自定义。 bias_constraint : 运用到偏置向量的约束函数，同上。 信息: model.compile API model . compile ( optimizer , ** kwargs ) 在这里指的是顺序模型的编译函数，其可用的API如下： optimizer : 优化器，可以使用Tensorflow内置的优化器。 loss : 损失函数，也是目标函数。顺序模型只有一个输出，因此只能传入一个损失函数。可以使用形式为 func ( y_true , y_pred ) 的Tensorflow函数。 metrics : 测度函数，一般是一组函数，如果是一个函数则定义为 [ func ] 即可。自定义的测度函数目前还需要使用Keras后端API编写。 loss_weights : 损失的权重，顺序模型只有一个损失函数，因此只有一个权重，但要使用一维列表 [ value ] 定义。可以使用张量来控制可变权重。 sample_weight_mode : 按时间步采样权重，默认不提供。相比上面的损失权重，该选项会随着迭代次数使用不同的权重，因此输入的是二维列表。 weighted_metrics : 测度的权重，和损失权重类似，用来加给不同的测度函数。由于我们可以使用不只一个测度函数，这里的权重是个一维列表。 target_tensors : 默认情况下，Keras 将为模型的目标创建一个占位符，在训练过程中将使用目标数据。相反，如果你想使用自己的目标张量（反过来说，Keras在训练期间不会载入这些目标张量的外部 Numpy数据），您可以通过 target_tensors 参数指定它们。对于单输出的顺序模型，它应该是单个张量。 ** kwargs : 其他参量，会传递给 tf . Session . run 。 另外，注意我们这里构造网络的时候有如下技巧： Tensorflow在导入Keras模式以后，已经不再使用 (15) (15) 的形式定义 sigmoid交叉熵 ，而是采取更通用的定义 (14) (14) ； 我们使用Tensorflow重新封装过的类， 二分类交叉熵 ( BinaryCrossentropy ) 来作为Keras模型的损失函数 self.loss ，该函数与 多分类交叉熵 ( CategoricalCrossentropy ) 不同，乃是对两组对比张量的每个元素分别计算交叉熵，再求取均值，正符合本应用的需求； 我们通过静态方法，调用Keras的后端API，自己定义了预测准确度的测度函数 self.accuracy ，同时也使用另一个来自Tensorflow封装好的测度类 二分类准确度 ( BinaryAccuracy ) ，这是为了比照两个准确度的区别，以便我们更好理解该测度类； 我们将网络层的关键字 self.dense1 保留在了实例中，这是为了确保接下来我们能通过实例抽取该层的参数。 需要注意的是，由于 二分类交叉熵 ， 二分类准确度 和 多分类交叉熵 等都是类（从它们的定义都是大写字母开头也可以看出来），因此我们需要在使用的时候后面加上括号以实例化；由于这些类都定义了 __call__ 方法，我们可以像使用函数一样使用它们的实例。 训练和测试方法 ¶ 最后定义的式训练和测试方法。由于我们目前的project还比较简单，关于这两部分都直接调用现有的API即可。使用的API在之前已经说明。 model.fit 在没有额外设置的情况下，默认会返回一个 History回调器 ； model.evaluate 返回的是测试样本给出的损失函数和准确值测度。 model.predict 返回的是测试样本给出的网络输出。详情请参照 顺序模型API 。 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def train ( self , dataSet ): ''' Use a data set to train the network. ''' return self . model . fit ( dataSet , epochs = self . epoch , steps_per_epoch = self . steppe ) def test ( self , data , labels ): ''' Use (data, label) pairs to test the results. ''' loss , accu = self . model . evaluate ( data , labels ) print ( 'Evaluated loss =' , loss ) print ( 'Evaluated accuracy =' , accu ) return self . model . predict ( data ) 信息: model.fit API model . fit ( dataSet , ** kwargs ) 是训练函数，注意这个函数虽然支持输入一组 x,~y x,~y 用来代替 dataSet ，我们还是建议在任何情况下都用dataSet馈送数据，以免内存中数据集占用过多。 dataSet : 数据集，其本身应当是一个 tf.data.Dataset 类型的类，或者是一个能不断迭代产生新数据的生成器。数据的 batch 大小由 dataSet 本身决定。 epochs : 整数，终止训练时经历的世代(轮次)数，通常一个epoch表示遍历整个数据集一回。 verbose : 0, 1或2。日志显示模式。 0=安静模式, 1=进度条, 2=每轮一行。默认是1。 callbacks : 回调器，它是 tf.keras.callbacks 模块下的类，用来在训练中进行记录保存和数据检查点更新。默认是 tf.keras.callbacks.History 。 validation_split : 在 0 和 1 之间浮动。用作验证集的训练数据的比例。模型将分出一部分不会被训练的验证数据，并将在每一轮结束时评估这些验证数据的误差和任何其他模型指标。验证数据是混洗之前 x 和 y 数据的最后一部分样本中。 validation_data : 元组 (x_val，y_val) 或元组 (x_val，y_val，val_sample_weights) ，用来评估损失，以及在每轮结束时的任何模型度量指标。模型将不会在这个数据上进行训练。这个参数会覆盖 validation_split 。 shuffle : 布尔值（是否在每轮迭代之前混洗数据）。当 steps_per_epoch 非 None 时，这个参数无效。 class_weight : 可选的字典，用来映射类索引（整数）到权重（浮点）值，用于加权损失函数（仅在训练期间）。这可能有助于告诉模型 「更多关注」来自代表性不足的类的样本。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 initial_epoch : 开始训练的轮次（有助于恢复之前的训练）。 steps_per_epoch : 在声明一个轮次完成并开始下一个轮次之前的总步数（样品批次）。使用TensorFlow数据张量等输入张量进行训练时，默认值 None 等于数据集中样本的数量除以 batch 的大小，如果无法确定，则为1。 validation_steps : 只有在指定了 steps_per_epoch 时才有用。停止前要验证的总步数（批次样本）。 该函数会返回 callbacks 定义的实例。 信息 model.evaluate API model . evaluate ( x , y , ** kwargs ) 是测试函数，需要传入 label 即 y 来验证性能。 x , y : Numpy 数组，分别是输入和输出的真实参照值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数会返回损失函数和测度（列表）。 信息 model.predict API model . predict ( x , ** kwargs ) 是预测函数，用在只知道输入 x 的场合。 x : Numpy 数组，输入值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数返回预测结果。 调试 ¶ 首先，训练网络。我们随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的线性变换，并且设置好数据集，给定噪声扰动为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 。设定20个epoch，每个epoch迭代500次，每次馈入32个样本构成的batch，然后开始训练： lin-cls.py 1 2 3 4 5 6 7 8 9 # Initialization A = np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataSet ( 10 , A , c ) dataSet . config ( batch = 32 , noise = 0.1 ) # Construct the model and train it. h = LinClsHandle ( learning_rate = 0.01 , epoch = 20 , steppe = 500 ) h . construct () record = h . train ( iter ( dataSet )) Output Epoch 1 /20 500 /500 [==============================] - 1s 3ms/step - loss: 6 .3005 - accuracy: 0 .5884 - binary_accuracy: 0 .5884 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 5 .4671 - accuracy: 0 .6407 - binary_accuracy: 0 .6407 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4 .5711 - accuracy: 0 .6957 - binary_accuracy: 0 .6957 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 3 .6789 - accuracy: 0 .7519 - binary_accuracy: 0 .7519 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .7101 - accuracy: 0 .8127 - binary_accuracy: 0 .8127 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .0059 - accuracy: 0 .8627 - binary_accuracy: 0 .8627 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .6403 - accuracy: 0 .8894 - binary_accuracy: 0 .8894 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .3663 - accuracy: 0 .9066 - binary_accuracy: 0 .9066 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .0466 - accuracy: 0 .9274 - binary_accuracy: 0 .9274 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .8377 - accuracy: 0 .9418 - binary_accuracy: 0 .9418 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .6465 - accuracy: 0 .9546 - binary_accuracy: 0 .9546 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .4492 - accuracy: 0 .9667 - binary_accuracy: 0 .9667 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .2795 - accuracy: 0 .9779 - binary_accuracy: 0 .9779 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .1624 - accuracy: 0 .9861 - binary_accuracy: 0 .9861 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0680 - accuracy: 0 .9926 - binary_accuracy: 0 .9926 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0128 - accuracy: 0 .9971 - binary_accuracy: 0 .9971 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0052 - accuracy: 0 .9986 - binary_accuracy: 0 .9986 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0049 - accuracy: 0 .9985 - binary_accuracy: 0 .9985 接下来，从训练返回的 History 类型的回调器中抽取对loss和accuracy的记录。 lin-cls.py 1 2 3 4 5 # Show records plt . semilogy ( record . epoch , record . history [ 'loss' ]), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Cross entropy' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () plt . plot ( record . epoch , record . history [ 'accuracy' ], label = 'self defined' ), plt . plot ( record . epoch , record . history [ 'binary_accuracy' ], label = 'from tensorflow' ), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Accuracy' ), plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 结果显示，我们自定义的准确度测度和Tensorflow内置的 二分类准确度 完全相同，这说明其本身的定义就是求取所有元素阈值化后，各自分类结果是否正确的平均值。这个实验也让我们对自定义测度函数有了一定的认识。 重新设定数据集的产生方式，变为每个batch含10个样本。使用这组重新随机生成的数据测试网络输出， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 # Generate a group of testing samples: dataSet . config ( batch = 10 ) x , y = next ( dataSet ) # Check the testing results yp = h . test ( x , y ) _ , ( ax1 , ax2 ) = plt . subplots ( 1 , 2 ) ax1 . imshow ( y , interpolation = 'nearest' , aspect = 'auto' ) ax1 . set_title ( 'True class' ) ax2 . imshow ( yp , interpolation = 'nearest' , aspect = 'auto' ) ax2 . set_title ( 'Predicted class' ) plt . gcf () . set_size_inches ( 10 , 5 ), plt . show () Output Evaluated loss ( losses.BinaryCrossentropy ) = 0 .0023145806044340134 Evaluated accuracy ( self defined ) = 1 .0 Evaluated accuracy ( metrics.BinaryAccuracy ) = 1 .0 注意我们未对测量的结果阈值化，因此显示出来的测量结果和理想值略有差别，但从图可知，阈值化后则测量结果全部准确。 通过抽取 h.dense1 的参数，我们可以对比 \\mathbf{A} \\mathbf{A} 和 \\mathbf{W} \\mathbf{W} ，以及 \\mathbf{c} \\mathbf{c} 和 \\mathbf{b} \\mathbf{b} ， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 # Check the regressed values W , b = h . dense1 . get_weights () plt . imshow ( A , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'A' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . imshow ( W , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'W' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . plot ( c . T , label = 'c' ) plt . plot ( b . T , label = 'b' ) plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 可以发现，虽然我们训练的分类器十分有效，但其权值和预期的 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 并不完全相同。这是由于sigmoid函数激活的特性，使得当预测值偏向最小或最大的情况下， |\\sigma(x)| \\rightarrow 1 |\\sigma(x)| \\rightarrow 1 ，根据 (7) (7) ，可知其梯度 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 ，因此那些分类结果已经比较确信的样本，其梯度消失，对训练网络的影响忽略不计（这是合理的，因为我们不希望极端样本干扰结果，更希望对分类结果不确切的样本进行训练）。故而，我们虽然可以求解出这个分类问题，但求解到的 \\mathbf{W} \\mathbf{W} , \\mathbf{b} \\mathbf{b} 不会回归到 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 上。关于回归问题，我们会在下一节进一步讨论。","text_tokens":["早期","3663","learning","0.44","测试方法","「","地","载入","model","代码","dataset","defined","0680","还会","vector","想","块","解析","以单","get","to","开始","参数","e","7519","轮次","各组","还有","调整","哪","节","激活","成文","constant","&&","noise","确定","却","并","反过来","其中","影响","用","0.38","略有","范围","规定","13","求取","网络层","evaluate","通过","regression","成器","较强","文件","和","交点","看待","面向用户","jacobian","过程","+","其","符","三个","log","姑且","大写字母","默认","维度","in","用法","自带","反之","只有","工程","4492","模型","平均值","上","初始","测试代码","形状","尽如","除以","按","规范","人意","非常","mathbf","彼此","处理","fixed","这是","好","预处理","binarycrossentropy","描述","─","自定","plt","或者说","最后","每个","负值","0.01","tf","mode","；","method","rvert","自动","train","结果显示","34","允许","概率论","显示","仍然","接下","元素","单层","向","step","value","构成","放在","有","上面","linear","分成","6465","right","入","extension","消","。","it","声明","一层","组","化","于","subplots","bmatrix","这","可读性","故而","本节","testdataset","每组","一个","出来","摘要","graph","8377","使用","call","#","np","加","简单","到","满足","sample","那些","测试","不足","l3","方式","0.0","常数","equal","batch","一般","不成文","最大化","the","不成","project","alphabetafunction","各","steps","部分","固定","run","项","相斥","评估","¶","生成","乃至","速率","true","parser","我们","多个","无效","宏","predict","外围","世代","省略","类级","数据","大多数","超平面","导入","ij","或者","另","饮水","零维","29","调用","30","{","br","停止","同","normal","其实","覆盖","54","exp","network","9418","个","的话","给定","测度","叫","36","完成","stystart","方案","使","生成器","路径","return","还","性能","两侧","0.59","蛇形","张量","知道","布尔值",":","cross","双","饮水思源","25","控制","熟悉","以免","leqslant","可用","命名","说明","维","撰写","0.42","正","已知","对角线","matmul","较为简单","级","由此可知","steppe","nearest","原则","binaryaccuracy","如果","name","总是","）","override","}","面向","<","返回值","给","虽然","interpolation","三维","权值","则","那么","\\","10","能","c","端","不同","读者","文件夹","sigmoid","样品","group","程度","module","开","initializers","38","后","initializer","有效","a","5","pairs","送入","0128","linclshandle","48","层","alpha","向量","模式","fae6a9","获得","设置","出原","vdots","传入","ax2","17","静态","4671","前","accuracy","x","习惯","39","上述","形式","不以","差别","相比","theta","抽取","调试","相关","很","config","dtype","beta","layers","6403","single","一步","15","imshow","某些","0.46","verbose","有助于","线性关系","组拆","epoch","lr","改写","4","也","equation","列表","求导","恢复","以双","它们","tensors","法指","53","相反","完全相同","44",".","mathrm","dim2","rightarrow","了","写成","check","一个二维","表述","取值","考虑","任意","一侧","扩展","后续","pred","while","tensorflow","建议","助于","record","37","大化","if","as","做到","keras","ax1","classdef","可信度","至此","categoricalcrossentropy","从","后端","data","保存","约束","实数","首字母","标准","每轮","rgb","表示","阈值","值","0466","（","等于","mathbb","t","比较","fill","安静","records","首字","0.57","才","9986","构建","重","数量","activation","遵守","下划线","init","rate","外部","lvert","可知","val","min","需要","认识","并且","要","以后","左右","包括","迭代","无关","采取","boldsymbol","起来","对象","较长","只要","概率","0.47","for","9779","多数","忽略","神经网","如下","greater","有限","第二","有用","分类器","短接","单独","第一","两个","逻辑","推荐",")","3ms","且","主","默认值","馈送","generator","深度","消失","例如","j","mean","操作","loss","int32","infty","下","最早","接下来","c++","axis","0.51","进一步","解","label","error","称","]","配置","46","内容","2795","nn",",","0023145806044340134","ba9132","实验","时","varepsilon","对应","每","卷积","压缩成","fit","跨层","提示","1624","介绍","次数","浮点","馈入","9985","0.48","内存","用单","复杂","numpy","请","history","验证","有关","只能","读取","generate","scale","binary","记录","constraint","round","处理器","互不","一定","后来","插值","小写","该层","这些","另外","metrics","set","数","准确","l1","检查点","大多","线性","为","最","缩成","sim","指数","next","5711","可以","6","channel","预测值","交叉","凡是","理解","十分","灵活","大小写","以","非线性","training","相同","dimn","“","设计","function","大致","inches","12","float32","既然","testing","特征","鉴往知来","引用","然后","确保","callbacks","全部","组织","然而","最终","transformation","走上","损失","批次","开头","目的","没有","sigma","是因为","有助","9667","发展","首先","tools","gcf","0.49","步","提供","8627","正确理解","类型","指标","getattribute","1e","18","但类","arg","经常","35","31","找到","i","之后","关键字","自己","├","作用","复杂度","500","对比","比照","调整结构","49","第","of","一节","”","决定","创建","labels","私有","期间","test","于是","时间","通道","frac","还是","确切","原则上","反过","show","9981","sum","输","st","stroke","等","进行","11","传播","关键","做","coder","是","全字","bool","尽管","一组","class","支持","有趣","是否","向用","子","写字","tool","太多","步数","对于","误差","6407","平面","星号","全","len","由","一大","网络","cls","一轮","47","特殊","多","randomnormal","weights","不断","51","接触","用户","文字","第一个","如何","0","n","backend","数据测试","100","与","您","角度","下图","k","会","忽略不计","...","参照","即","成","指各维","semilogy","导数","processing","tensor","以下","占用","相若","重写","大小","发现","符合","use","视为","0.4","显式","因此","视","整个","问题","所有","random","加权","-","adamoptimizer","一维","为了","任何","cdots","epochs","将","shuffle","关于","两层","不计","compile","集","结构","堆叠","ldots","特性","几种","print","图像","就是","单词","aspect","子类","混洗","测试函数","稳定性","10.0","当然","colorbar","27","区别","而言","weight","单调","这里","包含","以及","先河","你","使得","用来","标准化","注意","过","└","2ms","推导","losses","regularizer","看作","b","终止","次","权重","红线","区分","无法","logistic","乘积","任","非","上手","乃是","必须","含义","但","gca","y","度量","静态方法","去","应该","按照","9861","uniform","第二个","diter","学习","legend","8","bias","类","kernel","可信","快速","单个","适当","kwargs","0.56","截距","实际上","多用","结束","这种","合理","end","线性变换","0.52","独立","def","推断","等价","属性","矩阵","│","evaluated","dparser","写出","函数","results","尺寸","alphabeta","变为","斯蒂","一","ylabel","一个多","流动","8127","来自","optimizer","准确度","简短","只","5884","(","其他","6957","同时","花费","只是","集类","之前","作为","比如","python","前要","本身","8894","须知","cdot","即可","本章","0.61","7","均","session","一回","意味","时候","层叠","连接","：","就","认为","main","类似","结果","回调","检查","3","由此","controlling","遍历","讨论","日志","含","initialization","正值","颜色","不再","存在","最小","std","6789","9","器","映射","linspace","指定","samples","每种","之旅","高维","两组","因为","偏向","让","32","入门","存储","索引","又","api","通用","来","测量","d","matplotlib","33","输入","术语","14","这样","合适","由于","configuration","孱弱","9274","像","类时","代表","直线","行","0049","意义","给出","已经","概念","神经","过来","一样","0.6","选项","解决","各自","中","@","一类","dense","适合","意味着","begin","环节","entropy","iterator","再","继承","亦","l2","shape","字典","跟","19","哪怕","0055","pass","进度","希望","场合","额外","组合","分离","分别","layer","22","where","括号","construction","详情请","1s","活用","二个","压缩","随机","把","加上","一条","42","该","理器","none","出","事实","52","limits","取","指","噪声","图示","py","回归","staticmethod","神经元","sequential","变换","这一","9546","26","建立","、","length","align","两","代替","干扰","信息","中将","实际","lin","initial","性关系","可见","返回","用作","16","9971","target","操作符","大写","=","较为","根据","不会","from","文档","？","临时","可能","都","0.45","存取","布尔","应用","adam","均匀分布","/","存储器","p","假设","50","we","编译","更大","变量","不","后面","定性","'","类中","41","偏置","确信","accu","stddev","被","化后","一部","未","新","改进","可读","最大","post","梯度","正确","func","tilde","缩小","备选","更好"," ","else","模块","二","astype","下划","拟合","以便","设定","43","通常","可微","*","平均","iter","人为","add","目标","s","codes","以外","陆续","件夹","来说","our","而是","简简单单","告诉","分析","封装","神经网络","0.54","1","mapsto","分类","除了","初始化","yield","构造","似然","注释","对","空间","产生","每次","目前","h","模块化","可变","w","要求","随着","序列","设定值","占位","不是","2","本","式","记","进度条","点","运用","perceptron","基本","false","许多","顺序","经历","传递","range","and","3005","项目","浮动","轴","定义","parameters","21","分出","max","未知","一些","预期","可选","9066","称为","在","图","对角","内部","更新","数据分布","采样","引出","单","特别","添加","一一","因子","推断出","构造方法","现有","扰动","非常简单","自定义","数目","并非","办法","下来","正则","重新","yp","24","良好","的","auto","反过来说","flatten","0.58","具有","而","分入","aligned","当","输出","比较简单","需求","trainable","理想","construct","单单","必要","感知","这组","极端","指全","但是","mathcal","总","这个","保留","dim1","效果","added","samp","predicted","关系","define","per","内置","split","表明","store","内","网络结构","regressed","感知机","蓝线","0059","之","0.5","残差","[","事实上","45","训练","extending","应当","r","里","足够","~","用到","&","整数","title","真实","参见","参量","计算","完善","技巧","结尾","validation","40","__","过多","，","驼峰","信度","」","number","同一","样本","l","理论","flag","退化","不能","详情","所","一部分","字母","|","好处","dp","增大","partial","分布","查点","output","对数","最小化","hat","代入","连用","某","思源","估计","时才","代表性","或","二维","它","主要","方法","weighted","28","analyzing","优化","size","更","0.1","7101","不可","看","法","展示","线性组合","ed","关注","_","plot","9926","正整数","一个点","划线","功能","initialize","熵","整理","20","直接","完全","均值","仅","均匀","若","各个","0.53","values","一行","器中","import","列","官方","实例","pyplot","比例","尽如人意","知机","轮","self","写法","求解","left","0052","用于","编写",";","预测","activity","23","元组","情况","功夫","采用","之间","xlabel","定义数据","上求","input","数组","实现","看成",">","集中","大量","标量","反","^","属于","稳定","dense1","过程中将"],"title":"线性分类","title_tokens":["线性","分类"]},{"location":"book-1-x/chapter-1/linear-classification/#_1","text":"摘要 本节介绍如何使用顺序模型(sequential model)来编写一个线性分类器，使用sigmoid函数激活，并验证其效果。","text_tokens":["介绍","编写","顺序","分类器","其","并","如何","分类","一个","(","sequential",")","验证","sigmoid","摘要","线性","model","本","使用","节","激活","函数","。","来","模型","，"," ","效果"],"title":"线性分类","title_tokens":["线性","分类"]},{"location":"book-1-x/chapter-1/linear-classification/#_2","text":"","text_tokens":[],"title":"理论","title_tokens":["理论"]},{"location":"book-1-x/chapter-1/linear-classification/#_3","text":"考虑我们有如下的二分类数据集 (\\mathbf{x},~y_i) \\in \\mathbb{D}_i (\\mathbf{x},~y_i) \\in \\mathbb{D}_i ，并且有一个未知的常数向量 \\mathbf{a}_i \\mathbf{a}_i 和未知的常数标量 c_i c_i ，使得： \\begin{equation} y_i = \\left\\{ \\begin{aligned} 0, && \\mathbf{a}_i^T \\mathbf{x} + c_i \\leqslant 0, \\\\ 1, && \\mathbf{a}_i^T \\mathbf{x} + c_i > 0. \\end{aligned} \\right. \\end{equation} 其中， \\mathbf{a} \\mathbf{a} 可以看成是某超平面的（未标准化的）法向量，那么 \\mathbf{a}^T \\mathbf{x} + c = 0 \\mathbf{a}^T \\mathbf{x} + c = 0 是该超平面的截距式定义，亦即该平面与 x_i x_i 轴的交点可以显式表述为 x_i^{(0)} = - \\frac{c}{a_i} x_i^{(0)} = - \\frac{c}{a_i} 。由此可知，式 (1) (1) 显式定义了一个点在超平面的哪一侧。特别地，若 \\mathbf{x} \\mathbf{x} 是一个二维向量，则该超平面退化为一维平面；若 \\mathbf{x} \\mathbf{x} 是一个标量，则该超平面退化为一条直线。 若我们定义 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} ，有 \\begin{equation} \\mathbf{y} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_n \\end{bmatrix}, ~~ \\mathbf{A} = \\begin{bmatrix} \\mathbf{a}^T_1 \\\\ \\mathbf{a}^T_2 \\\\ \\vdots \\\\ \\mathbf{a}^T_n \\end{bmatrix}, ~~ \\mathbf{c} = \\begin{bmatrix} c_1 \\\\ c_2 \\\\ \\vdots \\\\ c_n \\end{bmatrix}. \\end{equation} 则我们可以认为 \\begin{align} \\mathbf{y} = \\left\\{ \\begin{bmatrix}\\hat{y}_1 > 0 & \\hat{y}_2 > 0 & \\cdots & \\hat{y}_n > 0\\end{bmatrix}^T, ~ \\left| ~ \\hat{\\mathbf{y}} = \\mathbf{A} \\mathbf{x} + \\mathbf{c} + \\boldsymbol{\\varepsilon} \\right. \\right\\}, \\end{align} 其中 \\boldsymbol{\\varepsilon} \\boldsymbol{\\varepsilon} 是一个定义噪声的向量。 我们可以把向量 \\mathbf{y} \\mathbf{y} 的元素看成是互不相关的多个超平面对向量 \\mathbf{x} \\mathbf{x} 各自独立的分类结果。即 y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} y_i = \\{ \\hat{y}_i>0 ~ | ~ \\hat{y}_i = \\mathbf{a}_i^T \\mathbf{x} + c_i + \\varepsilon_i \\} 。由于每个超平面构成一个二分类，如果把每个二分类看作是向量是否属于这个类的测度，那么 \\mathbf{y} \\mathbf{y} 可以被看作是一个多分类的结果，尽管向量 \\mathbf{x} \\mathbf{x} 可能被同时分入多个类中。 假设我们的数据集 (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} (\\mathbf{x},~\\mathbf{y}) \\in \\mathbb{D} 符合 (3) (3) 定义的数据分布特征。我们的基本要求是，在我们不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} 的情况下，使用大量 (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} (\\mathbf{x}^{(k)},~\\mathbf{y}^{(k)}) \\in \\mathbb{D} 样本训练一个线性分类器，使得当我们给定任意一个新样本 \\mathbf{x} \\mathbf{x} 的时候，分类器能推断出其对应的 \\mathbf{y} \\mathbf{y} 来（亦即是否属于该分类）。 在这个问题里，我们虽然不知道 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，但我们知道由 (3) (3) 确定的线性关系，因此，我们可以随机生成一组 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ，构建线性模型： \\begin{align} \\tilde{\\mathbf{y}} = \\sigma ( \\mathbf{W} \\mathbf{x} + \\mathbf{b} ). \\end{align} 其中，可微函数 \\sigma \\sigma 是一个将实数空间 \\mathbb{R}^n \\mathbb{R}^n 映射到有限范围的实数空间 [0,~1]^n [0,~1]^n 内的函数。特别地， \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 。因此，可以将 \\sigma \\sigma 看作是二分类布尔函数的插值函数。理论上，只要我们找到 \\mathbf{W}=\\mathbf{A} \\mathbf{W}=\\mathbf{A} ， \\mathbf{b}=\\mathbf{c} \\mathbf{b}=\\mathbf{c} ，则该线性分类器可以直接拟合出原分布来。","text_tokens":["可能","结果","leqslant","互不","分入","3","由此","equation","boldsymbol","aligned","当","亦","二维","布尔","插值","w","要求","mathbf","假设","只要","地","2","frac","常数","线性","由此可知","类","式","为","符合","如果","不","这个","）",".","显式","法","}","类中","因此","如下","截距","有限","虽然","每个","基本","映射","了","问题","被","分类器","关系","一个二维","_","表述","-","则","一维","考虑","可以","任意","那么","一侧","未","新","\\","end","内","cdots","能","c","随机","独立","；","一个点","将","生成","推断","把",")","0.5","我们","多个","直接","轴","定义","一条","哪","集","tilde","[","函数","实数","是","标准","来","d","该","元素"," ","若","训练","未知","尽管","二","一组","数据","&&","r","超平面","拟合","特征","infty","下","里","由于","a","确定","一个多","是否","噪声","构成","（","其中","~","在","有","可微","mathbb","{","t","&","]","数据分布","向量","范围","(","right","平面",",","同时","出原","vdots","直线","给定","。","由","varepsilon","对应","交点","和","测度","，","sigma","使得","x","标准化","align","样本","left","特别","理论","+","bmatrix","其","退化","看作","情况","构建","推断出","1","0","b","分类","n","|","一个","相关","各自","性关系","in","与","分布","看成","知道",">","找到","可知","时候","大量","i","标量","k","使用","对","空间","hat","：","=","线性关系","^","属于","某","认为","即","并且","但","模型","y","的","到","begin","上"],"title":"问题描述","title_tokens":["问题","描述"]},{"location":"book-1-x/chapter-1/linear-classification/#_4","text":"我们将 (4) (4) 定义的线性模型称为 单层感知机 (Single-layer perceptron) 模型。它包含一个权重矩阵 \\mathbf{W} \\mathbf{W} 和一个偏置矩阵 \\mathbf{b} \\mathbf{b} 。事实上，可以将 (4) (4) 改写成如下形式 \\begin{align} \\tilde{\\mathbf{y}} = \\sigma \\left( \\begin{bmatrix} \\mathbf{W} & \\mathbf{b} \\end{bmatrix} \\begin{bmatrix} \\mathbf{x} \\\\ 1 \\end{bmatrix} \\right). \\end{align} 可见偏置本身可以看成是输入向量多了一个常数元素的等价模型。 感知机是最早的神经网络形式，它非常孱弱，只能解线性问题，但却为神经网络后来的发展开了先河。在单层感知机里，我们视输入向量 \\mathbf{x} \\mathbf{x} 的每个元素为一个“神经元”，矩阵 \\mathbf{W} \\mathbf{W} 和偏置 \\mathbf{b} \\mathbf{b} 将我们的输入映射到输出层 \\mathbf{y} \\mathbf{y} ，输出层的每个元素也视为一个神经元。在这个过程中， W_{ij} W_{ij} 作为 i i 行 j j 列的元素，代表了连接两个神经元的权重。我们用红线代表正值，蓝线代表负值，感知机可以被图示为 线性感知机的输出也是输入的线性组合，但我们可以添加激活函数，即 \\sigma(\\cdot) \\sigma(\\cdot) 将其映射到非线性空间。这要求我们添加的激活函数是一个非线性函数。 事实上，将单层感知机层叠，前一层的输出作为后一层的输入，就构建出早期的神经网络。这种网络每一层都是全连接的（两个神经元之间总是有权重，尽管值可能为0），每一层都有激活函数。理论上，任意一个两层堆叠的感知机，只要神经元数目足够多，就可以拟合出任意一个非线性函数。然而，实际测试中，这一理论的效果并不尽如人意，因此又有陆续地改进，才有了后来的深度学习。饮水思源，鉴往知来，我们也将从这个简简单单的单层模型开始，走上学习“深度学习”之旅。","text_tokens":["可能","改写","4","也","早期","都","尽如","测试","后来","”","它","输出","w","要求","人意","非常","mathbf","单单","正值","学习","只要","地","感知","线性","常数","组合","layer","为","视为","不","这个","总是","）",".","}","视","因此","神经网","效果","如下","偏置","线性组合","perceptron","每个","映射","了","问题","被","这种","_","-","负值","可以","任意","\\","end","两个","改进","开始","之旅","感知机","将","蓝线","等价","两层",")","矩阵","非线性","从","我们","定义","tilde","又","激活","函数","是","深度","元素","单层","事实上"," ","“","j","堆叠","输入","开","出","事实","尽管","后","拟合","称为","最早","里","ij","却","孱弱","值","足够","并","（","饮水","鉴往知来","解","图示","在","有","列","用","{","&","层","代表","向量","(","right","神经元","全","尽如人意","然而","知机","行","这一","。","走上","包含","每","和","，","sigma","才","网络","前","先河","一层","x","align","多","发展","作为","陆续","left","形式","过程","神经","理论","bmatrix","其","简简单单","添加","本身","这","构建","之间","实际","cdot","神经网络","1","b","0","一个","可见","中","权重","红线","数目","看成","只能","i","single","层叠","连接","空间","=","就","模型","饮水思源","但","即","思源","成","y","的","到","简单","begin","上"],"title":"感知机","title_tokens":["知机","感知机","感知"]},{"location":"book-1-x/chapter-1/linear-classification/#sigmoid","text":"在上述介绍中，我们没有解决的两个问题是， 如何定义插值函数 \\sigma \\sigma ？ 如何找到合适的 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} ？ 我们首先讨论第一个问题。一般地，多分类问题中，如果各个分类彼此并非相斥，且不一定要将结果分入任一类的话，我们可以用 Sigmoid 函数来定义 \\sigma \\sigma ，亦即 \\begin{align} \\sigma(\\mathbf{x}) = \\frac{1}{ 1 + e^{-\\mathbf{x}}}. \\end{align} 它同时满足 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 \\sigma(-\\infty)=0,~\\sigma(0)=0.5,~\\sigma(+\\infty)=1 ，且是一个单调函数。以下代码向我们展示了这种函数的特性： Python 1 2 3 4 5 6 7 8 9 10 11 12 import numpy as np import matplotlib.pyplot as plt def test_sigmoid (): x = np . linspace ( - 5 , 5 , 100 ) y = 1 / ( 1 + np . exp ( - x ) ) plt . plot ( x , y ) plt . xlabel ( 'x' ), plt . ylabel ( 'y' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () if __name__ == '__main__' : test_sigmoid () Output 使用sigmoid函数的一大好处是，它的导数求解非常简单，很适合用来做神经网络这样一个复杂模型的激活函数。注意虽然 \\sigma(\\mathbf{x}) \\sigma(\\mathbf{x}) 和 \\mathbf{x} \\mathbf{x} 都是向量，这意味着导数是Jacobian矩阵，但由于 \\sigma \\sigma 是一个对 \\mathbf{x} \\mathbf{x} 各元素独立的解析函数，这个Jacobian矩阵实际上是一个对角矩阵，对角线上第j个元素的值为 \\begin{align} \\left. \\frac{ \\partial \\sigma(x) }{ \\partial x } \\right|_{x=x_j} = \\left. - e^{-x} \\left( - \\frac{1}{\\left( 1+e^{-x} \\right)^2} \\right) \\right|_{x=x_j} = - \\sigma(x_j) ( 1 - \\sigma(x_j) ). \\end{align} 可见，该函数的导数和计算函数本身的复杂度相若，可以做到快速求导。","text_tokens":["结果","分入","3","4","都","一定","导数","第","求导","讨论","亦","插值","它","w","非常","mathbf","彼此","/","set","对角线","以下","size","test","地","8","相若","2","frac","代码","为","快速","一般","如果","不","show","name","这个",".","}","'","神经网","plt","9","展示","实际上","虽然","各","问题","了","linspace","这种","_","-","可以","解析","6","相斥","plot","\\","第一","end","两个","10","e","if","as","11","def","独立","将","做到",")","矩阵","sigmoid","且","0.5","做","我们","定义","激活","函数","是","来","该","元素","j"," ","向","各个","matplotlib","特性","inches","12","这样","合适","infty","由于","ylabel","5","值","~","在","import","用","对角","{","pyplot","向量","(","right",",","同时","exp","计算","个","的话","单调","。","__","一大","和","没有","，","sigma","网络","用来","x","多","align","求解","注意","意味着","首先","jacobian","left","上述","介绍","python","+","gcf","神经","本身","这","实际","第一个","解决","xlabel","神经网络","如何","b","1","0","分类","好处","复杂","一个","numpy","|","中","100","非常简单","很","可见","partial","7","并非","找到","一类","意味","output","任","使用",":","对","：","复杂度","=","np","^","模型","main","但","即","？","要","适合","y","的","满足","简单","begin","上"],"title":"Sigmoid函数","title_tokens":["函数","sigmoid"]},{"location":"book-1-x/chapter-1/linear-classification/#_5","text":"接下来，我们需要解决第二个问题，亦即找到 \\mathbf{W},~\\mathbf{b} \\mathbf{W},~\\mathbf{b} 。这一问题通常可以写成反问题的形式： \\begin{align} \\arg \\min_\\limits{\\mathbf{W},~\\mathbf{b}} \\sum_{k=1}^N \\mathcal{L} \\left( \\mathbf{y}^{(k)},~ \\sigma ( \\mathbf{W} \\mathbf{x}^{(k)} + \\mathbf{b} ) \\right). \\end{align} 最简单的情况下，我们可以把 损失函数(loss function) 定义为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\lVert \\mathbf{y} - \\tilde{\\mathbf{y}} \\rVert_2^2. \\end{align} 我们称 (8) (8) 为 逻辑斯蒂回归(logistic regression) 。有趣的是，虽然这个术语叫“回归”，但它解的其实是个分类问题。但是，既然这是一个分类问题，我们可以不使用这个损失函数，而是从概率论的角度看待这个问题。由此，我们引出一个新的损失函数：“交叉熵”。","text_tokens":["由此","亦","”","它","w","第二个","mathbf","概率","8","这是","2","但是","mathcal","为","最","不","这个",".","}","sum","虽然","问题","第二","写成","_","-","可以","交叉","新","\\","end","二个","逻辑","把",")","rvert","熵","从","我们","定义","tilde","函数","是","概率论","接下","“"," ","function","术语","loss","既然","limits","斯蒂","下","接下来","有趣","通常","~","解","回归","称","{","其实","(","right",",","个","regression","这一","。","损失","叫","，","sigma","看待","引出","x","align","l","left","形式","+","而是","情况","解决","1","b","分类","n","arg","一个","角度","lvert","找到","logistic","k","min","下来","使用","需要","反","：","=","^","但","即","y","的","简单","begin"],"title":"求解问题","title_tokens":["求解","问题"]},{"location":"book-1-x/chapter-1/linear-classification/#_6","text":"我们视sigmoid函数输出的值为一个概率，表示分类器对预测结果的确信程度，记 \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} \\mathbf{W},~\\mathbf{b} \\in \\boldsymbol{\\Theta} ，则 \\begin{equation} \\begin{aligned} \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}), \\\\ \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) &= 1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}). \\end{aligned} \\end{equation} 注意这里的概率向量的含义是，其中第i个元素表明第i个超平面分类结果的 确信程度 。 然而，这个概率只是分类器对分类结果的确信程度，却并非是分类准确度的概率，实际上，分类 准确度 的概率，应当表述为 \\begin{equation} \\begin{aligned} \\mathbf{p}(\\mathbf{y}|\\mathbf{x};~\\boldsymbol{\\Theta}) &= \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta})^{1-\\mathbf{y}}\\\\ &= \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta})^{\\mathbf{y}} \\left(1 - \\sigma(\\mathbf{x};~\\boldsymbol{\\Theta}) \\right)^{1-\\mathbf{y}}. \\end{aligned} \\end{equation} 注意 这里 \\mathbf{x}^{\\mathbf{y}} \\mathbf{x}^{\\mathbf{y}} 表示的是对每个元素一一求取指数，即函数第i个元素的返回值应当为 {x_i}^{y_i} {x_i}^{y_i} 。 我们使用真实值 \\mathbf{y} \\mathbf{y} 作为指数给概率向量加权。当 \\mathbf{y}=1 \\mathbf{y}=1 时，乘积项的第二个因子消去，该函数退化为以预测值为1的可信度 \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=1|\\mathbf{x};~\\boldsymbol{\\Theta}) ；反之则第一个因子消去，退化为以预测值为0的可信度 \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) \\mathbf{p}(y_i=0|\\mathbf{x};~\\boldsymbol{\\Theta}) 。这就是最大似然估计方法。至此，我们可以写出似然估计函数 \\begin{align} L(\\boldsymbol{\\Theta}) = \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}). \\end{align} 对似然估计函数取对数，则有 \\begin{equation} \\begin{aligned} l(\\boldsymbol{\\Theta}) &= \\sum_{k=1}^N \\log \\left( \\mathbf{p}(\\mathbf{y}^{(k)}|\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta}) \\right) \\\\ &= \\sum_{k=1}^N \\mathbf{y}^{(k)} \\cdot \\log\\left(\\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right) + \\left(1 - \\mathbf{y}^{(k)} \\right) \\cdot \\log\\left(1 - \\sigma(\\mathbf{x}^{(k)};~\\boldsymbol{\\Theta})\\right). \\end{aligned} \\end{equation} 我们最终的目的是要最大化似然函数，亦即 \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) \\mathbf{W},~\\mathbf{b} = \\arg\\max\\limits_{\\boldsymbol{\\Theta}} l(\\boldsymbol{\\Theta}) ，这等价于最小化 -l(\\boldsymbol{\\Theta}) -l(\\boldsymbol{\\Theta}) 。对比 (8) (8) 和 (9) (9) ，于是我们可以定义交叉熵为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{y}} \\right) = \\mathrm{mean}\\left[ \\mathbf{y} \\cdot \\log\\left( \\tilde{\\mathbf{y}} \\right) + \\left(1 - \\mathbf{y} \\right) \\cdot \\log\\left(1 - \\tilde{\\mathbf{y}} \\right) \\right]. \\end{align} 注意这里我们使用 \\mathrm{mean}\\left[ \\cdot \\right] \\mathrm{mean}\\left[ \\cdot \\right] 表示求取一个向量所有元素的平均值。实际上，Tensorflow允许我们定义损失函数的输出为一个和输出向量维度相同的向量，Tensorflow自带的交叉熵也是这样定义的。实际应用时，Tensorflow会自动在向量维度上求均值，并压缩成上述 (14) (14) 的形式。 若我们记 \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) \\tilde{\\mathbf{y}} = \\sigma(\\tilde{\\mathbf{x}}) ，代入sigmoid函数，为了确保该损失函数的稳定性，我们可以将 (14) (14) 整理为 \\begin{align} \\mathcal{L} \\left( \\mathbf{y},~ \\tilde{\\mathbf{x}} \\right) = \\mathrm{mean}\\left[ \\max(\\tilde{\\mathbf{x}}, \\mathbf{0}) - \\tilde{\\mathbf{x}} \\cdot \\mathbf{y} + \\log\\left(1 + e^{-|\\tilde{\\mathbf{x}}|} \\right) \\right]. \\end{align} 提示 这里交叉熵整理的推导过程参见 Tensorflow-API官方文档 。 实际情况下，我们使用 (15) (15) 来求取sigmoid函数激活下的交叉熵。","text_tokens":["结果","去","也","equation","第","boldsymbol","aligned","当","亦","应用","输出","方法","w","第二个","mathbf","准确","p","概率","于是","8","mathcal","可信","记","为","缩成","最小","最大化","这个","定性",".","mathrm","}","视","返回值","指数","9","实际上","给","确信","sum","每个","第二","所有","分类器","_","加权","则","-","表述","可以","为了","项","预测值","交叉","表明","\\","第一","end","tensorflow","二个","压缩","最大","e","大化","；","将","可信度","至此","等价",")","sigmoid","以","熵","自动","整理","相同","我们","程度","定义","[","tilde","写出","均值","允许","函数","api","激活","是","来","该","元素","max","mean"," ","若","14","这样","应当","表示","limits","超平面","取","就是","下","却","值","并","其中","~","在","有","准确度","官方","平均","稳定性","{","&","]","确保","真实","向量","(","right","参见","平面","求取",",","个","消","只是","然而","最终","时","。","这里","损失","和","目的","，","sigma","信度","压缩成","x","注意","align","作为","l","提示","left","上述","形式","过程",";","于","预测","+","推导","退化","情况","这","一一","log","实际","theta","因子","第一个","cdot","1","b","0","上求","分类","|","n","一个","arg","维度","in","并非","自带","似然","返回","反之","k","i","对数","乘积","使用","对","最小化","15","会","代入","=","^","含义","文档","估计","即","要","稳定","平均值","y","的","对比","begin"],"title":"交叉熵","title_tokens":["交叉","熵"]},{"location":"book-1-x/chapter-1/linear-classification/#_7","text":"","text_tokens":[],"title":"解线性多分类问题","title_tokens":["多","解","问题","线性","分类"]},{"location":"book-1-x/chapter-1/linear-classification/#_8","text":"建立一个具有较强可读性的Tensorflow工程需要我们活用python的模块化设计。我们通常推荐以下的结构 . ├─ data/ # where we store our data │ └─ ... ├─ tools.py # codes for post-processing and analyzing records. ├─ extension.py # codes for extending the tensorflow model. ├─ dparser.py # data parser └─ main.py # main module where we define our tensorflow model. 除了保存数据的文件夹，我们应当有三个子模块。其中 tool : 用来处理、分析生成的数据，通常与Tensorflow无关； extension : 用来扩展tensorflow，例如在这里自定义网络层和操作符； dparser : 数据处理器，用来读取并预处理送入网络的数据； main : 主模块，只定义跟Tensorflow模型有关的内容，需要引用 extension 和 dparser 。 视情况可以灵活调整结构，但建议将定义Tensorflow模型的代码单独放在主模块里，和其他外围代码分离。 撰写各个模块时，建议使用类封装各组功能相同的函数。具有良好使用习惯的coder应当注意给各个面向用户的类、函数撰写（哪怕简短的）说明文字，在一些较长的函数、方法的定义中，适当注释各部分的功能，以便读者能正确理解代码意义。 另外，在对象命名上，python有如下必须遵守或不成文的规定，和C/C++用户熟悉的蛇形命名法不同，它大致包括 类与函数多用驼峰命名法，变量可以采用驼峰或蛇形命名法。 驼峰命名法指的是用大小写区分每个单词块，例如 alphaBetaFunction () ； 蛇形命名法指的是用下划线区分每个单词块，例如 alpha_beta_function = 10 ； 宏变量使用全字大写+蛇形命名法 函数/方法，还有模块均是首字母小写，但类的首字母大写。 用单下划线 _ 表示临时存储器，或省略参数，例如一个函数 func () 有两个返回值时，可以用 _ , b = func () 表示我们只需要第二个返回值；单下划线还可以与星号连用省略多个返回值； 以单下划线开头的方法，表示模块级的私有方法，在模块以外使用 import 导入类时，不会导入这些方法，例如 def _alphaBeta ( self ): ； 以单下划线结尾的对象，用来和python的关键字区分，例如 func ( x , class_ ) ; 以双下划线开头的方法，如果不以双下划线结尾，则表示类级的私有方法，只有类内部的方法能调用这些方法，在类外部、包括继承的子类里都原则上不能调用（但其实也有办法调用），例如 def _alphaBeta ( self ): ； 以双下划线同时开头和结尾的方法，一般是用来 重写 (override) 特殊功能，例如 def __getattribute__ (): 将重写获得类属性的方法。","text_tokens":["处理器","熟悉","具有","包括","调整结构","也","继承","命名","都","无关","说明","或","撰写","它","模块化","小写","方法","跟","以双","私有","第二个","processing","另外","这些","/","analyzing","处理","哪怕","对象","存储器","以下","较长","法指","we","级","分离","model","代码","重写","大小","类","for","原则上","变量","预处理","一般","where","原则","不成文","如果","the","适当","─","）",".","自定","不成","视","面向","法","返回值","override","如下","alphabetafunction","多用","给","各","每个","第二","部分","块","define","_","-","则","可以","扩展","以单","单独","活用","可读","tensorflow","建议","理解","参数","store","10","post","能","两个","二个","c","推荐","；","def","将","生成","划线","功能","不同","and","读者","关键","灵活","属性","大小写","文件夹","正确",")","主","parser","各组","还有","调整","│","我们","相同","func","多个","存储","定义","宏","dparser","data","保存","函数","外围","是","全字","module","首字母","例如","理器","成文"," ","结构","各个","设计","操作","function","大致","省略","类级","extending","模块","class","应当","alphabeta","数据","表示","一些","下划","导入","里","c++","单词","以便","子类","并","放在","向用","（","其中","子","通常","送入","py","在","有","import","用","调用","简短","引用","tool","只","类时","内部","内容","alpha","其实","(","其他","规定","获得","网络层",",","星号","同时","records","首字","extension","结尾","时","self","。","这里","__","较强","文件","和","建立","codes","，","意义","、","驼峰","网络","开头","用来","单","x","注意","习惯","面向用户","以外","特殊","└","tools","不以",";","件夹","python","our","+","情况","不能","用户","三个","文字","可读性","采用","正确理解","分析","封装","b","还","getattribute","字母","用单","除了","但类","一个","遵守","蛇形","中","下划线","与","自定义","区分","均","办法","外部","有关","beta","返回","注释","读取","使用",":","关键字","├","需要","必须","双","工程","操作符","...","=","#","大写","连用","不会","只有","模型","main","但","coder","良好","的","临时","上"],"title":"代码规范","title_tokens":["代码","规范"]},{"location":"book-1-x/chapter-1/linear-classification/#tensorflow","text":"在Tensorflow中，我们把变量都称为“ 张量 (Tensor) ”。这是因为我们有零维的标量，一维的向量，二维的矩阵，更高维的我们都称为张量。作为一个更大的概念，张量当然也可以用来包括标量、向量和矩阵了。在Tensorflow中，有的张量是 可以训练 (trainable) 的，有的则不是。比如一个张量的形状（指各维大小），当然可以是一个 < tf . Tensor 'Shape:0' shape = ( 1 ,) dtype = int32 > 类型的张量，但它不是变量，当然就不可训练。我们也可以人为控制某些张量可以训练或不可以训练，但本节、乃至本章所介绍的凡是我们接触到的张量，都是可以训练的。 特别地，对于神经网络而言，在网络内计算（或者说流动、传播）的一个n维数据，通常按照以下形式组织： tensor [ batch , dim1 , dim2 , ... , dimn , channel ] 其中，第一个维度 batch 一定存在，它表示的是单个batch中的某一个样本。如果一个batch只有一个样本，那么 batch 只能取0。 从 dim1 到 dimn 指的是实际的n维数据的各个维度； channel 指的是数据的通道，例如，一个二维RGB图像，每种颜色代表一个通道，因此有三个通道。 channel 通常用在卷积网络里，我们经常需要在深度卷积网络里不断增大通道数的同时，缩小数据尺寸。 在某些特殊情况下， channel 维度可以不存在，例如我们使用的是全连接层而不是卷积网络， tf.keras.layer.Flatten 可以用来将一个有通道的张量压缩成一个没有通道的一维向量（但是注意 batch 维度仍然存在，不会被压缩）。 因此，我们知道一个n维的数据，在神经网络中通常被描述为一个n+2维的矩阵，而一个一维向量，在卷积网络里是三维的： vector [ batch , length , channel ] 但是在全连接网络里，是二维的： vector [ batch , channel ] 在本节，乃至本章里，我们还不讨论卷积网络，因此我们都是使用二维张量（一维向量组）作为我们的数据。","text_tokens":["flatten","包括","而","指各维","也","按照","都","一定","形状","或","”","二维","它","维","shape","讨论","trainable","数","tensor","以下","颜色","更","地","不是","2","通道","更大","大小","但是","batch","layer","为","存在","变量","不可","缩成","单个","描述","如果","不","）",".","'","<","因此","神经网","dim1","vector","或者说","dim2","了","被","三维","一个二维","则","一维","可以","那么","channel","凡是","第一","tensorflow","每种","高维","内","压缩","因为","tf","keras","；","将","传播","把","乃至",")","矩阵","从","我们","[","dimn","缩小","是","深度","仍然","例如","“","rgb"," ","各个","训练","尺寸","int32","数据","表示","图像","取","指","称为","里","下","或者","流动","（","其中","零维","通常","在","有","用","]","层","当然","代表","对于","向量","(",",","计算","同时","人为","全","组织","而言","。","和","没有","，","卷积","、","length","网络","是因为","压缩成","组","用来","特殊","注意","样本","作为","形式","概念","比如","介绍","接触","特别","神经","不断","+","情况","所","三个","这","实际","第一个","本节","神经网络","类型","1","0","还","n","一个","经常","本章","中","维度","增大","张量","dtype","知道",">","只能","标量","连接","使用",":","：","需要","只有","某些","=","就","...","不会","某","但","控制","的","到"],"title":"Tensorflow的数据概念","title_tokens":["数据","的","tensorflow","概念"]},{"location":"book-1-x/chapter-1/linear-classification/#_9","text":"在本项目里，我们不需要扩展Tensorflow。但是，我们需要以随机生成数据代替数据集。因此，首先，通过以下代码定义数据生成器 dparser.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class TestDataSet : ''' A generator of the data set for testing the linear model. ''' def __init__ ( self , scale_x , A , c ): ''' Initialize the data generator. scale_x: the scale of input vector. A, c: the linear transformation. ''' self . s_x = 2 * scale_x self . A = A self . c = c self . len_x = A . shape [ 0 ] self . config () def config ( self , train = True , batch = 100 , noise = 0.1 ): ''' Configuration train: a flag for controlling the iterator mode. batch: the number of samples in a batch noise: std. of the error added to the y. ''' self . train = bool ( train ) self . batch = batch self . noise = noise def next_train ( self ): ''' Get the next train batch: (x, y) ''' x = self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) y = np . matmul ( x , self . A ) + self . c if self . noise > 1e-3 : y = y + np . random . normal ( 0 , self . noise , size = y . shape ) y = np . greater ( y , 0.0 ) . astype ( np . float32 ) return x , y def next_test ( self ): ''' Get the next test batch x. ''' return self . s_x * ( np . random . random ([ self . batch , self . len_x ]) - 0.5 ) def __iter__ ( self ): while True : samp = self . __next__ () yield samp def __next__ ( self ): if self . train : return self . next_train () else : return self . next_test () 该生成器输入一组 \\mathbf{A},~\\mathbf{c} \\mathbf{A},~\\mathbf{c} ，以及相关配置，之后就可以通过 迭代器 (iterator) 或 方法 (method) 随机生成数据。这种数据集写法我们在后面还会用到， model . fit 允许我们不是馈入样本（或样本批次），而是馈入一个 生成器(generator) 。因此我们重写了 __iter__ 方法，并使其通过 yield 返回一个生成器。这样我们定义的数据集类就可以被Keras的训练函数 model . fit 使用。接下来，调用如下测试代码： dparser.py 1 2 3 4 5 6 7 8 9 10 def test_dataset (): A = np . random . normal ( 0 , 10 , [ 10 , 6 ]) c = np . random . uniform ( 1 , 3 , [ 1 , 6 ]) dataSet = TestDataSet ( 10 , A , c ) dIter = iter ( dataSet ) for i in range ( 10 ): x , y = next ( dIter ) print ( np . sum ( y , axis = 0 ) / 100 ) test_dataset () Output [ 0.47 0.57 0.58 0.56 0.5 0.38 ] [ 0.6 0.61 0.47 0.48 0.38 0.52 ] [ 0.5 0.61 0.49 0.42 0.45 0.53 ] [ 0.59 0.52 0.44 0.44 0.49 0.51 ] [ 0.54 0.59 0.48 0.5 0.51 0.47 ] [ 0.49 0.57 0.56 0.49 0.53 0.4 ] [ 0.5 0.61 0.51 0.54 0.51 0.52 ] [ 0.5 0.51 0.61 0.5 0.44 0.5 ] [ 0.44 0.46 0.53 0.45 0.56 0.52 ] [ 0.52 0.46 0.51 0.52 0.49 0.44 ] 我们随机生成了 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的数据，每组数据100个，并且测试了10组。输出结果是各组测试中， \\mathbf{y} \\mathbf{y} 在对应维度上分类为1的概率估计。结果基本都在0.5左右，说明我们的这种数据生成模式产生的点能均匀分布在各个超平面两侧，适合进行后续测试。","text_tokens":["0.58","左右","结果","3","4","iterator","49","测试代码","都","controlling","迭代","0.45","说明","of","或","测试","0.42","输出","shape","方法","uniform","28","均匀分布","19","mathbf","set","/","0.44","matmul","以下","diter","size","test","50","53","概率","8","0.1","不是","0.47","2","0.0","model","代码","但是","重写","dataset","本","for","batch","为","22","44","不","后面","the","std","点","还会","）",".","0.4","41","因此","'","vector","added","}","greater","如下","9","samp","0.56","next","器","sum","基本","了","被","这种","random","_","-","samples","可以","6","扩展","get","后续","to","\\","while","tensorflow","37","10","能","进行","c","随机","if","11","def","mode","keras","生成","range","0.52","initialize","method","32",")","以","train","true","0.5","各组","我们","34","20","项目","定义","[","集","dparser","data","21","允许","42","函数","是","generator","接下","bool","该","均匀"," ","else","45","各个","33","输入","训练","0.53","12","14","38","astype","class","52","float32","数据","一组","noise","testing","这样","print","r","超平面","里","接下来","a","configuration","5","43","并","axis","（","0.51","~","py","在","48","29","*","error","调用","mathbb","iter","用到","30","{","0.38","]","配置","linear","46","normal","27","模式","(","13","54","平面",",","0.57","个","len","通过","transformation","40","成器","self","。","写法","__","批次","17","26","以及","s","集类","对应","，","36","number","组","47","x","fit","样本","首先","39","51","使","代替","+","生成器","而是","23","flag","其","0.6","0.49","馈入","return","定义数据","testdataset","1","0","0.48","1e","0.54","input","18","mapsto","每组","分类","一个","相关","0.59","两侧","中","100","in","维度","config","yield","35","init","0.61","7","31","分布",">","返回","output","i","之后","下来","16",":","使用","15","需要","：","产生","scale","0.46","=","就","24","np","^","估计","并且","适合","25","y","的","上"],"title":"数据生成","title_tokens":["数据","生成"]},{"location":"book-1-x/chapter-1/linear-classification/#_10","text":"顺序(sequential) 模型是一个单输入单输出模型，网络结构较为简单，也不存在跨层短接（残差连接）。在大多数情况下，已经上手的Tensorflow用户不使用这个模型，故而作为我们入门的第一个project，我们姑且用之，但我们将不再使用顺序模型来实现后续的project。一个顺序模型大致可以描述为下图的模式： graph LR st(输<br/>入) --> l1[层<br/>1] l1 --> l2[层<br/>2] l2 --> l3[层<br/>3] l3 --> ldots[层<br/>...] ldots --> ed(输<br/>出) classDef styStart fill:#FAE6A9,stroke:#BA9132; class st,ed styStart 由于我们完成的是一个线性分类器，故而我们使用单层的序列模型即可。 接下来，我们来定义一个类， class LinClsHandle : 。定义一个类的时候，我们通常需要定义的内容包括 在初始化方法 __init__ 里定义传入网络的固定参数，例如学习速率，存取路径等； 在方法 construct 里定义网络的构造和使用的优化器； 在方法 train 里定义训练网络的过程，主要需要调用 model . fit 。如果我们在数据集的定义非常完善，则这一环节不需要花费太多的功夫； 在方法 test 里定义测试网络的过程，主要需要调用 model . evaluate 。如果有必要，可以通过 model . predict 返回测试结果。","text_tokens":["环节","初始","结果","包括","lr","3","也","测试","存取","主要","输出","l2","方法","l3","非常","序列","/","优化","construct","较为简单","必要","学习","l1","test","大多","2","线性","model","类","不再","为","存在","描述","如果","不","这个","）","多数",".","<","project","器","ed","顺序","分类器","-","输","固定","则","可以","短接","st","后续","第一","tensorflow","stroke","等","参数","网络结构","；","将","classdef","之","速率",")","train","入门","我们","残差","[","定义","集","predict","是","来","接下","例如","单层"," ","结构","输入","ldots","训练","大致","出","class","数据","大多数","一","下","里","由于","接下来","（","通常","在","linclshandle","有","用","调用","太多","br","]","层","内容","fae6a9","模式","(","sequential","fill",",","花费","evaluate","入","完善","ba9132","通过","传入","。","__","和","，","网络","完成","stystart","单","fit","跨层","作为","已经","过程",";","情况","功夫","用户","路径","这","故而","第一个","即可","姑且","1","分类","一个","初始化","实现","init","构造",">","下图","返回","时候","graph","下来","连接","使用",":","上手","：","需要","较为","...","#","模型","但","简单","的"],"title":"定义线性顺序模型","title_tokens":["模型","顺序","定义","线性"]},{"location":"book-1-x/chapter-1/linear-classification/#_11","text":"首先，定义初始化方法： lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 def __init__ ( self , learning_rate = 0.01 , epoch = 10 , steppe = 30 ): ''' Initialization and pass fixed parameters. learning_rate: the learning rate for optimizer. epoch: training epochs. steppe: steps per epoch ''' self . lr = learning_rate self . epoch = epoch self . steppe = steppe 由于目前我们的project还非常简单，这里只需要有学习速率( learning_rate )，轮次数( epoch )和每轮迭代次数( steppe )即可。","text_tokens":["初始","lr","3","4","目前","迭代","方法","非常","learning","initialization","pass","学习","fixed","8","2","steppe","for","the",".","'","9","project","steps","_","per","-","6","0.01","10","epochs","def","and","速率",")","training","我们","定义","parameters","每轮"," ","class","由于","5","py","optimizer","linclshandle","有","30","只","(",",","轮","self","。","这里","__","和","，","cls","首先","次数","即可","1","还","lin","初始化","非常简单","init","7","rate",":","：","需要","=","epoch","简单","的"],"title":"初始化方法","title_tokens":["方法","初始化","初始"]},{"location":"book-1-x/chapter-1/linear-classification/#_12","text":"接下来定义网络构造 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def construct ( self ): ''' Construct a linear model and set the optimizer as Adam ''' # Construction self . model = tf . keras . Sequential () self . dense1 = tf . keras . layers . Dense ( LABEL_SHAPE , use_bias = True , input_shape = ( INPUT_SHAPE ,), kernel_initializer = tf . keras . initializers . RandomNormal ( 0.0 , stddev = 10.0 ), bias_initializer = tf . keras . initializers . Constant ( 2 ), activation = tf . nn . sigmoid ) self . model . add ( self . dense1 ) # Set optimizer self . model . compile ( optimizer = tf . train . AdamOptimizer ( self . lr ), loss = tf . keras . losses . BinaryCrossentropy (), metrics = [ self . accuracy , tf . keras . metrics . BinaryAccuracy ()] ) @staticmethod def accuracy ( y_true , y_pred ): return tf . keras . backend . mean ( tf . keras . backend . equal ( y_true , tf . keras . backend . round ( y_pred ))) 须知 这里 LABEL_SHAPE 和 INPUT_SHAPE 为两个宏变量，分别为输出和输入的向量维度。 我们使用 Dense 定义全连接层，它的用法请参照 这里 。由于我们已经知道 \\mathbf{A} \\mathbf{A} 和 \\mathbf{c} \\mathbf{c} 可能的取值范围，这里我们重定义了 \\mathbf{W} \\mathbf{W} 和 \\mathbf{b} \\mathbf{b} 的初始化方式。 信息: Dense API tf . keras . layers . Dense ( shape , ** kwargs ) 指全连接层，其输入一组已知形状的向量，输出一组形状为 shape 的向量。可用的API如下： shape : 正整数，输出空间维度。 activation : 激活函数。 若不指定，则不使用激活函数 (即，线性激活: a(\\mathbf{y}) = \\mathbf{y} a(\\mathbf{y}) = \\mathbf{y} )。该函数可以定义为任何元素级操作的Tensorflow函数。 use_bias : 布尔值，该层是否使用偏置向量。 True 则网络定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} \\mathbf{y} = \\mathbf{W}\\mathbf{x} + \\mathbf{b} ， False 则定义为 \\mathbf{y} = \\mathbf{W}\\mathbf{x} \\mathbf{y} = \\mathbf{W}\\mathbf{x} 。 kernel_initializer : kernel 权值矩阵的初始化器，自定义的初始化器需要使用Keras后端API编写。 bias_initializer : 偏置向量的初始化器，同上。 kernel_regularizer : 运用到 kernel 权值矩阵的正则化函数，自定义的正则化函数需要使用Keras后端API编写。 bias_regularizer : 运用到偏置向的的正则化函数，同上。 activity_regularizer : 运用到层的输出的正则化函数，同上。 kernel_constraint : 运用到 kernel 权值矩阵的约束函数，只能使用Keras备选的几种方案，不能自定义。 bias_constraint : 运用到偏置向量的约束函数，同上。 信息: model.compile API model . compile ( optimizer , ** kwargs ) 在这里指的是顺序模型的编译函数，其可用的API如下： optimizer : 优化器，可以使用Tensorflow内置的优化器。 loss : 损失函数，也是目标函数。顺序模型只有一个输出，因此只能传入一个损失函数。可以使用形式为 func ( y_true , y_pred ) 的Tensorflow函数。 metrics : 测度函数，一般是一组函数，如果是一个函数则定义为 [ func ] 即可。自定义的测度函数目前还需要使用Keras后端API编写。 loss_weights : 损失的权重，顺序模型只有一个损失函数，因此只有一个权重，但要使用一维列表 [ value ] 定义。可以使用张量来控制可变权重。 sample_weight_mode : 按时间步采样权重，默认不提供。相比上面的损失权重，该选项会随着迭代次数使用不同的权重，因此输入的是二维列表。 weighted_metrics : 测度的权重，和损失权重类似，用来加给不同的测度函数。由于我们可以使用不只一个测度函数，这里的权重是个一维列表。 target_tensors : 默认情况下，Keras 将为模型的目标创建一个占位符，在训练过程中将使用目标数据。相反，如果你想使用自己的目标张量（反过来说，Keras在训练期间不会载入这些目标张量的外部 Numpy数据），您可以通过 target_tensors 参数指定它们。对于单输出的顺序模型，它应该是单个张量。 ** kwargs : 其他参量，会传递给 tf . Session . run 。 另外，注意我们这里构造网络的时候有如下技巧： Tensorflow在导入Keras模式以后，已经不再使用 (15) (15) 的形式定义 sigmoid交叉熵 ，而是采取更通用的定义 (14) (14) ； 我们使用Tensorflow重新封装过的类， 二分类交叉熵 ( BinaryCrossentropy ) 来作为Keras模型的损失函数 self.loss ，该函数与 多分类交叉熵 ( CategoricalCrossentropy ) 不同，乃是对两组对比张量的每个元素分别计算交叉熵，再求取均值，正符合本应用的需求； 我们通过静态方法，调用Keras的后端API，自己定义了预测准确度的测度函数 self.accuracy ，同时也使用另一个来自Tensorflow封装好的测度类 二分类准确度 ( BinaryAccuracy ) ，这是为了比照两个准确度的区别，以便我们更好理解该测度类； 我们将网络层的关键字 self.dense1 保留在了实例中，这是为了确保接下来我们能通过实例抽取该层的参数。 需要注意的是，由于 二分类交叉熵 ， 二分类准确度 和 多分类交叉熵 等都是类（从它们的定义都是大写字母开头也可以看出来），因此我们需要在使用的时候后面加上括号以实例化；由于这些类都定义了 __call__ 方法，我们可以像使用函数一样使用它们的实例。","text_tokens":["可能","lr","4","也","都","列表","布尔","应用","adam","它们","tensors","编译","载入","相反","model","符合","变量","use","不","后面",".","'","因此","偏置","了","stddev","想","-","adamoptimizer","一维","取值","为了","任何","pred","tensorflow","参数","as","keras","将","categoricalcrossentropy","从","func","compile","后端","约束","激活","备选","更好"," ","constant","二","几种","以便","（","反过来","*","10.0","范围","13","求取","网络层","区别","通过","add","weight","这里","目标","和","你","用来","注意","过","过程","来说","losses","+","regularizer","其","而是","符","重","封装","1","b","activation","分类","大写字母","默认","初始化","维度","权重","用法","构造","外部","空间","对","乃是","需要","只有","模型","但","要","y","以后","上","初始","静态方法","应该","目前","形状","迭代","采取","可变","w","按","随着","mathbf","占位","8","这是","2","bias","kernel","类","本","好","binarycrossentropy","单个","kwargs","自定","运用","如下","false","每个","顺序","两个","传递","tf","mode","def","；","and",")","矩阵","train","定义","21","函数","接下","元素","mean","向","操作","loss","value","下","接下来","来自","optimizer","在","label","有","准确度","上面","只","]","linear","采样","(","其他","nn",",","同时","。","单","作为","化","次数","须知","即可","请","一个","numpy","自定义","出来","7","session","只能","时候","下来","连接","使用","正则","：","重新","call","#","类似","constraint","加","的","到","round","sample","反过来说","3","输出","需求","该层","metrics","这些","另外","set","construct","方式","准确","0.0","指全","线性","equal","不再","为","一般","the","保留","9","器","指定","run","可以","内置","6","交叉","理解","两组","true","以","我们","[","宏","api","通用","来","输入","训练","12","14","数据","导入","由于","另","调用","{","像","整数","同","确保","参量","计算","个","技巧","__","损失","测度","开头","，","已经","方案","过来","步","一样","不能","提供","选项","return","还","字母","18","中","张量","@","知道","布尔值","自己",":","关键字","dense","控制","对比","比照","可用","再","二维","它","shape","方法","weighted","创建","正","期间","19","已知","优化","更","时间","级","分别","反过","22","binaryaccuracy","如果","看","括号","）","}","construction","给","权值","_","则","\\","等","10","能","c","正整数","11","端","不同","关键","加上","sigmoid","熵","20","均值","是","该","若","initializers","一组","class","后","initializer","指","a","5","是否","py","写字","staticmethod","linclshandle","实例","层","对于","向量","模式","sequential","全","传入","self","17","静态","网络","cls","accuracy","x","多","randomnormal","weights","形式","编写","预测","activity","情况","信息","相比","中将","lin","抽取","input","backend","与","您","layers","16","15","会","target","大写","=","参照","不会","即","dense1","过程中将"],"title":"构造方法","title_tokens":["方法","构造","构造方法"]},{"location":"book-1-x/chapter-1/linear-classification/#_13","text":"最后定义的式训练和测试方法。由于我们目前的project还比较简单，关于这两部分都直接调用现有的API即可。使用的API在之前已经说明。 model.fit 在没有额外设置的情况下，默认会返回一个 History回调器 ； model.evaluate 返回的是测试样本给出的损失函数和准确值测度。 model.predict 返回的是测试样本给出的网络输出。详情请参照 顺序模型API 。 lin-cls.py: class LinClsHandle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def train ( self , dataSet ): ''' Use a data set to train the network. ''' return self . model . fit ( dataSet , epochs = self . epoch , steps_per_epoch = self . steppe ) def test ( self , data , labels ): ''' Use (data, label) pairs to test the results. ''' loss , accu = self . model . evaluate ( data , labels ) print ( 'Evaluated loss =' , loss ) print ( 'Evaluated accuracy =' , accu ) return self . model . predict ( data ) 信息: model.fit API model . fit ( dataSet , ** kwargs ) 是训练函数，注意这个函数虽然支持输入一组 x,~y x,~y 用来代替 dataSet ，我们还是建议在任何情况下都用dataSet馈送数据，以免内存中数据集占用过多。 dataSet : 数据集，其本身应当是一个 tf.data.Dataset 类型的类，或者是一个能不断迭代产生新数据的生成器。数据的 batch 大小由 dataSet 本身决定。 epochs : 整数，终止训练时经历的世代(轮次)数，通常一个epoch表示遍历整个数据集一回。 verbose : 0, 1或2。日志显示模式。 0=安静模式, 1=进度条, 2=每轮一行。默认是1。 callbacks : 回调器，它是 tf.keras.callbacks 模块下的类，用来在训练中进行记录保存和数据检查点更新。默认是 tf.keras.callbacks.History 。 validation_split : 在 0 和 1 之间浮动。用作验证集的训练数据的比例。模型将分出一部分不会被训练的验证数据，并将在每一轮结束时评估这些验证数据的误差和任何其他模型指标。验证数据是混洗之前 x 和 y 数据的最后一部分样本中。 validation_data : 元组 (x_val，y_val) 或元组 (x_val，y_val，val_sample_weights) ，用来评估损失，以及在每轮结束时的任何模型度量指标。模型将不会在这个数据上进行训练。这个参数会覆盖 validation_split 。 shuffle : 布尔值（是否在每轮迭代之前混洗数据）。当 steps_per_epoch 非 None 时，这个参数无效。 class_weight : 可选的字典，用来映射类索引（整数）到权重（浮点）值，用于加权损失函数（仅在训练期间）。这可能有助于告诉模型 「更多关注」来自代表性不足的类的样本。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 initial_epoch : 开始训练的轮次（有助于恢复之前的训练）。 steps_per_epoch : 在声明一个轮次完成并开始下一个轮次之前的总步数（样品批次）。使用TensorFlow数据张量等输入张量进行训练时，默认值 None 等于数据集中样本的数量除以 batch 的大小，如果无法确定，则为1。 validation_steps : 只有在指定了 steps_per_epoch 时才有用。停止前要验证的总步数（批次样本）。 该函数会返回 callbacks 定义的实例。 信息 model.evaluate API model . evaluate ( x , y , ** kwargs ) 是测试函数，需要传入 label 即 y 来验证性能。 x , y : Numpy 数组，分别是输入和输出的真实参照值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 sample_weight : 用来给损失函数添加权重，作用类似 model.compile 的同一参数。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数会返回损失函数和测度（列表）。 信息 model.predict API model . predict ( x , ** kwargs ) 是预测函数，用在只知道输入 x 的场合。 x : Numpy 数组，输入值。 batch_size : 计算的 batch 大小，该函数会将输入的数据组拆分成许多 batch 分别计算，并组合起来，这个设定值对效果不产生影响，只影响计算过程。 verbose : 0, 1。日志显示模式。0=安静模式, 1=进度条。默认是1。 steps : 整数或 None 。 声明评估结束之前的总步数（批次样本）。默认值 None 。 该函数返回预测结果。","text_tokens":["可能","4","都","列表","恢复","布尔","测试方法","「","占用","model","dataset","大小","use","不",".","'","整个","accu","了","被","加权","-","任何","一部","to","新","tensorflow","建议","助于","参数","开始","epochs","keras","轮次","将","shuffle","关于","compile","集","data","保存","每轮"," ","模块","print","表示","确定","设定","值","并","混洗","（","影响","通常","等于","*","用","测试函数","比较","13","安静","evaluate","weight","成器","以及","和","用来","注意","过程","其","告诉","数量","1","终止","默认","权重","无法","val","非","对","产生","需要","只有","模型","y","上","度量","目前","迭代","除以","起来","设定值","8","2","类","式","进度条","kwargs","最后","许多","结束","有用","顺序","经历","tf","；","def",")","train","默认值","浮动","定义","evaluated","函数","馈送","分出","显示","results","loss","可选","下","来自","在","label","只","更新","分成","(","其他",",","时","。","每","声明","fit","之前","添加","浮点","前要","本身","这","即可","现有","内存","一个","numpy","history","验证","7","一回","使用","记录","类似","简单","的","到","sample","结果","回调","检查","3","测试","遍历","当","不足","输出","日志","比较简单","这些","set","数","准确","检查点","batch","为","总","the","这个","效果","9","project","器","映射","steps","指定","部分","per","split","6","评估","生成","我们","无效","索引","api","predict","来","世代","输入","训练","12","14","应当","数据","由于","或者","~","调用","停止","整数","代表","真实","callbacks","覆盖","计算","network","validation","损失","过多","批次","测度","没有","，","」","有助","完成","同一","给出","样本","已经","生成器","详情","return","一部分","类型","指标","还","性能","中","张量","查点","知道","布尔值",":","作用","以免","时才","说明","代表性","或","它","决定","字典","方法","labels","期间","进度","size","更","test","场合","额外","组合","还是","steppe","分别","如果","）","详情请","给","虽然","关注","_","则","等","10","能","进行","11","样品","直接","是","仅","该","none","一组","class","支持","a","5","一行","pairs","是否","py","linclshandle","实例","比例","步数","模式","误差","设置","传入","self","由","网络","cls","一轮","accuracy","x","多","weights","不断","用于","两","代替","预测","元组","情况","信息","之间","0","lin","initial","数组","返回","集中","用作","会","verbose","有助于","=","参照","不会","即","组拆","epoch"],"title":"训练和测试方法","title_tokens":["方法","和","训练","测试方法","测试"]},{"location":"book-1-x/chapter-1/linear-classification/#_14","text":"首先，训练网络。我们随机生成 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 \\mathbf{x} \\mapsto \\mathbf{y}:~\\mathbb{R}^{10} \\mapsto \\mathbb{R}^6 的线性变换，并且设置好数据集，给定噪声扰动为 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 \\boldsymbol{\\varepsilon} \\sim \\mathcal{N}(0,1)^6 。设定20个epoch，每个epoch迭代500次，每次馈入32个样本构成的batch，然后开始训练： lin-cls.py 1 2 3 4 5 6 7 8 9 # Initialization A = np . random . normal ( 0 , 10 , [ INPUT_SHAPE , LABEL_SHAPE ]) c = np . random . uniform ( 1 , 3 , [ 1 , LABEL_SHAPE ]) dataSet = dp . TestDataSet ( 10 , A , c ) dataSet . config ( batch = 32 , noise = 0.1 ) # Construct the model and train it. h = LinClsHandle ( learning_rate = 0.01 , epoch = 20 , steppe = 500 ) h . construct () record = h . train ( iter ( dataSet )) Output Epoch 1 /20 500 /500 [==============================] - 1s 3ms/step - loss: 6 .3005 - accuracy: 0 .5884 - binary_accuracy: 0 .5884 Epoch 2 /20 500 /500 [==============================] - 1s 2ms/step - loss: 5 .4671 - accuracy: 0 .6407 - binary_accuracy: 0 .6407 Epoch 3 /20 500 /500 [==============================] - 1s 2ms/step - loss: 4 .5711 - accuracy: 0 .6957 - binary_accuracy: 0 .6957 Epoch 4 /20 500 /500 [==============================] - 1s 2ms/step - loss: 3 .6789 - accuracy: 0 .7519 - binary_accuracy: 0 .7519 Epoch 5 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .7101 - accuracy: 0 .8127 - binary_accuracy: 0 .8127 Epoch 6 /20 500 /500 [==============================] - 1s 2ms/step - loss: 2 .0059 - accuracy: 0 .8627 - binary_accuracy: 0 .8627 Epoch 7 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .6403 - accuracy: 0 .8894 - binary_accuracy: 0 .8894 Epoch 8 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .3663 - accuracy: 0 .9066 - binary_accuracy: 0 .9066 Epoch 9 /20 500 /500 [==============================] - 1s 2ms/step - loss: 1 .0466 - accuracy: 0 .9274 - binary_accuracy: 0 .9274 Epoch 10 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .8377 - accuracy: 0 .9418 - binary_accuracy: 0 .9418 Epoch 11 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .6465 - accuracy: 0 .9546 - binary_accuracy: 0 .9546 Epoch 12 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .4492 - accuracy: 0 .9667 - binary_accuracy: 0 .9667 Epoch 13 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .2795 - accuracy: 0 .9779 - binary_accuracy: 0 .9779 Epoch 14 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .1624 - accuracy: 0 .9861 - binary_accuracy: 0 .9861 Epoch 15 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0680 - accuracy: 0 .9926 - binary_accuracy: 0 .9926 Epoch 16 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0128 - accuracy: 0 .9971 - binary_accuracy: 0 .9971 Epoch 17 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 18 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0052 - accuracy: 0 .9986 - binary_accuracy: 0 .9986 Epoch 19 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0055 - accuracy: 0 .9981 - binary_accuracy: 0 .9981 Epoch 20 /20 500 /500 [==============================] - 1s 2ms/step - loss: 0 .0049 - accuracy: 0 .9985 - binary_accuracy: 0 .9985 接下来，从训练返回的 History 类型的回调器中抽取对loss和accuracy的记录。 lin-cls.py 1 2 3 4 5 # Show records plt . semilogy ( record . epoch , record . history [ 'loss' ]), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Cross entropy' ) plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () plt . plot ( record . epoch , record . history [ 'accuracy' ], label = 'self defined' ), plt . plot ( record . epoch , record . history [ 'binary_accuracy' ], label = 'from tensorflow' ), plt . xlabel ( 'epoch' ), plt . ylabel ( 'Accuracy' ), plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 结果显示，我们自定义的准确度测度和Tensorflow内置的 二分类准确度 完全相同，这说明其本身的定义就是求取所有元素阈值化后，各自分类结果是否正确的平均值。这个实验也让我们对自定义测度函数有了一定的认识。 重新设定数据集的产生方式，变为每个batch含10个样本。使用这组重新随机生成的数据测试网络输出， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 12 # Generate a group of testing samples: dataSet . config ( batch = 10 ) x , y = next ( dataSet ) # Check the testing results yp = h . test ( x , y ) _ , ( ax1 , ax2 ) = plt . subplots ( 1 , 2 ) ax1 . imshow ( y , interpolation = 'nearest' , aspect = 'auto' ) ax1 . set_title ( 'True class' ) ax2 . imshow ( yp , interpolation = 'nearest' , aspect = 'auto' ) ax2 . set_title ( 'Predicted class' ) plt . gcf () . set_size_inches ( 10 , 5 ), plt . show () Output Evaluated loss ( losses.BinaryCrossentropy ) = 0 .0023145806044340134 Evaluated accuracy ( self defined ) = 1 .0 Evaluated accuracy ( metrics.BinaryAccuracy ) = 1 .0 注意我们未对测量的结果阈值化，因此显示出来的测量结果和理想值略有差别，但从图可知，阈值化后则测量结果全部准确。 通过抽取 h.dense1 的参数，我们可以对比 \\mathbf{A} \\mathbf{A} 和 \\mathbf{W} \\mathbf{W} ，以及 \\mathbf{c} \\mathbf{c} 和 \\mathbf{b} \\mathbf{b} ， lin-cls.py 1 2 3 4 5 6 7 8 9 10 11 # Check the regressed values W , b = h . dense1 . get_weights () plt . imshow ( A , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'A' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . imshow ( W , interpolation = 'nearest' , aspect = 'auto' ), plt . colorbar (), plt . gca () . set_title ( 'W' ) plt . gcf () . set_size_inches ( 6 , 5 ), plt . show () plt . plot ( c . T , label = 'c' ) plt . plot ( b . T , label = 'b' ) plt . legend () plt . gcf () . set_size_inches ( 5 , 5 ), plt . show () Output 可以发现，虽然我们训练的分类器十分有效，但其权值和预期的 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 并不完全相同。这是由于sigmoid函数激活的特性，使得当预测值偏向最小或最大的情况下， |\\sigma(x)| \\rightarrow 1 |\\sigma(x)| \\rightarrow 1 ，根据 (7) (7) ，可知其梯度 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 |\\sigma(x)(1-\\sigma(x))| \\rightarrow 0 ，因此那些分类结果已经比较确信的样本，其梯度消失，对训练网络的影响忽略不计（这是合理的，因为我们不希望极端样本干扰结果，更希望对分类结果不确切的样本进行训练）。故而，我们虽然可以求解出这个分类问题，但求解到的 \\mathbf{W} \\mathbf{W} , \\mathbf{b} \\mathbf{b} 不会回归到 \\mathbf{A} \\mathbf{A} , \\mathbf{c} \\mathbf{c} 上。关于回归问题，我们会在下一节进一步讨论。","text_tokens":["4","semilogy","也","3663","learning","/","model","dataset","发现","defined","0680","完全相同","不",".","'","因此","确信","rightarrow","了","问题","所有","random","check","化后","-","get","未","tensorflow","record","开始","参数","最大","7519","ax1","梯度","关于","正确","从","不计","集","激活"," ","特性","二","noise","阈值","就是","aspect","设定","0466","值","并","（","影响","mathbb","平均","iter","t","比较","略有","colorbar","13","求取","records","通过","以及","和","使得","注意","2ms","losses","其","9986","1","b","mapsto","分类","次","rate","可知","对","产生","4492","认识","但","并且","gca","平均值","y","上","每次","h","迭代","boldsymbol","9861","uniform","w","mathbf","legend","8","这是","2","好","binarycrossentropy","9779","自定","忽略","plt","每个","分类器","合理","0.01","线性变换","and","3005",")","3ms","train","结果显示","定义","evaluated","函数","消失","显示","接下","元素","results","loss","step","变为","预期","9066","下","接下来","ylabel","构成","8127","进一步","在","label","有","准确度","图","]","5884","2795","(","6465","6957",",","0023145806044340134","实验","。","varepsilon","it","化","1624","subplots","本身","馈入","8894","这","故而","9985","testdataset","扰动","自定义","出来","history","7","8377","下来","使用","：","generate","重新","#","binary","yp","np","记录","的","到","auto","结果","回调","3","那些","一定","测试","当","讨论","输出","含","metrics","initialization","set","理想","construct","方式","准确","这组","极端","线性","mathcal","batch","为","sim","最小","the","这个","6789","9","next","predicted","5711","内置","samples","可以","6","预测值","regressed","因为","偏向","生成","0059","让","十分","32","true","相同","我们","[","测量","训练","inches","12","14","数据","testing","r","由于","~","9274","{","然后","title","normal","全部","9418","个","给定","0049","测度","，","sigma","9667","样本","首先","已经","gcf","8627","类型","18","各自","dp","|","output",":","cross","500","对比","entropy","说明","of","或","一节","shape","19","0055","size","更","test","希望","0.1","确切","steppe","7101","nearest","binaryaccuracy","show","）","}","9981","虽然","interpolation","1s","权值","_","则","plot","\\","10","9926","进行","c","随机","11","group","sigmoid","20","完全","均值","出","values","class","有效","a","5","是否","噪声","器中","py","0128","回归","linclshandle","6407","变换","设置","self","ax2","9546","17","4671","网络","cls","accuracy","x","求解","0052","weights","预测","情况","干扰","差别","xlabel","0","lin","抽取","input","n","数据测试","config","返回","6403","一步","16","15","imshow","9971","忽略不计","会","=","根据","不会","^","from","dense1","epoch"],"title":"调试","title_tokens":["调试"]}]}